
> tzurot@1.3.2 test
> jest

FAIL tests/unit/handlers/messageHandler.test.js
  messageHandler
    handleMessage
      ✓ should process webhook messages correctly (13 ms)
      ✓ should handle DM replies (6 ms)
      ✓ should filter messages from bots (5 ms)
      ✓ should handle messages from the bot itself specially (4 ms)
      ✓ should process commands correctly (6 ms)
      ✓ should handle message references (5 ms)
      ✓ should handle mentions (4 ms)
      ✓ should handle active conversations (11 ms)
      ✓ should handle activated channels (4 ms)
      ✓ should handle direct messages (3 ms)
    handleCommand
      ✓ should process valid commands (6 ms)
      ✓ should handle empty commands as help (5 ms)
      ✓ should prevent duplicate command processing (4 ms)
      ✓ should handle errors in command processing (3 ms)
    handleMentions
      ✓ should handle standard mentions (5 ms)
      ✕ should handle multi-word mentions (8 ms)
      ✕ should prioritize longest multi-word mentions (4 ms)
      ✓ should not handle messages without mentions (3 ms)
      ✓ should handle DM mentions immediately without delay (6 ms)
    handleActiveConversation
      ✓ should handle active conversations (2 ms)
      ✓ should not handle if no active conversation (2 ms)
      ✓ should handle DM active conversations immediately without delay (2 ms)
    handleActivatedChannel
      ✓ should handle activated channels (2 ms)
      ✓ should not handle commands in activated channels (5 ms)
      ✓ should enforce NSFW requirements for activated channels (6 ms)
      ✓ should not send NSFW restriction notice too frequently (3 ms)
    handleMessage with activated channels and replies
      ✓ should still process messages in activated channels when replying to other users (3 ms)
      ✓ should not process replies to other users when no personality is activated (4 ms)
    PluralKit message storage
      ✓ should store user messages in pluralkitMessageStore (3 ms)
      ✓ should store DM messages in pluralkitMessageStore (3 ms)
      ✓ should not store bot messages in pluralkitMessageStore (2 ms)
      ✓ should not store webhook messages in pluralkitMessageStore (3 ms)
      ✓ should handle messages with missing author tag (5 ms)

  ● messageHandler › handleMentions › should handle multi-word mentions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {"author": {"bot": false, "id": "author-123", "tag": "User#1234", "username": "User"}, "channel": {"id": "channel-123", "isDMBased": [Function isDMBased], "send": [Function mockConstructor]}, "content": "@Test Personality Hello there", "id": "message-123", "reference": null, "reply": [Function mockConstructor], "webhookId": null},
    - Object {
    -   "displayName": "TestPersonality",
    -   "fullName": "test-personality",
    + Promise {
    +   Symbol(async_id_symbol): 7538,
    +   Symbol(trigger_async_id_symbol): 7530,
      },
      "Test Personality",
      {"user": {"id": "client-123"}},
      [Function handlePersonalityInteraction],

    Number of calls: 1

      540 |       
      541 |       // For server channels (default mock), should use delayed processing
    > 542 |       expect(messageTrackerHandler.delayedProcessing).toHaveBeenCalledWith(
          |                                                       ^
      543 |         multiWordMentionMessage,
      544 |         mockPersonality,
      545 |         'Test Personality',

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.test.js:542:55)
      at Generator.call (tests/unit/handlers/messageHandler.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)

  ● messageHandler › handleMentions › should prioritize longest multi-word mentions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {"author": {"bot": false, "id": "author-123", "tag": "User#1234", "username": "User"}, "channel": {"id": "channel-123", "isDMBased": [Function isDMBased], "send": [Function mockConstructor]}, "content": "@Test Personality Prime Hello there", "id": "message-123", "reference": null, "reply": [Function mockConstructor], "webhookId": null},
    - Object {
    -   "displayName": "Test Personality Prime",
    -   "fullName": "test-personality-prime",
    + Promise {
    +   Symbol(async_id_symbol): 7815,
    +   Symbol(trigger_async_id_symbol): 7807,
      },
      "Test Personality Prime",
      {"user": {"id": "client-123"}},
      [Function handlePersonalityInteraction],

    Number of calls: 1

      592 |       
      593 |       // For server channels, should use delayed processing with the longest match
    > 594 |       expect(messageTrackerHandler.delayedProcessing).toHaveBeenCalledWith(
          |                                                       ^
      595 |         complexMentionMessage,
      596 |         testPersonalityPrime,
      597 |         'Test Personality Prime',

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.test.js:594:55)
      at Generator.call (tests/unit/handlers/messageHandler.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)

FAIL tests/unit/application/bootstrap/ApplicationBootstrap.test.js
  ApplicationBootstrap
    Initialization
      ✕ should initialize successfully with all components (3 ms)
      ✕ should create event bus and wire up event handlers when events enabled (1 ms)
      ✕ should skip event handlers when events disabled (3 ms)
      ✕ should configure PersonalityRouter with application service (3 ms)
      ✕ should initialize command components (2 ms)
      ✕ should not reinitialize if already initialized (1 ms)
      ✕ should handle initialization errors gracefully (2 ms)
    Service Access
      ✕ should provide access to application services after initialization (9 ms)
      ✕ should provide access to event bus after initialization (2 ms)
      ✕ should throw error when accessing services before initialization (2 ms)
    Shutdown
      ✕ should shutdown cleanly (1 ms)
      ✕ should handle shutdown when not initialized (2 ms)
      ✕ should handle shutdown when event handlers not registered (4 ms)
    Singleton Pattern
      ✕ should return same instance for getApplicationBootstrap (3 ms)
      ✕ should reset singleton and allow new instance (1 ms)
      ✕ should handle reset with shutdown errors gracefully (2 ms)
    Feature Logging
      ✕ should log active features during initialization (2 ms)
    Environment Configuration
      ✕ should use environment variables for AI service configuration (6 ms)
      ✕ should use default values when environment variables not set (2 ms)

  ● ApplicationBootstrap › Initialization › should initialize successfully with all components

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should initialize successfully with all components

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should create event bus and wire up event handlers when events enabled

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should create event bus and wire up event handlers when events enabled

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should skip event handlers when events disabled

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should skip event handlers when events disabled

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should configure PersonalityRouter with application service

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should configure PersonalityRouter with application service

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should initialize command components

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should initialize command components

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should not reinitialize if already initialized

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should not reinitialize if already initialized

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should handle initialization errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should handle initialization errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should provide access to application services after initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should provide access to application services after initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should provide access to event bus after initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should provide access to event bus after initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should throw error when accessing services before initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should throw error when accessing services before initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should shutdown cleanly

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should shutdown cleanly

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when not initialized

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when not initialized

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when event handlers not registered

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when event handlers not registered

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should return same instance for getApplicationBootstrap

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should return same instance for getApplicationBootstrap

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should reset singleton and allow new instance

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should reset singleton and allow new instance

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should handle reset with shutdown errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should handle reset with shutdown errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Feature Logging › should log active features during initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Feature Logging › should log active features during initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Environment Configuration › should use environment variables for AI service configuration

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Environment Configuration › should use environment variables for AI service configuration

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Environment Configuration › should use default values when environment variables not set

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Environment Configuration › should use default values when environment variables not set

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

FAIL tests/unit/application/services/PersonalityApplicationService.test.js
  PersonalityApplicationService
    constructor
      ✕ should require personalityRepository (7 ms)
      ✕ should require aiService (2 ms)
      ✕ should require authenticationRepository (2 ms)
      ✕ should use default event bus if not provided (2 ms)
    registerPersonality
      ✕ should reject if personality name already exists (10 ms)
      ✕ should reject if alias conflicts with existing personality (3 ms)
      ✕ should handle AI service errors gracefully (4 ms)
      ✕ should work without aliases (4 ms)
      local mode
        ✕ should successfully register a new local personality (4 ms)
        ✕ should reject local personality without prompt (3 ms)
      external mode
        ✕ should successfully register a new external personality (2 ms)
        ✕ should default to external mode when not specified (2 ms)
    updatePersonalityProfile
      ✕ should update prompt successfully (4 ms)
      ✕ should update model path and resolve new model (3 ms)
      ✕ should update multiple fields at once (3 ms)
      ✕ should reject if personality not found (2 ms)
      ✕ should reject if requester is not the owner (4 ms)
    addAlias
      ✕ should add alias successfully (3 ms)
      ✕ should reject if personality not found (3 ms)
      ✕ should reject if requester is not the owner (3 ms)
      ✕ should reassign alias if already in use by another personality (4 ms)
      ✕ should no-op if alias already points to same personality (5 ms)
    removeAlias
      ✕ should remove alias successfully (3 ms)
      ✕ should reject if requester is not the owner (4 ms)
    removePersonality
      ✕ should remove personality successfully (3 ms)
      ✕ should reject if personality not found (3 ms)
      ✕ should reject if requester is not the owner (3 ms)
    getPersonality
      ✕ should find personality by name (3 ms)
      ✕ should find personality by alias if not found by name (8 ms)
      ✓ should return null if not found (2 ms)
    listPersonalities
      ✕ should return all personalities (2 ms)
    listPersonalitiesByOwner
      ✕ should return personalities for specific owner (5 ms)
    checkPermission
      ✕ should grant permission to owner (4 ms)
      ✕ should grant permission to authenticated user (2 ms)
      ✕ should deny permission to unauthenticated user (2 ms)
      ✕ should deny permission if personality not found (2 ms)
      ✕ should deny permission if no user auth found (3 ms)
      ✕ should handle errors gracefully (3 ms)
    _resolveAIModel
      ✕ should create model with AI service info (2 ms)
      ✕ should create default model if AI service fails (5 ms)
    getPersonalityWithProfile
      ✕ should return null if personality not found (2 ms)
      ✕ should handle errors and re-throw them (2 ms)
      external mode personalities
        ✕ should return personality without refresh if still fresh (3 ms)
        ✕ should refresh profile from API if stale (4 ms)
        ✕ should handle API fetch failure gracefully (3 ms)
      local mode personalities
        ✕ should return local personality without API refresh (2 ms)
    _publishEvents
      ✕ should publish all uncommitted events (4 ms)

  ● PersonalityApplicationService › constructor › should require personalityRepository

    expect(received).toThrow(expected)

    Expected substring: "PersonalityRepository is required"

    Received function did not throw

      110 |         aiService: mockAiService,
      111 |         authenticationRepository: mockAuthenticationRepository
    > 112 |       })).toThrow('PersonalityRepository is required');
          |           ^
      113 |     });
      114 |     
      115 |     it('should require aiService', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:112:11)

  ● PersonalityApplicationService › constructor › should require aiService

    expect(received).toThrow(expected)

    Expected substring: "AIService is required"

    Received function did not throw

      117 |         personalityRepository: mockPersonalityRepository,
      118 |         authenticationRepository: mockAuthenticationRepository
    > 119 |       })).toThrow('AIService is required');
          |           ^
      120 |     });
      121 |     
      122 |     it('should require authenticationRepository', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:119:11)

  ● PersonalityApplicationService › constructor › should require authenticationRepository

    expect(received).toThrow(expected)

    Expected substring: "AuthenticationRepository is required"

    Received function did not throw

      124 |         personalityRepository: mockPersonalityRepository,
      125 |         aiService: mockAiService
    > 126 |       })).toThrow('AuthenticationRepository is required');
          |           ^
      127 |     });
      128 |     
      129 |     it('should use default event bus if not provided', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:126:11)

  ● PersonalityApplicationService › constructor › should use default event bus if not provided

    expect(received).toBeDefined()

    Received: undefined

      134 |       });
      135 |       
    > 136 |       expect(serviceWithDefaultBus.eventBus).toBeDefined();
          |                                              ^
      137 |       expect(serviceWithDefaultBus.eventBus.publish).toBeDefined();
      138 |       expect(typeof serviceWithDefaultBus.eventBus.publish).toBe('function');
      139 |     });

      at Object.toBeDefined (tests/unit/application/services/PersonalityApplicationService.test.js:136:46)

  ● PersonalityApplicationService › registerPersonality › local mode › should successfully register a new local personality

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      158 |         const result = await service.registerPersonality(validLocalCommand);
      159 |         
    > 160 |         expect(result).toBeInstanceOf(Personality);
          |                        ^
      161 |         expect(result.profile.name).toBe('TestBot');
      162 |         expect(result.profile.mode).toBe('local');
      163 |         expect(result.profile.prompt).toBe('You are a helpful test bot');

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:160:24)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › local mode › should reject local personality without prompt

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      173 |         delete invalidCommand.prompt;
      174 |         
    > 175 |         await expect(service.registerPersonality(invalidCommand))
          |               ^
      176 |           .rejects.toThrow('Local personalities require prompt and modelPath');
      177 |       });
      178 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:175:15)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › external mode › should successfully register a new external personality

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      192 |         const result = await service.registerPersonality(validExternalCommand);
      193 |         
    > 194 |         expect(result).toBeInstanceOf(Personality);
          |                        ^
      195 |         expect(result.profile.name).toBe('TestBot');
      196 |         expect(result.profile.mode).toBe('external');
      197 |         expect(result.profile.prompt).toBeNull();

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:194:24)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › external mode › should default to external mode when not specified

    TypeError: Cannot read properties of undefined (reading 'mode')

      212 |         const result = await service.registerPersonality(commandWithoutMode);
      213 |         
    > 214 |         expect(result.profile.mode).toBe('external');
          |                               ^
      215 |       });
      216 |     });
      217 |     

      at mode (tests/unit/application/services/PersonalityApplicationService.test.js:214:31)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should reject if personality name already exists

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      240 |       };
      241 |       
    > 242 |       await expect(service.registerPersonality(command))
          |             ^
      243 |         .rejects.toThrow('Personality "TestBot" already exists');
      244 |       
      245 |       expect(mockPersonalityRepository.save).not.toHaveBeenCalled();

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:242:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should reject if alias conflicts with existing personality

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      275 |       };
      276 |       
    > 277 |       await expect(service.registerPersonality(command))
          |             ^
      278 |         .rejects.toThrow('Alias "TestB" is already in use by OtherBot');
      279 |     });
      280 |     

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:277:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should handle AI service errors gracefully

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      295 |       
      296 |       // Should still create personality with default model capabilities
    > 297 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      298 |       expect(result.model.capabilities.maxTokens).toBe(4096);
      299 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      300 |     });

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:297:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should work without aliases

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      311 |       const result = await service.registerPersonality(command);
      312 |       
    > 313 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      314 |       expect(result.aliases).toHaveLength(0);
      315 |     });
      316 |   });

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:313:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update prompt successfully

    TypeError: service.updatePersonalityProfile is not a function

      338 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      339 |       
    > 340 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      341 |         personalityName: 'TestBot',
      342 |         requesterId: '123456789012345678',
      343 |         prompt: 'Updated prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:340:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update model path and resolve new model

    TypeError: service.updatePersonalityProfile is not a function

      352 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      353 |       
    > 354 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      355 |         personalityName: 'TestBot',
      356 |         requesterId: '123456789012345678',
      357 |         modelPath: '/models/gpt-4'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:354:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update multiple fields at once

    TypeError: service.updatePersonalityProfile is not a function

      366 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      367 |       
    > 368 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      369 |         personalityName: 'TestBot',
      370 |         requesterId: '123456789012345678',
      371 |         prompt: 'New prompt',

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:368:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should reject if personality not found

    TypeError: service.updatePersonalityProfile is not a function

      382 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      383 |       
    > 384 |       await expect(service.updatePersonalityProfile({
          |                            ^
      385 |         personalityName: 'NonExistent',
      386 |         requesterId: '123456789012345678',
      387 |         prompt: 'New prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:384:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should reject if requester is not the owner

    TypeError: service.updatePersonalityProfile is not a function

      392 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      393 |       
    > 394 |       await expect(service.updatePersonalityProfile({
          |                            ^
      395 |         personalityName: 'TestBot',
      396 |         requesterId: '999999999999999999', // Different user
      397 |         prompt: 'New prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:394:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should add alias successfully

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      428 |       });
      429 |       
    > 430 |       expect(result.aliases).toContainEqual(expect.objectContaining({ name: 'NewAlias' }));
          |                              ^
      431 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      432 |       expect(mockEventBus.publish).toHaveBeenCalled();
      433 |     });

      at toContainEqual (tests/unit/application/services/PersonalityApplicationService.test.js:430:30)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reject if personality not found

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      436 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      437 |       
    > 438 |       await expect(service.addAlias({
          |             ^
      439 |         personalityName: 'NonExistent',
      440 |         alias: 'NewAlias',
      441 |         requesterId: '123456789012345678'

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:438:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reject if requester is not the owner

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      446 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      447 |       
    > 448 |       await expect(service.addAlias({
          |             ^
      449 |         personalityName: 'TestBot',
      450 |         alias: 'NewAlias',
      451 |         requesterId: '999999999999999999'

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:448:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reassign alias if already in use by another personality

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      473 |       
      474 |       // Verify alias was added to new personality
    > 475 |       expect(result.aliases).toContainEqual(expect.objectContaining({ value: 'takenalias' }));
          |                              ^
      476 |       
      477 |       // Verify both personalities were saved
      478 |       expect(mockPersonalityRepository.save).toHaveBeenCalledTimes(2);

      at toContainEqual (tests/unit/application/services/PersonalityApplicationService.test.js:475:30)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should no-op if alias already points to same personality

    expect(received).toBe(expected) // Object.is equality

    - Expected  - 38
    + Received  +  1

    - Object {
    -   "aliases": Array [
    -     Object {
    -       "original": "ExistingAlias",
    -       "value": "existingalias",
    -     },
    -   ],
    -   "createdAt": "2025-06-19T07:39:13.030Z",
    -   "id": "personality-mc32lddy-dp182ow",
    -   "model": Object {
    -     "capabilities": Object {
    -       "maxTokens": 4096,
    -       "supportsAudio": false,
    -       "supportsImages": false,
    -       "temperature": 0.7,
    -     },
    -     "name": "gpt-4",
    -     "path": "/model",
    -   },
    -   "ownerId": "123456789012345678",
    -   "personalityId": "personality-mc32lddy-dp182ow",
    -   "profile": Object {
    -     "avatarUrl": null,
    -     "displayName": "TestBot",
    -     "errorMessage": null,
    -     "jailbreak": null,
    -     "maxWordCount": 2000,
    -     "mode": "local",
    -     "modelPath": "/model",
    -     "name": "TestBot",
    -     "prompt": "Test prompt",
    -     "temperature": 1,
    -     "voiceConfig": null,
    -   },
    -   "removed": false,
    -   "updatedAt": "2025-06-19T07:39:13.030Z",
    -   "version": 2,
    - }
    + Object {}

      496 |       });
      497 |       
    > 498 |       expect(result).toBe(existingPersonality);
          |                      ^
      499 |       // Should not save when alias already exists for same personality
      500 |       expect(mockPersonalityRepository.save).not.toHaveBeenCalled();
      501 |     });

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:498:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removeAlias › should remove alias successfully

    TypeError: service.removeAlias is not a function

      520 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      521 |       
    > 522 |       const result = await service.removeAlias({
          |                                    ^
      523 |         personalityName: 'TestBot',
      524 |         alias: 'TB',
      525 |         requesterId: '123456789012345678'

      at removeAlias (tests/unit/application/services/PersonalityApplicationService.test.js:522:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removeAlias › should reject if requester is not the owner

    TypeError: service.removeAlias is not a function

      534 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      535 |       
    > 536 |       await expect(service.removeAlias({
          |                            ^
      537 |         personalityName: 'TestBot',
      538 |         alias: 'TB',
      539 |         requesterId: '999999999999999999'

      at removeAlias (tests/unit/application/services/PersonalityApplicationService.test.js:536:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should remove personality successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      563 |       });
      564 |       
    > 565 |       expect(existingPersonality.isRemoved).toBe(true);
          |                                             ^
      566 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      567 |       expect(mockPersonalityRepository.delete).toHaveBeenCalledWith(existingPersonality.id.toString());
      568 |       expect(mockEventBus.publish).toHaveBeenCalled();

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:565:45)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should reject if personality not found

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      572 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      573 |       
    > 574 |       await expect(service.removePersonality({
          |             ^
      575 |         personalityName: 'NonExistent',
      576 |         requesterId: '123456789012345678'
      577 |       })).rejects.toThrow('Personality "NonExistent" not found');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:574:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should reject if requester is not the owner

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      581 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      582 |       
    > 583 |       await expect(service.removePersonality({
          |             ^
      584 |         personalityName: 'TestBot',
      585 |         requesterId: '999999999999999999'
      586 |       })).rejects.toThrow('Only the owner can remove a personality');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:583:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonality › should find personality by name

    expect(received).toBe(expected) // Object.is equality

    Expected: {"aliases": [{"original": "TB", "value": "tb"}], "createdAt": "2025-06-19T07:39:13.053Z", "id": "personality-mc32ldel-0u1mi7t", "model": {"capabilities": {"maxTokens": 4096, "supportsAudio": false, "supportsImages": false, "temperature": 0.7}, "name": "gpt-4", "path": "/model"}, "ownerId": "123456789012345678", "personalityId": "personality-mc32ldel-0u1mi7t", "profile": {"avatarUrl": null, "displayName": "TestBot", "errorMessage": null, "jailbreak": null, "maxWordCount": 1000, "mode": "local", "modelPath": "/model", "name": "TestBot", "prompt": "Test prompt", "temperature": 1, "voiceConfig": null}, "removed": false, "updatedAt": "2025-06-19T07:39:13.053Z", "version": 2}
    Received: null

      606 |       const result = await service.getPersonality('TestBot');
      607 |       
    > 608 |       expect(result).toBe(personality);
          |                      ^
      609 |       expect(mockPersonalityRepository.findByName).toHaveBeenCalledWith('TestBot');
      610 |       expect(mockPersonalityRepository.findByAlias).not.toHaveBeenCalled();
      611 |     });

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:608:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonality › should find personality by alias if not found by name

    expect(received).toBe(expected) // Object.is equality

    Expected: {"aliases": [{"original": "TB", "value": "tb"}], "createdAt": "2025-06-19T07:39:13.057Z", "id": "personality-mc32ldep-mztfnkl", "model": {"capabilities": {"maxTokens": 4096, "supportsAudio": false, "supportsImages": false, "temperature": 0.7}, "name": "gpt-4", "path": "/model"}, "ownerId": "123456789012345678", "personalityId": "personality-mc32ldep-mztfnkl", "profile": {"avatarUrl": null, "displayName": "TestBot", "errorMessage": null, "jailbreak": null, "maxWordCount": 1000, "mode": "local", "modelPath": "/model", "name": "TestBot", "prompt": "Test prompt", "temperature": 1, "voiceConfig": null}, "removed": false, "updatedAt": "2025-06-19T07:39:13.057Z", "version": 2}
    Received: null

      617 |       const result = await service.getPersonality('TB');
      618 |       
    > 619 |       expect(result).toBe(personality);
          |                      ^
      620 |       expect(mockPersonalityRepository.findByAlias).toHaveBeenCalledWith('TB');
      621 |     });
      622 |     

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:619:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › listPersonalities › should return all personalities

    TypeError: service.listPersonalities is not a function

      650 |       mockPersonalityRepository.findAll.mockResolvedValue(personalities);
      651 |       
    > 652 |       const result = await service.listPersonalities();
          |                                    ^
      653 |       
      654 |       expect(result).toEqual(personalities);
      655 |       expect(mockPersonalityRepository.findAll).toHaveBeenCalled();

      at listPersonalities (tests/unit/application/services/PersonalityApplicationService.test.js:652:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › listPersonalitiesByOwner › should return personalities for specific owner

    expect(received).toEqual(expected) // deep equality

    - Expected  - 68
    + Received  +  1

    - Array [
    -   Object {
    -     "aliases": Array [],
    -     "createdAt": "2025-06-19T07:39:13.071Z",
    -     "id": "personality-mc32ldf3-qawtyl6",
    -     "model": Object {
    -       "capabilities": Object {
    -         "maxTokens": 4096,
    -         "supportsAudio": false,
    -         "supportsImages": false,
    -         "temperature": 0.7,
    -       },
    -       "name": "gpt-4",
    -       "path": "/model",
    -     },
    -     "ownerId": "123456789012345678",
    -     "personalityId": "personality-mc32ldf3-qawtyl6",
    -     "profile": Object {
    -       "avatarUrl": null,
    -       "displayName": "Bot1",
    -       "errorMessage": null,
    -       "jailbreak": null,
    -       "maxWordCount": 1000,
    -       "mode": "local",
    -       "modelPath": "/model",
    -       "name": "Bot1",
    -       "prompt": "Prompt1",
    -       "temperature": 1,
    -       "voiceConfig": null,
    -     },
    -     "removed": false,
    -     "updatedAt": "2025-06-19T07:39:13.071Z",
    -     "version": 1,
    -   },
    -   Object {
    -     "aliases": Array [],
    -     "createdAt": "2025-06-19T07:39:13.071Z",
    -     "id": "personality-mc32ldf3-dytkjgk",
    -     "model": Object {
    -       "capabilities": Object {
    -         "maxTokens": 4096,
    -         "supportsAudio": false,
    -         "supportsImages": false,
    -         "temperature": 0.7,
    -       },
    -       "name": "gpt-4",
    -       "path": "/model",
    -     },
    -     "ownerId": "123456789012345678",
    -     "personalityId": "personality-mc32ldf3-dytkjgk",
    -     "profile": Object {
    -       "avatarUrl": null,
    -       "displayName": "Bot2",
    -       "errorMessage": null,
    -       "jailbreak": null,
    -       "maxWordCount": 1000,
    -       "mode": "local",
    -       "modelPath": "/model",
    -       "name": "Bot2",
    -       "prompt": "Prompt2",
    -       "temperature": 1,
    -       "voiceConfig": null,
    -     },
    -     "removed": false,
    -     "updatedAt": "2025-06-19T07:39:13.071Z",
    -     "version": 1,
    -   },
    - ]
    + Array []

      679 |       const result = await service.listPersonalitiesByOwner(ownerId);
      680 |       
    > 681 |       expect(result).toEqual(personalities);
          |                      ^
      682 |       expect(mockPersonalityRepository.findByOwner).toHaveBeenCalledWith(expect.objectContaining({
      683 |         value: ownerId
      684 |       }));

      at toEqual (tests/unit/application/services/PersonalityApplicationService.test.js:681:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should grant permission to owner

    TypeError: service.checkPermission is not a function

      703 |       mockPersonalityRepository.findByAlias.mockResolvedValue(null);
      704 |       
    > 705 |       const hasPermission = await service.checkPermission({
          |                                           ^
      706 |         userId: ownerId,
      707 |         personalityName: 'TestBot'
      708 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:705:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should grant permission to authenticated user

    TypeError: service.checkPermission is not a function

      722 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(mockUserAuth);
      723 |       
    > 724 |       const hasPermission = await service.checkPermission({
          |                                           ^
      725 |         userId: otherUserId,
      726 |         personalityName: 'TestBot'
      727 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:724:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission to unauthenticated user

    TypeError: service.checkPermission is not a function

      741 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(mockUserAuth);
      742 |       
    > 743 |       const hasPermission = await service.checkPermission({
          |                                           ^
      744 |         userId: otherUserId,
      745 |         personalityName: 'TestBot'
      746 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:743:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission if personality not found

    TypeError: service.checkPermission is not a function

      753 |       mockPersonalityRepository.findByAlias.mockResolvedValue(null);
      754 |       
    > 755 |       const hasPermission = await service.checkPermission({
          |                                           ^
      756 |         userId: ownerId,
      757 |         personalityName: 'NonExistent'
      758 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:755:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission if no user auth found

    TypeError: service.checkPermission is not a function

      767 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(null);
      768 |       
    > 769 |       const hasPermission = await service.checkPermission({
          |                                           ^
      770 |         userId: otherUserId,
      771 |         personalityName: 'TestBot'
      772 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:769:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should handle errors gracefully

    TypeError: service.checkPermission is not a function

      778 |       mockPersonalityRepository.findByName.mockRejectedValue(new Error('DB error'));
      779 |       
    > 780 |       const hasPermission = await service.checkPermission({
          |                                           ^
      781 |         userId: ownerId,
      782 |         personalityName: 'TestBot'
      783 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:780:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _resolveAIModel › should create model with AI service info

    TypeError: service._resolveAIModel is not a function

      791 |       const modelPath = '/models/gpt-4';
      792 |       
    > 793 |       const model = await service._resolveAIModel(modelPath);
          |                                   ^
      794 |       
      795 |       expect(model).toBeInstanceOf(AIModel);
      796 |       expect(model.name).toBe('gpt-4');

      at _resolveAIModel (tests/unit/application/services/PersonalityApplicationService.test.js:793:35)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _resolveAIModel › should create default model if AI service fails

    TypeError: service._resolveAIModel is not a function

      803 |       mockAiService.getModelInfo.mockRejectedValue(new Error('Model not found'));
      804 |       
    > 805 |       const model = await service._resolveAIModel(modelPath);
          |                                   ^
      806 |       
      807 |       expect(model).toBeInstanceOf(AIModel);
      808 |       expect(model.name).toBe(modelPath);

      at _resolveAIModel (tests/unit/application/services/PersonalityApplicationService.test.js:805:35)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should return personality without refresh if still fresh

    TypeError: service.getPersonalityWithProfile is not a function

      836 |         mockPersonalityRepository.findByName.mockResolvedValue(externalPersonality);
      837 |         
    > 838 |         const result = await service.getPersonalityWithProfile('test-bot');
          |                                      ^
      839 |         
      840 |         expect(result).toBe(externalPersonality);
      841 |         expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:838:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should refresh profile from API if stale

    TypeError: service.getPersonalityWithProfile is not a function

      850 |         });
      851 |         
    > 852 |         const result = await service.getPersonalityWithProfile('test-bot', '123456789012345678');
          |                                      ^
      853 |         
      854 |         expect(result).toBeInstanceOf(Personality);
      855 |         expect(result.profile.displayName).toBe('Test Bot Updated');

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:852:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should handle API fetch failure gracefully

    TypeError: service.getPersonalityWithProfile is not a function

      864 |         mockProfileFetcher.fetchProfileInfo.mockResolvedValue(null);
      865 |         
    > 866 |         const result = await service.getPersonalityWithProfile('test-bot');
          |                                      ^
      867 |         
      868 |         expect(result).toBe(externalPersonality);
      869 |         expect(result.profile.displayName).toBe('Test Bot'); // Original values unchanged

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:866:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › local mode personalities › should return local personality without API refresh

    TypeError: service.getPersonalityWithProfile is not a function

      894 |         mockPersonalityRepository.findByName.mockResolvedValue(localPersonality);
      895 |         
    > 896 |         const result = await service.getPersonalityWithProfile('local-bot');
          |                                      ^
      897 |         
      898 |         expect(result).toBe(localPersonality);
      899 |         expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:896:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › should return null if personality not found

    TypeError: service.getPersonalityWithProfile is not a function

      905 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      906 |       
    > 907 |       const result = await service.getPersonalityWithProfile('non-existent');
          |                                    ^
      908 |       
      909 |       expect(result).toBeNull();
      910 |       expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:907:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › should handle errors and re-throw them

    TypeError: service.getPersonalityWithProfile is not a function

      914 |       mockPersonalityRepository.findByName.mockRejectedValue(new Error('Database error'));
      915 |       
    > 916 |       await expect(service.getPersonalityWithProfile('test-bot'))
          |                            ^
      917 |         .rejects.toThrow('Database error');
      918 |       
      919 |       expect(logger.error).toHaveBeenCalledWith(expect.stringContaining('Error getting personality'));

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:916:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _publishEvents › should publish all uncommitted events

    TypeError: service._publishEvents is not a function

      939 |       expect(personality.getUncommittedEvents()).toHaveLength(1);
      940 |       
    > 941 |       await service._publishEvents(personality);
          |                     ^
      942 |       
      943 |       expect(mockEventBus.publish).toHaveBeenCalledTimes(1);
      944 |       expect(mockEventBus.publish).toHaveBeenCalledWith(

      at _publishEvents (tests/unit/application/services/PersonalityApplicationService.test.js:941:21)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

FAIL tests/unit/handlers/messageHandler.mentions.test.js
  checkForPersonalityMentions
    single word mentions
      ✓ should detect valid single-word personality mention (6 ms)
      ✓ should handle mention at end of message (3 ms)
      ✓ should handle mention with punctuation (2 ms)
      ✕ should return false for invalid mention (3 ms)
    multi-word mentions
      ✕ should detect valid two-word personality mention (3 ms)
      ✓ should handle multi-word mention at end of message (4 ms)
      ✕ should handle multi-word mention with punctuation (3 ms)
      ✕ should handle three-word aliases when max is 3 (7 ms)
      ✓ should not check beyond max word count (3 ms)
    edge cases
      ✓ should handle empty message content (3 ms)
      ✓ should handle null message content (3 ms)
      ✓ should handle multiple mentions and return true on first match (2 ms)
      ✕ should handle mentions with multiple spaces (3 ms)
    regex generation based on max word count
      ✓ should generate correct regex for 1 word max (2 ms)
      ✕ should generate correct regex for 5 word max (4 ms)

  ● checkForPersonalityMentions › single word mentions › should return false for invalid mention

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      66 |       const result = await checkForPersonalityMentions(message);
      67 |
    > 68 |       expect(result).toBe(false);
         |                      ^
      69 |     });
      70 |   });
      71 |

      at toBe (tests/unit/handlers/messageHandler.mentions.test.js:68:22)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should detect valid two-word personality mention

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      84 |
      85 |       expect(result).toBe(true);
    > 86 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
         |                                     ^
      87 |     });
      88 |
      89 |     it('should handle multi-word mention at end of message', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:86:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should handle multi-word mention with punctuation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      107 |
      108 |       expect(result).toBe(true);
    > 109 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
          |                                     ^
      110 |     });
      111 |
      112 |     it('should handle three-word aliases when max is 3', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:109:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should handle three-word aliases when max is 3

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "the dark lord"
    Received: "the"

    Number of calls: 1

      121 |
      122 |       expect(result).toBe(true);
    > 123 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('the dark lord');
          |                                     ^
      124 |     });
      125 |
      126 |     it('should not check beyond max word count', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:123:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › edge cases › should handle mentions with multiple spaces

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      178 |       expect(result).toBe(true);
      179 |       // Should normalize spaces
    > 180 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
          |                                     ^
      181 |     });
      182 |
      183 |     // Note: Testing different mention characters (@ vs &) requires complex module mocking

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:180:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › regex generation based on max word count › should generate correct regex for 5 word max

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "one two three four five"
    Received: "one"

    Number of calls: 1

      209 |
      210 |       // Should check up to 5 words
    > 211 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('one two three four five');
          |                                     ^
      212 |       // Should not check 6 words
      213 |       expect(getPersonalityByAlias).not.toHaveBeenCalledWith('one two three four five six');
      214 |     });

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:211:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: PersonalityApplicationService not available
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Service error
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Service error
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error adding alias: Cannot read properties of undefined (reading 'displayName')
2025-06-19 03:39:13 [31merror[39m: [AliasCommand] Error: Cannot read properties of undefined (reading 'displayName')
FAIL tests/unit/application/commands/personality/AliasCommand.test.js
  AliasCommand
    command metadata
      ✓ should have correct properties (6 ms)
      ✓ should have correct options (3 ms)
    execute
      ✕ should add alias successfully with embed (24 ms)
      ✕ should add alias successfully without embed support (6 ms)
      ✕ should handle slash command options (5 ms)
      ✕ should require both arguments for text command (3 ms)
      ✕ should validate personality name is provided (3 ms)
      ✕ should validate alias is provided (2 ms)
      ✕ should validate alias format (3 ms)
      ✕ should handle service errors (9 ms)
      ✕ should handle personality without avatar (5 ms)
      ✕ should handle personality without display name (5 ms)
      ✕ should handle missing personality service (6 ms)
      ✕ should handle service exceptions (5 ms)
      ✕ should lowercase input arguments (4 ms)
      ✕ should use default bot prefix when not provided (3 ms)
      ✓ should handle missing user ID (5 ms)

  ● AliasCommand › execute › should add alias successfully with embed

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      84 |       await command.execute(mockContext);
      85 |       
    > 86 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
         |                                               ^
      87 |       
      88 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
      89 |         expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:86:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should add alias successfully without embed support

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      105 |       await command.execute(mockContext);
      106 |       
    > 107 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      108 |       expect(mockContext.respond).toHaveBeenCalledWith(
      109 |         '✅ Alias "newalias" has been added to **Test Personality**.'
      110 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:107:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle slash command options

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      122 |       await command.execute(mockContext);
      123 |       
    > 124 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      125 |     });
      126 |
      127 |     it('should require both arguments for text command', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:124:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should require both arguments for text command

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "You need to provide a personality name and an alias. Usage: `!tz alias <personality-name> <new-alias>`"
    Received: {"embeds": [{"color": 2201331, "description": "Add a nickname or shortcut for an existing personality.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz alias <personality-name> <new-alias>`"}, {"inline": false, "name": "Examples", "value": "• `!tz alias Claude cl` - Add \"cl\" as alias for Claude
    • `!tz alias \"Assistant Bot\" helper` - Add \"helper\" as alias
    • `!tz alias MyAI ai-buddy` - Add \"ai-buddy\" as alias"}, {"inline": false, "name": "Parameters", "value": "• **personality-name**: Name or existing alias of the personality
    • **new-alias**: The new shortcut to add (letters, numbers, underscores, hyphens only)"}], "footer": {"text": "Aliases make it easier to mention personalities quickly"}, "title": "How to Add an Alias"}]}

    Number of calls: 1

      131 |       
      132 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 133 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      134 |         'You need to provide a personality name and an alias. Usage: `!tz alias <personality-name> <new-alias>`'
      135 |       );
      136 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:133:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate personality name is provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Please provide a personality name or alias."
    Received: {"embeds": [{"color": 16007990, "description": "Please provide a personality name or existing alias.", "fields": [{"inline": false, "name": "What to provide", "value": "• The personality's name (e.g., \"Claude\")
    • Or an existing alias (e.g., \"cl\")"}], "title": "❌ Missing Personality Name"}]}

    Number of calls: 1

      142 |       
      143 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 144 |       expect(mockContext.respond).toHaveBeenCalledWith('Please provide a personality name or alias.');
          |                                   ^
      145 |     });
      146 |
      147 |     it('should validate alias is provided', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:144:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate alias is provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Please provide a new alias."
    Received: {"embeds": [{"color": 16007990, "description": "Please provide a new alias to add.", "fields": [{"inline": false, "name": "What to provide", "value": "A short nickname for the personality (e.g., \"helper\", \"ai-bot\", \"assistant\")"}], "title": "❌ Missing Alias"}]}

    Number of calls: 1

      151 |       
      152 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 153 |       expect(mockContext.respond).toHaveBeenCalledWith('Please provide a new alias.');
          |                                   ^
      154 |     });
      155 |
      156 |     it('should validate alias format', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:153:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate alias format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Aliases can only contain letters, numbers, underscores, and hyphens."
    Received: {"embeds": [{"color": 16007990, "description": "Aliases can only contain letters, numbers, underscores, and hyphens.", "fields": [{"inline": false, "name": "Valid characters", "value": "• Letters (a-z, A-Z)
    • Numbers (0-9)
    • Underscores (_)
    • Hyphens (-)"}, {"inline": false, "name": "Examples", "value": "✅ `claude-ai`
    ✅ `helper_bot`
    ✅ `AI2024`
    ❌ `claude.ai`
    ❌ `helper bot`
    ❌ `AI@2024`"}], "title": "❌ Invalid Alias Format"}]}

    Number of calls: 1

      160 |       
      161 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 162 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      163 |         'Aliases can only contain letters, numbers, underscores, and hyphens.'
      164 |       );
      165 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:162:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle service errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Alias already exists"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "Cannot read properties of undefined (reading 'displayName')"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753909"}, "timestamp": "2025-06-19T07:39:13.909Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      173 |       await command.execute(mockContext);
      174 |       
    > 175 |       expect(mockContext.respond).toHaveBeenCalledWith('Alias already exists');
          |                                   ^
      176 |     });
      177 |
      178 |     it('should handle personality without avatar', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:175:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle personality without avatar

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectNotContaining {"thumbnail": Anything}

    Number of calls: 0

      190 |       await command.execute(mockContext);
      191 |       
    > 192 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      193 |         expect.not.objectContaining({
      194 |           thumbnail: expect.anything()
      195 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:192:44)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle personality without display name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": "An alias has been set for **testpersonality**."}

    Number of calls: 0

      210 |       await command.execute(mockContext);
      211 |       
    > 212 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      213 |         expect.objectContaining({
      214 |           description: 'An alias has been set for **testpersonality**.'
      215 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:212:44)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while adding the alias. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753926"}, "timestamp": "2025-06-19T07:39:13.926Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      222 |       await command.execute(mockContext);
      223 |       
    > 224 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      225 |         '❌ An error occurred while adding the alias. ' +
      226 |         'Please try again later or contact support if the issue persists.'
      227 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:224:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle service exceptions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while adding the alias. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "Service error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753932"}, "timestamp": "2025-06-19T07:39:13.932Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      233 |       await command.execute(mockContext);
      234 |       
    > 235 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      236 |         '❌ An error occurred while adding the alias. ' +
      237 |         'Please try again later or contact support if the issue persists.'
      238 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:235:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should lowercase input arguments

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      244 |       await command.execute(mockContext);
      245 |       
    > 246 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      247 |     });
      248 |
      249 |     it('should use default bot prefix when not provided', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:246:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should use default bot prefix when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "`!tz alias"
    Received: {"embeds": [{"color": 2201331, "description": "Add a nickname or shortcut for an existing personality.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz alias <personality-name> <new-alias>`"}, {"inline": false, "name": "Examples", "value": "• `!tz alias Claude cl` - Add \"cl\" as alias for Claude
    • `!tz alias \"Assistant Bot\" helper` - Add \"helper\" as alias
    • `!tz alias MyAI ai-buddy` - Add \"ai-buddy\" as alias"}, {"inline": false, "name": "Parameters", "value": "• **personality-name**: Name or existing alias of the personality
    • **new-alias**: The new shortcut to add (letters, numbers, underscores, hyphens only)"}], "footer": {"text": "Aliases make it easier to mention personalities quickly"}, "title": "How to Add an Alias"}]}

    Number of calls: 1

      253 |       await command.execute(mockContext);
      254 |       
    > 255 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      256 |         expect.stringContaining('`!tz alias')
      257 |       );
      258 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:255:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

FAIL tests/unit/webhookManager.creation.test.js
  WebhookManager - Webhook Creation and Management
    preloadPersonalityAvatar
      ✕ should preload a personality avatar (32 ms)
      ✕ should handle personalities with no avatar URL (19 ms)
      ✕ should handle null or undefined personalities (22 ms)
    getStandardizedUsername
      ✕ should prioritize displayName if available (21 ms)
      ✕ should truncate display names longer than 32 characters (24 ms)
      ✕ should extract name from fullName if displayName is not available (19 ms)
      ✕ should use fullName if it has no hyphens and is short enough (21 ms)
      ✕ should return "Bot" for null or undefined personality (17 ms)

  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should preload a personality avatar

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      186 |       
      187 |       // Call the function
    > 188 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      189 |       
      190 |       // Verify fetch was called with the avatar URL
      191 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:188:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should handle personalities with no avatar URL

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      210 |       
      211 |       // Call the function
    > 212 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      213 |       
      214 |       // Verify fetch was not called
      215 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:212:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should handle null or undefined personalities

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      223 |     it('should handle null or undefined personalities', async () => {
      224 |       // Call the function with null personality
    > 225 |       await webhookManager.preloadPersonalityAvatar(null);
          |                            ^
      226 |       
      227 |       // Verify fetch was not called
      228 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:225:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      242 |       };
      243 |       
    > 244 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      245 |       expect(result).toBe('Test Display Name');
      246 |     });
      247 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:244:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should truncate display names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      251 |       };
      252 |       
    > 253 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      254 |       expect(result.length).toBeLessThanOrEqual(32);
      255 |       expect(result).toContain('...');
      256 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:253:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should extract name from fullName if displayName is not available

    TypeError: webhookManager.getStandardizedUsername is not a function

      261 |       };
      262 |       
    > 263 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      264 |       // Should extract the first part before the hyphen
      265 |       expect(result).toBe('Test');
      266 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:263:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should use fullName if it has no hyphens and is short enough

    TypeError: webhookManager.getStandardizedUsername is not a function

      271 |       };
      272 |       
    > 273 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      274 |       expect(result).toBe('Shortname');
      275 |     });
      276 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:273:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      276 |     
      277 |     it('should return "Bot" for null or undefined personality', () => {
    > 278 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      279 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      280 |     });
      281 |   });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:278:29)

FAIL tests/unit/adapters/persistence/FilePersonalityRepository.test.js
  FilePersonalityRepository
    initialize
      ✕ should create data directory if it does not exist (3 ms)
      ✕ should load existing data file (2 ms)
      ✕ should create new file if it does not exist (2 ms)
      ✕ should throw error for other file read errors (3 ms)
      ✓ should not reinitialize if already initialized (3 ms)
    save
      ✕ should save a personality (6 ms)
      ✕ should update existing personality (2 ms)
      ✕ should handle save errors (2 ms)
      ✕ should initialize if not already initialized (3 ms)
    findById
      ✕ should find personality by ID (2 ms)
      ✓ should return null if personality not found (2 ms)
      ✕ should handle errors during hydration (2 ms)
    findByOwner
      ✕ should find all personalities by owner (3 ms)
      ✓ should return empty array if no personalities found (1 ms)
      ✕ should handle errors during hydration (3 ms)
    findByAlias
      ✕ should find personality by alias (2 ms)
      ✕ should find personality by alias case-insensitive (5 ms)
      ✕ should return null if alias not found (2 ms)
      ✕ should clean up orphaned alias and return null (2 ms)
      ✕ should handle errors during hydration (1 ms)
    findAll
      ✕ should return all personalities (3 ms)
      ✓ should return empty array if no personalities (2 ms)
      ✕ should handle errors during hydration (2 ms)
    delete
      ✕ should delete a personality and its aliases (2 ms)
      ✕ should handle deleting non-existent personality (2 ms)
      ✕ should handle delete errors (2 ms)
    exists
      ✕ should return true if personality exists (2 ms)
      ✕ should return false if personality does not exist (3 ms)
    createBackup
      ✕ should create backup file with timestamp (2 ms)
      ✕ should handle backup errors (2 ms)
    getStats
      ✕ should return repository statistics (4 ms)
      ✕ should return zero stats for empty repository (1 ms)
    legacy data migration
      ✕ should detect and migrate legacy format data (2 ms)
      ✕ should handle missing aliases file gracefully (2 ms)
      ✓ should not migrate if data is already in new format (2 ms)
      ✕ should access migrated data correctly after migration (2 ms)
    hydration behavior
      ✕ should handle aliases as strings (1 ms)
      ✕ should handle aliases as objects (2 ms)
      ✕ should handle missing profile (2 ms)
      ✕ should mark events as committed (2 ms)
    persistence behavior
      ✕ should write to temp file then rename (3 ms)
      ✕ should format JSON with indentation (2 ms)
      ✕ should throw specific error on failure (2 ms)

  ● FilePersonalityRepository › initialize › should create data directory if it does not exist

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "./test-data", {"recursive": true}

    Number of calls: 0

       98 |       await repository.initialize();
       99 |       
    > 100 |       expect(fs.mkdir).toHaveBeenCalledWith('./test-data', { recursive: true });
          |                        ^
      101 |     });
      102 |     
      103 |     it('should load existing data file', async () => {

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:100:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should load existing data file

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-data/test-personalities.json", "utf8"

    Number of calls: 0

      104 |       await repository.initialize();
      105 |       
    > 106 |       expect(fs.readFile).toHaveBeenCalledWith(
          |                           ^
      107 |         path.join('./test-data', 'test-personalities.json'),
      108 |         'utf8'
      109 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:106:27)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should create new file if it does not exist

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-data/test-personalities.json.tmp", "{
      \"personalities\": {},
      \"aliases\": {}
    }", "utf8"

    Number of calls: 0

      119 |       await repository.initialize();
      120 |       
    > 121 |       expect(fs.writeFile).toHaveBeenCalledWith(
          |                            ^
      122 |         path.join('./test-data', 'test-personalities.json.tmp'),
      123 |         JSON.stringify({ personalities: {}, aliases: {} }, null, 2),
      124 |         'utf8'

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:121:28)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should throw error for other file read errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: undefined

      133 |       fs.readFile.mockRejectedValue(new Error('Permission denied'));
      134 |       
    > 135 |       await expect(repository.initialize()).rejects.toThrow(
          |             ^
      136 |         'Failed to initialize repository: Permission denied'
      137 |       );
      138 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:135:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at _next (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should save a personality

    expect(received).not.toBeNull()

    Received: null

      174 |       // Verify behavior - personality can be retrieved
      175 |       const saved = await repository.findById(new PersonalityId('new-personality'));
    > 176 |       expect(saved).not.toBeNull();
          |                         ^
      177 |       expect(saved.profile.displayName).toBe('New Personality');
      178 |       const byAlias = await repository.findByAlias('newbie');
      179 |       expect(byAlias).not.toBeNull();

      at toBeNull (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:176:25)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should update existing personality

    TypeError: Cannot read properties of null (reading 'updateProfile')

      194 |       // Fetch and update real domain object
      195 |       const existingPersonality = await repository.findById(new PersonalityId('test-personality'));
    > 196 |       existingPersonality.updateProfile({
          |                           ^
      197 |         prompt: 'Updated prompt for test personality'
      198 |       });
      199 |       

      at updateProfile (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:196:27)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should handle save errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      223 |       );
      224 |       
    > 225 |       await expect(repository.save(personality)).rejects.toThrow(
          |             ^
      226 |         'Failed to save personality: Failed to persist data: Disk full'
      227 |       );
      228 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:225:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should initialize if not already initialized

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      245 |       await repository.save(personality);
      246 |       
    > 247 |       expect(fs.mkdir).toHaveBeenCalled();
          |                        ^
      248 |       // Verify behavior - personality was saved
      249 |       const saved = await repository.findById(new PersonalityId('new-personality'));
      250 |       expect(saved).not.toBeNull();

      at toHaveBeenCalled (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:247:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findById › should find personality by ID

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality

    Received value has no prototype
    Received value: null

      259 |       
      260 |       // Verify returns real domain object
    > 261 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      262 |       expect(result.personalityId.value).toBe('test-personality');
      263 |       expect(result.ownerId.value).toBe('123456789012345678');
      264 |       expect(result.profile.displayName).toBe('Test Personality');

      at toBeInstanceOf (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:261:22)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findById › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: null

      290 |       await repository.initialize();
      291 |       
    > 292 |       await expect(repository.findById(new PersonalityId('bad-data'))).rejects.toThrow(
          |             ^
      293 |         'Failed to find personality'
      294 |       );
      295 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:292:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByOwner › should find all personalities by owner

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      314 |       
      315 |       // Verify returns real domain objects
    > 316 |       expect(results).toHaveLength(2);
          |                       ^
      317 |       expect(results[0]).toBeInstanceOf(Personality);
      318 |       expect(results[1]).toBeInstanceOf(Personality);
      319 |       expect(results.map(p => p.personalityId.value)).toEqual(['test-personality', 'test-personality-2']);

      at toHaveLength (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:316:23)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByOwner › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: []

      344 |       await repository.initialize();
      345 |       
    > 346 |       await expect(repository.findByOwner(new UserId('123456789012345678'))).rejects.toThrow(
          |             ^
      347 |         'Failed to find personalities by owner'
      348 |       );
      349 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:346:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should find personality by alias

    TypeError: repository.findByAlias is not a function

      354 |       await repository.initialize();
      355 |       
    > 356 |       const result = await repository.findByAlias('test');
          |                                       ^
      357 |       
      358 |       expect(result).toBeInstanceOf(Personality);
      359 |       expect(result.personalityId.value).toBe('test-personality');

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:356:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should find personality by alias case-insensitive

    TypeError: repository.findByAlias is not a function

      363 |       await repository.initialize();
      364 |       
    > 365 |       const result = await repository.findByAlias('TEST');
          |                                       ^
      366 |       
      367 |       expect(result).toBeInstanceOf(Personality);
      368 |       expect(result.personalityId.value).toBe('test-personality');

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:365:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should return null if alias not found

    TypeError: repository.findByAlias is not a function

      372 |       await repository.initialize();
      373 |       
    > 374 |       const result = await repository.findByAlias('non-existent');
          |                                       ^
      375 |       
      376 |       expect(result).toBeNull();
      377 |     });

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:374:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should clean up orphaned alias and return null

    TypeError: repository.findByAlias is not a function

      393 |       await repository.initialize();
      394 |       
    > 395 |       const result = await repository.findByAlias('orphan');
          |                                       ^
      396 |       
      397 |       expect(result).toBeNull();
      398 |       // Verify behavior - orphan cleaned up in subsequent finds

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:395:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should handle errors during hydration

    TypeError: repository.findByAlias is not a function

      419 |       await repository.initialize();
      420 |       
    > 421 |       await expect(repository.findByAlias('bad')).rejects.toThrow(
          |                               ^
      422 |         'Failed to find personality by alias'
      423 |       );
      424 |     });

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:421:31)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findAll › should return all personalities

    expect(received).toHaveLength(expected)

    Expected length: 3
    Received length: 0
    Received array:  []

      450 |       const results = await repository.findAll();
      451 |       
    > 452 |       expect(results).toHaveLength(3);
          |                       ^
      453 |       expect(results.every(p => p instanceof Personality)).toBe(true);
      454 |       expect(results.map(p => p.personalityId.value)).toEqual(['test-personality', 'test-2', 'test-3']);
      455 |     });

      at toHaveLength (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:452:23)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findAll › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: []

      488 |       await repository.initialize();
      489 |       
    > 490 |       await expect(repository.findAll()).rejects.toThrow(
          |             ^
      491 |         'Failed to find all personalities'
      492 |       );
      493 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:490:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should delete a personality and its aliases

    TypeError: repository.delete is not a function

      498 |       await repository.initialize();
      499 |       
    > 500 |       await repository.delete(new PersonalityId('test-personality'));
          |                              ^
      501 |       
      502 |       // Verify behavior - personality and aliases no longer found
      503 |       const personality = await repository.findById(new PersonalityId('test-personality'));

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:500:30
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should handle deleting non-existent personality

    TypeError: repository.delete is not a function

      513 |       await repository.initialize();
      514 |       
    > 515 |       await repository.delete(new PersonalityId('non-existent'));
          |                              ^
      516 |       
      517 |       expect(fs.writeFile).not.toHaveBeenCalled();
      518 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:515:30
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should handle delete errors

    TypeError: repository.delete is not a function

      522 |       fs.writeFile.mockRejectedValue(new Error('Permission denied'));
      523 |       
    > 524 |       await expect(repository.delete(new PersonalityId('test-personality'))).rejects.toThrow(
          |                                     ^
      525 |         'Failed to delete personality'
      526 |       );
      527 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:524:37
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › exists › should return true if personality exists

    TypeError: repository.exists is not a function

      532 |       await repository.initialize();
      533 |       
    > 534 |       const result = await repository.exists(new PersonalityId('test-personality'));
          |                                       ^
      535 |       
      536 |       expect(result).toBe(true);
      537 |     });

      at exists (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:534:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › exists › should return false if personality does not exist

    TypeError: repository.exists is not a function

      540 |       await repository.initialize();
      541 |       
    > 542 |       const result = await repository.exists(new PersonalityId('non-existent'));
          |                                       ^
      543 |       
      544 |       expect(result).toBe(false);
      545 |     });

      at exists (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:542:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › createBackup › should create backup file with timestamp

    TypeError: repository.createBackup is not a function

      552 |       jest.spyOn(global, 'Date').mockImplementation(() => mockDate);
      553 |       
    > 554 |       const backupPath = await repository.createBackup();
          |                                           ^
      555 |       
      556 |       expect(backupPath).toBe(path.join('./test-data', 'personalities-backup-2024-01-15T10-30-45-123Z.json'));
      557 |       expect(fs.writeFile).toHaveBeenCalledWith(

      at createBackup (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:554:43)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › createBackup › should handle backup errors

    TypeError: repository.createBackup is not a function

      566 |       fs.writeFile.mockRejectedValue(new Error('No space left'));
      567 |       
    > 568 |       await expect(repository.createBackup()).rejects.toThrow(
          |                               ^
      569 |         'Failed to create backup: No space left'
      570 |       );
      571 |     });

      at createBackup (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:568:31)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › getStats › should return repository statistics

    TypeError: repository.getStats is not a function

      596 |       await repository.save(personality3);
      597 |       
    > 598 |       const stats = await repository.getStats();
          |                                      ^
      599 |       
      600 |       expect(stats).toEqual({
      601 |         totalPersonalities: 3,

      at getStats (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:598:38)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › getStats › should return zero stats for empty repository

    TypeError: repository.getStats is not a function

      611 |       await repository.initialize();
      612 |       
    > 613 |       const stats = await repository.getStats();
          |                                      ^
      614 |       
      615 |       expect(stats).toEqual({
      616 |         totalPersonalities: 0,

      at getStats (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:613:38)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should detect and migrate legacy format data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "personalities.legacy.json", "{
      \"test-personality\": {
        \"fullName\": \"test-personality\",
        \"addedBy\": \"123456789012345678\",
        \"displayName\": \"Test Display\",
        \"avatarUrl\": \"https://example.com/avatar.png\",
        \"errorMessage\": \"Test error message\",
        \"lastUpdated\": \"2025-06-18T17:45:21.858Z\"
      },
      \"another-personality\": {
        \"fullName\": \"another-personality\",
        \"addedBy\": \"987654321098765432\",
        \"addedAt\": \"2025-06-01T10:00:00.000Z\",
        \"displayName\": \"Another Display\"
      }
    }"

    Number of calls: 0

      665 |
      666 |       // Verify backup was created
    > 667 |       expect(fs.writeFile).toHaveBeenCalledWith(
          |                            ^
      668 |         expect.stringContaining('personalities.legacy.json'),
      669 |         JSON.stringify(legacyData, null, 2)
      670 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:667:28)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should handle missing aliases file gracefully

    TypeError: Cannot read properties of undefined (reading '1')

      725 |         call[0].endsWith('.tmp')
      726 |       );
    > 727 |       const persistedData = JSON.parse(writeCall[1]);
          |                                                 ^
      728 |       
      729 |       expect(persistedData.personalities['test-personality']).toBeDefined();
      730 |       expect(persistedData.aliases).toEqual({});

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:727:49
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should access migrated data correctly after migration

    TypeError: Cannot read properties of null (reading 'personalityId')

      777 |       const personality = await repository.findByName('test-personality');
      778 |       expect(personality).toBeDefined();
    > 779 |       expect(personality.personalityId.value).toBe('test-personality');
          |                          ^
      780 |       expect(personality.profile.displayName).toBe('Test Display');
      781 |
      782 |       // Test finding by alias

      at personalityId (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:779:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle aliases as strings

    TypeError: Cannot read properties of null (reading 'aliases')

      803 |       const retrieved = await repository.findById(new PersonalityId('test-id'));
      804 |       
    > 805 |       expect(retrieved.aliases).toHaveLength(2);
          |                        ^
      806 |       expect(retrieved.aliases[0].value).toBe('alias1');
      807 |       expect(retrieved.aliases[1].value).toBe('alias2');
      808 |     });

      at aliases (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:805:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle aliases as objects

    TypeError: Cannot read properties of null (reading 'aliases')

      829 |       const personality = await repository.findById(new PersonalityId('test-id'));
      830 |       
    > 831 |       expect(personality.aliases).toHaveLength(2);
          |                          ^
      832 |       expect(personality.aliases[0].value).toBe('alias1');
      833 |       expect(personality.aliases[1].value).toBe('alias2');
      834 |     });

      at aliases (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:831:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle missing profile

    TypeError: Cannot read properties of null (reading 'profile')

      856 |       
      857 |       // When created, personality gets a default profile
    > 858 |       expect(personality.profile).not.toBeNull();
          |                          ^
      859 |       // Check that the profile has default values
      860 |       expect(personality.profile.name).toBe('test-id');
      861 |       expect(personality.profile.prompt).toBe('You are test-id');

      at profile (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:858:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should mark events as committed

    TypeError: Cannot read properties of null (reading 'getUncommittedEvents')

      877 |       const retrieved = await repository.findById(new PersonalityId('test-id'));
      878 |       
    > 879 |       expect(retrieved.getUncommittedEvents()).toHaveLength(0);
          |                        ^
      880 |     });
      881 |   });
      882 |   

      at getUncommittedEvents (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:879:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should write to temp file then rename

    expect(received).not.toBeNull()

    Received: null

      899 |       // Save operation should trigger persist
      900 |       const persistedPersonality = await repository.findById(new PersonalityId('new'));
    > 901 |       expect(persistedPersonality).not.toBeNull();
          |                                        ^
      902 |       expect(fs.writeFile).toHaveBeenCalledWith(
      903 |         tempPath,
      904 |         expect.any(String),

      at toBeNull (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:901:40)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should format JSON with indentation

    TypeError: Cannot read properties of undefined (reading '1')

      921 |       await repository.save(personality);
      922 |       
    > 923 |       const writtenData = fs.writeFile.mock.calls[0][1];
          |                                                     ^
      924 |       expect(writtenData).toContain('  '); // Check for indentation
      925 |       expect(() => JSON.parse(writtenData)).not.toThrow();
      926 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:923:53
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should throw specific error on failure

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      938 |         AIModel.createDefault()
      939 |       );
    > 940 |       await expect(repository.save(personality)).rejects.toThrow('Failed to save personality');
          |             ^
      941 |     });
      942 |   });
      943 | });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:940:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

FAIL tests/unit/application/commands/authentication/AuthCommand.test.js
  AuthCommand
    metadata
      ✓ should have correct command metadata (3 ms)
    help display
      ✕ should show help when no action is provided (4 ms)
      ✕ should show admin commands for administrators (2 ms)
      ✕ should show admin commands for bot owner (6 ms)
    proxy system handling
      ✕ should reject webhook commands from proxy systems (2 ms)
    auth start
      ✕ should send auth URL in DM when in DM channel (2 ms)
      ✕ should send DM when in public channel (2 ms)
      ✕ should handle DM failure gracefully (2 ms)
      ✕ should handle auth URL generation failure (3 ms)
    auth code
      ✕ should reject code submission in public channels (2 ms)
      ✕ should process code in DM channel (1 ms)
      ✕ should handle spoiler-wrapped codes (2 ms)
      ✕ should handle missing code (2 ms)
      ✕ should handle invalid code (2 ms)
      ✕ should handle token storage failure (6 ms)
    auth status
      ✕ should show status when not authenticated (1 ms)
      ✕ should show status when authenticated (2 ms)
      ✕ should show token details when available (2 ms)
      ✕ should warn about expiring tokens (3 ms)
    auth revoke
      ✕ should revoke token successfully (2 ms)
      ✕ should handle revoke failure (2 ms)
    auth cleanup
      ✕ should require admin permission (2 ms)
      ✕ should allow cleanup for administrators (2 ms)
      ✕ should allow cleanup for bot owner (2 ms)
      ✕ should handle cleanup errors (2 ms)
    error handling
      ✕ should handle unknown subcommands (2 ms)
      ✕ should handle unexpected errors (5 ms)
    options support
      ✕ should support action option for slash commands (1 ms)
      ✕ should support code option for slash commands (2 ms)

  ● AuthCommand › help display › should show help when no action is provided

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:80:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › help display › should show admin commands for administrators

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:102:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › help display › should show admin commands for bot owner

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:121:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › proxy system handling › should reject webhook commands from proxy systems

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:143:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should send auth URL in DM when in DM channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:161:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should send DM when in public channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:183:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should handle DM failure gracefully

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:211:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should handle auth URL generation failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:227:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should reject code submission in public channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:244:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should process code in DM channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:262:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle spoiler-wrapped codes

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:282:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle missing code

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:290:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle invalid code

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:307:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle token storage failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:324:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show status when not authenticated

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:342:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show status when authenticated

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:359:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show token details when available

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:387:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should warn about expiring tokens

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:416:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth revoke › should revoke token successfully

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:438:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth revoke › should handle revoke failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:456:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should require admin permission

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:476:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should allow cleanup for administrators

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:494:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should allow cleanup for bot owner

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:512:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should handle cleanup errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:530:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › error handling › should handle unknown subcommands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:553:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › error handling › should handle unexpected errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:569:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › options support › should support action option for slash commands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:591:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › options support › should support code option for slash commands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:600:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

FAIL tests/unit/handlers/dmHandler.test.js
  dmHandler
    handleDmReply
      ✕ should handle errors when personality interaction fails (1 ms)
      ✕ should return false when no personality is found after all lookup attempts (2 ms)
      ✕ should handle replies to personality messages in DMs (2 ms)
      ✕ should handle replies to continued messages without personality prefix (1 ms)
      ✕ should handle personality names with server suffixes (1 ms)
      ✕ should match personality by exact display name (1 ms)
      ✕ should match personality by display name prefix (1 ms)
      ✕ should match personality by first part of full name (2 ms)
      ✕ should try multiple personality lookup methods (1 ms)
      ✕ should not handle replies to non-bot messages (1 ms)
      ✕ should not handle non-DM messages (7 ms)
      ✕ should not handle messages from bots (2 ms)
      ✕ should not handle messages without references (1 ms)
      ✕ should find personality from earlier message in multi-chunk scenario (1 ms)
      ✕ should match personality by standardized username (1 ms)
      ✕ should match personality by exact full name (1 ms)
      ✕ should handle errors when looking up previous messages for multi-chunk (1 ms)
      ✕ should skip personalities with null or undefined fullName (2 ms)
    handleDirectMessage
      ✕ should handle errors when sending verification prompt (3 ms)
      ✕ should handle errors when sending personality summon prompt (2 ms)
      ✕ should use personality from alias when direct lookup fails (2 ms)
      ✕ should handle direct messages with active personalities (1 ms)
      ✕ should prompt user to verify if not verified (1 ms)
      ✕ should bypass verification for trusted proxy systems (1 ms)
      ✕ should find personality by global alias when user-specific alias fails (1 ms)
      ✕ should prompt user to summon a personality if no active personality (1 ms)
      ✕ should not handle non-DM messages (2 ms)
      ✕ should not handle messages from bots (8 ms)
      ✕ should return false when personality exists but both lookups return null (2 ms)

  ● dmHandler › handleDmReply › should handle errors when personality interaction fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should return false when no personality is found after all lookup attempts

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle replies to personality messages in DMs

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle replies to continued messages without personality prefix

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle personality names with server suffixes

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by exact display name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by display name prefix

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by first part of full name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should try multiple personality lookup methods

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle replies to non-bot messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle non-DM messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle messages from bots

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle messages without references

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should find personality from earlier message in multi-chunk scenario

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by standardized username

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by exact full name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle errors when looking up previous messages for multi-chunk

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should skip personalities with null or undefined fullName

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle errors when sending verification prompt

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle errors when sending personality summon prompt

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should use personality from alias when direct lookup fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle direct messages with active personalities

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should prompt user to verify if not verified

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should bypass verification for trusted proxy systems

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should find personality by global alias when user-specific alias fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should prompt user to summon a personality if no active personality

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should not handle non-DM messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should not handle messages from bots

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should return false when personality exists but both lookups return null

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

FAIL tests/unit/adapters/ai/HttpAIServiceAdapter.test.js
  HttpAIServiceAdapter
    constructor
      ✕ should initialize with provided config (5 ms)
      ✕ should throw error when no base URL provided (3 ms)
      ✕ should use environment variable for base URL (2 ms)
    checkHealth
      ✕ should return true when health check succeeds (2 ms)
      ✕ should return false when health check fails (2 ms)
      ✕ should handle timeout with AbortController (1 ms)
    sendRequest
      ✕ should successfully generate content (10 ms)
      ✕ should validate AIRequest input (3 ms)
      ✕ should handle network errors with retry (5 ms)
      ✕ should not retry on client errors (4 ms)
    getStats
      ✕ should return adapter statistics (2 ms)
    error transformation
      ✕ should transform 401 errors (2 ms)
      ✕ should transform 429 errors (2 ms)
      ✕ should transform timeout errors (1 ms)
      ✕ should return original error if cannot transform (3 ms)

  ● HttpAIServiceAdapter › constructor › should initialize with provided config

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://api.example.com"
    Received: undefined

      53 |   describe('constructor', () => {
      54 |     it('should initialize with provided config', () => {
    > 55 |       expect(adapter.baseUrl).toBe('https://api.example.com');
         |                               ^
      56 |       expect(adapter.headers).toEqual({ 'X-API-Key': 'test-key' });
      57 |       expect(adapter.timeout).toBe(5000);
      58 |       expect(adapter.maxRetries).toBe(2);

      at Object.toBe (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:55:31)

  ● HttpAIServiceAdapter › constructor › should throw error when no base URL provided

    expect(received).toThrow(expected)

    Expected substring: "AI service base URL is required"

    Received function did not throw

      64 |       delete process.env.SERVICE_API_BASE_URL;
      65 |       
    > 66 |       expect(() => new HttpAIServiceAdapter()).toThrow('AI service base URL is required');
         |                                                ^
      67 |     });
      68 |     
      69 |     it('should use environment variable for base URL', () => {

      at Object.toThrow (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:66:48)

  ● HttpAIServiceAdapter › constructor › should use environment variable for base URL

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://default.example.com"
    Received: undefined

      72 |       
      73 |       const defaultAdapter = new HttpAIServiceAdapter();
    > 74 |       expect(defaultAdapter.baseUrl).toBe('https://default.example.com');
         |                                      ^
      75 |       expect(defaultAdapter.timeout).toBe(30000);
      76 |       expect(defaultAdapter.maxRetries).toBe(3);
      77 |       expect(defaultAdapter.retryDelay).toBe(1000);

      at Object.toBe (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:74:38)

  ● HttpAIServiceAdapter › checkHealth › should return true when health check succeeds

    TypeError: adapter.checkHealth is not a function

      90 |       });
      91 |
    > 92 |       const result = await adapter.checkHealth();
         |                                    ^
      93 |       
      94 |       expect(result).toBe(true);
      95 |       expect(mockFetch).toHaveBeenCalledWith(

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:92:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › checkHealth › should return false when health check fails

    TypeError: adapter.checkHealth is not a function

      105 |       mockFetch.mockRejectedValue(new Error('Network error'));
      106 |
    > 107 |       const result = await adapter.checkHealth();
          |                                    ^
      108 |       
      109 |       expect(result).toBe(false);
      110 |       expect(logger.warn).toHaveBeenCalled();

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:107:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › checkHealth › should handle timeout with AbortController

    TypeError: adapter.checkHealth is not a function

      117 |       mockFetch.mockRejectedValue(abortError);
      118 |       
    > 119 |       const result = await adapter.checkHealth();
          |                                    ^
      120 |       
      121 |       expect(result).toBe(false);
      122 |       expect(logger.warn).toHaveBeenCalledWith(

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:119:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should successfully generate content

    expect(received).toBeInstanceOf(expected)

    Expected constructor: AIContent
    Received constructor: Object

      164 |       const result = await adapter.sendRequest(mockRequest);
      165 |       
    > 166 |       expect(result).toBeInstanceOf(AIContent);
          |                      ^
      167 |       expect(result.getText()).toBe('Hello from AI!');
      168 |       expect(mockFetch).toHaveBeenCalledWith(
      169 |         'https://api.example.com/v1/chat/completions',

      at toBeInstanceOf (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:166:22)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should validate AIRequest input

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      180 |
      181 |     it('should validate AIRequest input', async () => {
    > 182 |       await expect(adapter.sendRequest('not-a-request'))
          |             ^
      183 |         .rejects.toThrow('Request must be an instance of AIRequest');
      184 |       
      185 |       await expect(adapter.sendRequest(null))

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:182:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should handle network errors with retry

    expect(received).toBeInstanceOf(expected)

    Expected constructor: AIContent
    Received constructor: Object

      203 |       const result = await resultPromise;
      204 |       
    > 205 |       expect(result).toBeInstanceOf(AIContent);
          |                      ^
      206 |       expect(result.getText()).toBe('Success after retry');
      207 |       
      208 |       // Verify retry was attempted

      at toBeInstanceOf (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:205:22)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should not retry on client errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      221 |       });
      222 |       
    > 223 |       await expect(adapter.sendRequest(mockRequest))
          |             ^
      224 |         .rejects.toThrow('Invalid request to AI service');
      225 |       
      226 |       // Should only call once (no retry)

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:223:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › getStats › should return adapter statistics

    TypeError: adapter.getStats is not a function

      236 |       adapter._lastHealthCheck = true;
      237 |       
    > 238 |       const stats = adapter.getStats();
          |                             ^
      239 |       
      240 |       expect(stats).toEqual({
      241 |         baseUrl: 'https://api.example.com',

      at Object.getStats (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:238:29)

  ● HttpAIServiceAdapter › error transformation › should transform 401 errors

    TypeError: adapter._transformError is not a function

      255 |       error.response = { status: 401 };
      256 |       
    > 257 |       const transformed = adapter._transformError(error);
          |                                   ^
      258 |       expect(transformed.message).toBe('AI service authentication failed');
      259 |     });
      260 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:257:35)

  ● HttpAIServiceAdapter › error transformation › should transform 429 errors

    TypeError: adapter._transformError is not a function

      263 |       error.response = { status: 429 };
      264 |       
    > 265 |       const transformed = adapter._transformError(error);
          |                                   ^
      266 |       expect(transformed.message).toBe('AI service rate limit exceeded');
      267 |     });
      268 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:265:35)

  ● HttpAIServiceAdapter › error transformation › should transform timeout errors

    TypeError: adapter._transformError is not a function

      271 |       error.name = 'AbortError';
      272 |       
    > 273 |       const transformed = adapter._transformError(error);
          |                                   ^
      274 |       expect(transformed.message).toBe('AI service request timed out');
      275 |     });
      276 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:273:35)

  ● HttpAIServiceAdapter › error transformation › should return original error if cannot transform

    TypeError: adapter._transformError is not a function

      278 |       const error = new Error('Unknown error');
      279 |       
    > 280 |       const transformed = adapter._transformError(error);
          |                                   ^
      281 |       expect(transformed).toBe(error);
      282 |     });
      283 |   });

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:280:35)

2025-06-19 03:39:15 [31merror[39m: [ListCommand] Error: PersonalityApplicationService not available
2025-06-19 03:39:15 [31merror[39m: [ListCommand] Error listing personalities: Service error
2025-06-19 03:39:15 [31merror[39m: [ListCommand] Error: Service error
FAIL tests/unit/application/commands/personality/ListCommand.test.js
  ListCommand
    command metadata
      ✓ should have correct properties (4 ms)
      ✓ should have correct options (3 ms)
    execute
      ✕ should list personalities successfully with embed (6 ms)
      ✕ should list personalities successfully without embed support (3 ms)
      ✕ should handle pagination (3 ms)
      ✓ should handle slash command options (7 ms)
      ✕ should handle no personalities (3 ms)
      ✕ should handle invalid page number (2 ms)
      ✕ should handle non-numeric page argument (3 ms)
      ✕ should show pagination hint for multiple pages (2 ms)
      ✕ should handle missing personality service (9 ms)
      ✕ should handle service exceptions (4 ms)
      ✕ should handle single personality correctly (2 ms)
      ✕ should use default bot prefix when not provided (2 ms)
      ✕ should handle null page in slash command (7 ms)
      ✕ should parse page number as integer (3 ms)

  ● ListCommand › execute › should list personalities successfully with embed

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"author": {"icon_url": "https://example.com/user.png", "name": "TestUser"}, "color": 48340, "description": "You have added 3 personalities.", "fields": [{"inline": false, "name": "1. First Personality", "value": "Name: `personality1`
    Aliases: p1, first"}, {"inline": false, "name": "2. Second Personality", "value": "Name: `personality2`
    Aliases: None"}, {"inline": false, "name": "3. personality3", "value": "Name: `personality3`
    Aliases: p3"}], "footer": {"icon_url": "https://example.com/user.png", "text": "Page 1 of 1"}, "title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      100 |       expect(mockPersonalityService.listPersonalitiesByOwner).toHaveBeenCalledWith('123456789');
      101 |       
    > 102 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      103 |         expect.objectContaining({
      104 |           title: 'Your Personalities (Page 1/1)',
      105 |           description: 'You have added 3 personalities.',

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:102:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should list personalities successfully without embed support

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "**Your Personalities (Page 1/1)**
    You have added 3 personalities.·
    **1. First Personality**
       Name: `personality1`
       Aliases: p1, first·
    **2. Second Personality**
       Name: `personality2`
       Aliases: None·
    **3. personality3**
       Name: `personality3`
       Aliases: p3·
    "
    Received: {"embeds": [{"color": 2201331, "description": "Showing 3 of 3 personalities", "fields": [{"inline": false, "name": "1. First Personality", "value": "**Name:** `personality1`
    **Aliases:** p1, first"}, {"inline": false, "name": "2. Second Personality", "value": "**Name:** `personality2`
    **Aliases:** None"}, {"inline": false, "name": "3. personality3", "value": "**Name:** `personality3`
    **Aliases:** p3"}], "footer": {"text": "Page 1 of 1"}, "timestamp": "2025-06-19T07:39:15.312Z", "title": "📋 Your Personalities"}]}

    Number of calls: 1

      139 |       await command.execute(mockContext);
      140 |       
    > 141 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      142 |         '**Your Personalities (Page 1/1)**\n' +
      143 |         'You have added 3 personalities.\n\n' +
      144 |         '**1. First Personality**\n' +

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:141:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle pagination

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": StringContaining "You have added 15 personalities.", "fields": ArrayContaining [ObjectContaining {"name": "11. Personality 11"}, ObjectContaining {"name": "12. Personality 12"}, ObjectContaining {"name": "13. Personality 13"}, ObjectContaining {"name": "14. Personality 14"}, ObjectContaining {"name": "15. Personality 15"}], "footer": ObjectContaining {"text": "Page 2 of 2"}, "title": "Your Personalities (Page 2/2)"}

    Number of calls: 0

      169 |       await command.execute(mockContext);
      170 |       
    > 171 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      172 |         expect.objectContaining({
      173 |           title: 'Your Personalities (Page 2/2)',
      174 |           description: expect.stringContaining('You have added 15 personalities.'),

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:171:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle no personalities

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "You haven't added any personalities yet. Use `!tz add <personality-name>` to add one."
    Received: {"embeds": [{"color": 16750592, "description": "You haven't added any personalities.", "fields": [{"inline": false, "name": "Get Started", "value": "Use `!tz add <personality-name>` to create your first personality!"}, {"inline": false, "name": "Example", "value": "`!tz add Claude \"You are Claude, a helpful AI assistant\"`"}], "footer": {"text": "Personalities allow you to create custom AI assistants"}, "title": "📋 No Personalities Yet"}]}

    Number of calls: 1

      199 |       await command.execute(mockContext);
      200 |       
    > 201 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      202 |         "You haven't added any personalities yet. Use `!tz add <personality-name>` to add one."
      203 |       );
      204 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:201:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle invalid page number

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Invalid page number. Please specify a page between 1 and 1."
    Received: {"embeds": [{"color": 16007990, "description": "The page number you specified is out of range.", "fields": [{"inline": true, "name": "Valid Range", "value": "Pages 1 to 1"}, {"inline": true, "name": "You Entered", "value": "5"}, {"inline": true, "name": "Total Personalities", "value": "3"}], "title": "❌ Invalid Page Number"}]}

    Number of calls: 1

      209 |       await command.execute(mockContext);
      210 |       
    > 211 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      212 |         'Invalid page number. Please specify a page between 1 and 1.'
      213 |       );
      214 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:211:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle non-numeric page argument

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      220 |       
      221 |       // Should default to page 1
    > 222 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      223 |         expect.objectContaining({
      224 |           title: 'Your Personalities (Page 1/1)'
      225 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:222:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should show pagination hint for multiple pages

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": StringContaining "Use `!tz list <page>` to view other pages."}

    Number of calls: 0

      237 |       await command.execute(mockContext);
      238 |       
    > 239 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      240 |         expect.objectContaining({
      241 |           description: expect.stringContaining('Use `!tz list <page>` to view other pages.')
      242 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:239:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while listing personalities. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while listing personalities.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Use the command without a page number
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318755344"}, "timestamp": "2025-06-19T07:39:15.344Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      249 |       await command.execute(mockContext);
      250 |       
    > 251 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      252 |         '❌ An error occurred while listing personalities. ' +
      253 |         'Please try again later or contact support if the issue persists.'
      254 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:251:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle service exceptions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while listing personalities. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while listing personalities.", "fields": [{"inline": false, "name": "What happened", "value": "Service error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Use the command without a page number
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318755349"}, "timestamp": "2025-06-19T07:39:15.349Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      260 |       await command.execute(mockContext);
      261 |       
    > 262 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      263 |         '❌ An error occurred while listing personalities. ' +
      264 |         'Please try again later or contact support if the issue persists.'
      265 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:262:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle single personality correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": "You have added 1 personality."}

    Number of calls: 0

      276 |       await command.execute(mockContext);
      277 |       
    > 278 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      279 |         expect.objectContaining({
      280 |           description: 'You have added 1 personality.'
      281 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:278:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should use default bot prefix when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "`!tz add"
    Received: {"embeds": [{"color": 16750592, "description": "You haven't added any personalities.", "fields": [{"inline": false, "name": "Get Started", "value": "Use `!tz add <personality-name>` to create your first personality!"}, {"inline": false, "name": "Example", "value": "`!tz add Claude \"You are Claude, a helpful AI assistant\"`"}], "footer": {"text": "Personalities allow you to create custom AI assistants"}, "title": "📋 No Personalities Yet"}]}

    Number of calls: 1

      289 |       await command.execute(mockContext);
      290 |       
    > 291 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      292 |         expect.stringContaining('`!tz add')
      293 |       );
      294 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:291:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle null page in slash command

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      301 |       
      302 |       // Should default to page 1
    > 303 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      304 |         expect.objectContaining({
      305 |           title: 'Your Personalities (Page 1/1)'
      306 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:303:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should parse page number as integer

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      314 |       
      315 |       // Should parse to 1
    > 316 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      317 |         expect.objectContaining({
      318 |           title: 'Your Personalities (Page 1/1)'
      319 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:316:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

FAIL tests/unit/application/commands/authentication/VerifyCommand.test.js
  VerifyCommand
    metadata
      ✓ should have correct command metadata (3 ms)
    DM channel handling
      ✕ should explain verification requirements when run in DM (3 ms)
    already verified users
      ✕ should inform already verified users (7 ms)
    NSFW channel verification
      ✕ should verify user in NSFW channel (2 ms)
      ✕ should handle verification storage failure (2 ms)
    NSFW channel access check
      ✕ should verify user with access to other NSFW channels (3 ms)
      ✕ should deny verification when no NSFW channels accessible (3 ms)
      ✕ should handle missing guild information (3 ms)
      ✕ should handle channel permission check errors (2 ms)
    storage verification
      ✕ should handle verification storage error in NSFW channel list (2 ms)
    error handling
      ✕ should handle unexpected errors gracefully (3 ms)
      ✕ should handle missing original message (2 ms)
    channel accessibility
      ✕ should only count channels user can view (2 ms)
      ✕ should only check text-based channels (6 ms)

  ● VerifyCommand › DM channel handling › should explain verification requirements when run in DM

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:79:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › already verified users › should inform already verified users

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:97:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel verification › should verify user in NSFW channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:116:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel verification › should handle verification storage failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:134:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should verify user with access to other NSFW channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:175:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should deny verification when no NSFW channels accessible

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:207:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should handle missing guild information

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:224:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should handle channel permission check errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:249:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › storage verification › should handle verification storage error in NSFW channel list

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:277:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › error handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:297:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › error handling › should handle missing original message

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:314:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › channel accessibility › should only count channels user can view

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:346:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › channel accessibility › should only check text-based channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:389:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Cannot read properties of undefined (reading 'name')
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error getting personality info: Database error
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: Database error
2025-06-19 03:39:15 [31merror[39m: [InfoCommand] Error: PersonalityApplicationService not available
FAIL tests/unit/application/commands/personality/InfoCommand.test.js
  InfoCommand
    command metadata
      ✓ should have correct properties (5 ms)
      ✓ should have correct options (2 ms)
    execute
      ✕ should display personality info successfully (17 ms)
      ✕ should show new system indicator when feature flag enabled (11 ms)
      ✓ should handle missing personality name (2 ms)
      ✓ should handle slash command format (6 ms)
      ✓ should handle personality not found (2 ms)
      ✕ should handle personality without aliases (4 ms)
      ✕ should handle personality without display name (5 ms)
      ✓ should handle general errors (7 ms)
      ✓ should handle missing personality service (7 ms)

  ● InfoCommand › execute › should display personality info successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"color": 2201331, "description": StringContaining "Test Personality", "fields": ArrayContaining [ObjectContaining {"name": "Full Name", "value": "testpersonality"}, ObjectContaining {"name": "Display Name", "value": "Test Personality"}, ObjectContaining {"name": "Aliases", "value": "test, testy"}, ObjectContaining {"name": "Created By", "value": "<@123456789>"}], "thumbnail": {"url": "https://example.com/avatar.png"}, "title": "Personality Info"}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      76 |       expect(mockPersonalityService.getPersonality).toHaveBeenCalledWith('testpersonality');
      77 |       
    > 78 |       expect(mockContext.respond).toHaveBeenCalledWith(
         |                                   ^
      79 |         expect.objectContaining({
      80 |           embeds: expect.arrayContaining([
      81 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:78:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should show new system indicator when feature flag enabled

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"fields": ArrayContaining [ObjectContaining {"name": "System", "value": "🆕 Using new DDD system"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      101 |       await command.execute(mockContext);
      102 |       
    > 103 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      104 |         expect.objectContaining({
      105 |           embeds: expect.arrayContaining([
      106 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:103:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should handle personality without aliases

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"fields": ArrayContaining [ObjectContaining {"name": "Aliases", "value": "None set"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      157 |       await command.execute(mockContext);
      158 |       
    > 159 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      160 |         expect.objectContaining({
      161 |           embeds: expect.arrayContaining([
      162 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:159:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should handle personality without display name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"description": StringContaining "nodisplay", "fields": ArrayContaining [ObjectContaining {"name": "Display Name", "value": "Not set"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      180 |       await command.execute(mockContext);
      181 |       
    > 182 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      183 |         expect.objectContaining({
      184 |           embeds: expect.arrayContaining([
      185 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:182:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

FAIL tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js
  HttpAIServiceAdapter - Deduplication
    deduplication behavior
      ✕ should check for blackout before processing (4 ms)
      ✕ should return cached promise for duplicate request (3 ms)
      ✕ should track new requests to prevent duplicates (2 ms)
      ✕ should add to blackout on rate limit error (4 ms)
      ✕ should add to blackout on service error (3 ms)
      ✕ should not add to blackout on client errors (3 ms)
      ✕ should handle missing personality gracefully (4 ms)
      ✕ should handle missing user ID gracefully (3 ms)
    statistics
      ✕ should include deduplication stats (2 ms)
    cleanup
      ✕ should stop deduplicator on cleanup (2 ms)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should check for blackout before processing

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      80 |       mockDeduplicator.isInBlackout.mockReturnValue(true);
      81 |       
    > 82 |       await expect(adapter.sendRequest(request))
         |             ^
      83 |         .rejects.toThrow('Request blocked due to recent errors');
      84 |       
      85 |       expect(mockDeduplicator.isInBlackout).toHaveBeenCalledWith('TestBot', '123456789012345678');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:82:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should return cached promise for duplicate request

    TypeError: result.getText is not a function

      93 |       const result = await adapter.sendRequest(request);
      94 |       
    > 95 |       expect(result.getText()).toBe('Cached response');
         |                     ^
      96 |       expect(mockDeduplicator.getPendingRequest).toHaveBeenCalled();
      97 |       expect(fetch).not.toHaveBeenCalled();
      98 |       expect(logger.info).toHaveBeenCalledWith(

      at getText (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:95:21)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should track new requests to prevent duplicates

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Anything, Any<Promise>

    Number of calls: 0

      104 |       await adapter.sendRequest(request);
      105 |       
    > 106 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalledWith(
          |                                                    ^
      107 |         expect.anything(),
      108 |         expect.any(Promise)
      109 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:106:52)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should add to blackout on rate limit error

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      119 |       });
      120 |       
    > 121 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      122 |       
      123 |       // The promise catch handler should have been called synchronously
      124 |       // since we're using mockDeduplicator.trackPendingRequest

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:121:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should add to blackout on service error

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      148 |       });
      149 |       
    > 150 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      151 |       
      152 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalled();
      153 |       const trackedPromise = mockDeduplicator.trackPendingRequest.mock.calls[0][1];

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:150:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should not add to blackout on client errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      171 |       });
      172 |       
    > 173 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      174 |       
      175 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalled();
      176 |       const trackedPromise = mockDeduplicator.trackPendingRequest.mock.calls[0][1];

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:173:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should handle missing personality gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"channelId": "987654321098765432", "content": "Hello AI", "personalityName": "default", "userId": "123456789012345678"}

    Number of calls: 0

      190 |       await adapter.sendRequest(request);
      191 |       
    > 192 |       expect(mockDeduplicator.createSignature).toHaveBeenCalledWith({
          |                                                ^
      193 |         personalityName: 'default',
      194 |         userId: '123456789012345678',
      195 |         channelId: '987654321098765432',

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:192:48)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should handle missing user ID gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"channelId": "987654321098765432", "content": "Hello AI", "personalityName": "TestBot", "userId": "system"}

    Number of calls: 0

      203 |       await adapter.sendRequest(request);
      204 |       
    > 205 |       expect(mockDeduplicator.createSignature).toHaveBeenCalledWith({
          |                                                ^
      206 |         personalityName: 'TestBot',
      207 |         userId: 'system',
      208 |         channelId: '987654321098765432',

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:205:48)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › statistics › should include deduplication stats

    TypeError: adapter.getStats is not a function

      220 |       });
      221 |       
    > 222 |       const stats = adapter.getStats();
          |                             ^
      223 |       
      224 |       expect(stats.deduplication).toEqual({
      225 |         pendingRequests: 5,

      at Object.getStats (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:222:29)

  ● HttpAIServiceAdapter - Deduplication › cleanup › should stop deduplicator on cleanup

    TypeError: adapter.cleanup is not a function

      232 |   describe('cleanup', () => {
      233 |     it('should stop deduplicator on cleanup', async () => {
    > 234 |       await adapter.cleanup();
          |                     ^
      235 |       
      236 |       expect(mockDeduplicator.stop).toHaveBeenCalled();
      237 |       expect(logger.info).toHaveBeenCalledWith('[HttpAIServiceAdapter] Cleaning up resources');

      at cleanup (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:234:21)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

FAIL tests/unit/application/commands/conversation/ActivateCommand.test.js
  ActivateCommand
    command metadata
      ✓ should have correct metadata (2 ms)
    execute
      ✕ should activate a personality by name (7 ms)
      ✕ should activate a personality by alias (2 ms)
      ✕ should handle multi-word personality names (2 ms)
      ✕ should use options.personality if provided (2 ms)
      ✕ should reject in DM channels (2 ms)
      ✕ should reject without Manage Messages permission (3 ms)
      ✕ should reject in non-NSFW channels (2 ms)
      ✕ should handle missing personality name (2 ms)
      ✕ should handle non-existent personality (2 ms)
      ✕ should handle personality service errors (2 ms)
      ✕ should handle activation errors (7 ms)
      ✕ should handle unexpected errors gracefully (2 ms)
      ✕ should not include thumbnail if profileUrl is missing (2 ms)
      ✕ should include thumbnail if profileUrl exists (1 ms)

  ● ActivateCommand › execute › should activate a personality by name

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:89:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should activate a personality by alias

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:124:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle multi-word personality names

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:145:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should use options.personality if provided

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:165:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject in DM channels

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:176:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject without Manage Messages permission

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:191:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject in non-NSFW channels

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:207:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle missing personality name

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:223:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle non-existent personality

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:241:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle personality service errors

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:258:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle activation errors

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:279:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:299:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should not include thumbnail if profileUrl is missing

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:322:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should include thumbnail if profileUrl exists

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:340:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

FAIL tests/unit/domain/ai/AIRequestDeduplicator.test.js
  AIRequestDeduplicator
    constructor
      ✓ should require timer functions (25 ms)
      ✓ should initialize with default configuration (2 ms)
      ✓ should accept custom configuration (2 ms)
      ✓ should schedule cleanup on initialization (6 ms)
    checkDuplicate
      ✓ should return null for new requests (3 ms)
      ✕ should return existing promise for duplicate requests (4 ms)
      ✓ should throw error for requests in blackout period (3 ms)
      ✕ should be case-insensitive for personality names (2 ms)
      ✕ should consider context in deduplication (3 ms)
    registerPending
      ✓ should register a pending request (3 ms)
      ✓ should clean up after promise resolves (3 ms)
      ✕ should add to blackout on promise rejection (3 ms)
    markFailed
      ✓ should add request to blackout (2 ms)
    cleanup
      ✓ should remove stale pending requests (2 ms)
      ✓ should remove expired blackouts (6 ms)
    getStats
      ✓ should return current statistics (3 ms)
    clear
      ✓ should clear all state (2 ms)

  ● AIRequestDeduplicator › checkDuplicate › should return existing promise for duplicate requests

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 95553, Symbol(trigger_async_id_symbol): 95540}
    Received: "response"

      72 |       
      73 |       const result = await deduplicator.checkDuplicate('TestBot', 'Hello');
    > 74 |       expect(result).toBe(promise);
         |                      ^
      75 |     });
      76 |     
      77 |     it('should throw error for requests in blackout period', async () => {

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:74:22)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › checkDuplicate › should be case-insensitive for personality names

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 96101, Symbol(trigger_async_id_symbol): 96088}
    Received: "response"

      88 |       
      89 |       const result = await deduplicator.checkDuplicate('testbot', 'Hello');
    > 90 |       expect(result).toBe(promise);
         |                      ^
      91 |     });
      92 |     
      93 |     it('should consider context in deduplication', async () => {

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:90:22)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › checkDuplicate › should consider context in deduplication

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 96378, Symbol(trigger_async_id_symbol): 96365}
    Received: "response1"

      101 |       const result2 = await deduplicator.checkDuplicate('TestBot', 'Hello', { userAuth: 'user2' });
      102 |       
    > 103 |       expect(result1).toBe(promise1);
          |                       ^
      104 |       expect(result2).toBe(promise2);
      105 |     });
      106 |   });

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:103:23)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › registerPending › should add to blackout on promise rejection

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      142 |       await Promise.resolve();
      143 |       
    > 144 |       expect(deduplicator.errorBlackouts.size).toBe(1);
          |                                                ^
      145 |     });
      146 |   });
      147 |   

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:144:48)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

FAIL tests/unit/application/commands/personality/AddCommand.test.js
  AddCommand
    command definition
      ✓ should have correct metadata (4 ms)
      ✓ should have correct options (5 ms)
    text command execution
      ✕ should show usage when no arguments provided (3 ms)
      ✕ should create personality with name only (3 ms)
      ✕ should create personality with custom prompt (4 ms)
      ✓ should handle quoted prompts (3 ms)
      ✓ should handle single quoted prompts (2 ms)
      ✕ should create personality with alias only (3 ms)
      ✕ should create personality with alias and prompt (2 ms)
      ✓ should create personality with alias and quoted prompt (2 ms)
      ✕ should validate alias format (4 ms)
    slash command execution
      ✓ should create personality with all options (2 ms)
      ✓ should use defaults for missing options (2 ms)
      ✕ should create personality with alias option (5 ms)
    validation
      ✕ should reject short names (2 ms)
      ✕ should reject long names (2 ms)
    error handling
      ✕ should handle service not available (2 ms)
      ✕ should handle already exists error (2 ms)
      ✕ should handle authentication error (2 ms)
      ✕ should handle service failure (2 ms)
      ✕ should handle generic errors (2 ms)
    logging
      ✓ should log command execution (3 ms)

  ● AddCommand › text command execution › should show usage when no arguments provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Usage: `!tz add <name> [alias] [prompt]`",
    + {"embeds": [{"color": 2201331, "description": "Create a new AI personality for your Discord server.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz add <name> [alias] [prompt]`"}, {"inline": false, "name": "Examples", "value": "• `!tz add Claude` - Creates Claude with default prompt
    • `!tz add Claude claude-alias` - Creates Claude with an alias
    • `!tz add Claude \"You are Claude, a helpful AI assistant\"` - Custom prompt
    • `!tz add Claude claude-alias \"You are Claude, a helpful AI assistant\"` - Alias + prompt"}, {"inline": false, "name": "Parameters", "value": "• **name** (required): The personality's name
    • **alias** (optional): A shortcut name
    • **prompt** (optional): Custom personality instructions"}], "footer": {"text": "Pro tip: Aliases make it easier to mention personalities"}, "title": "How to Add a Personality"}]},
      {},

    Number of calls: 1

      111 |       await command.execute(mockContext);
      112 |
    > 113 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      114 |         expect.stringContaining('Usage: `!tz add <name> [alias] [prompt]`'),
      115 |         {}
      116 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:113:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with name only

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "✅ Successfully created personality **TestBot**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.188Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      132 |         aliases: []
      133 |       });
    > 134 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      135 |         expect.stringContaining('✅ Successfully created personality **TestBot**'),
      136 |         {}
      137 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:134:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with custom prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Prompt: \"You are a helpful assistant\"",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **Claude** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": false, "name": "Prompt", "value": "You are a helpful assistant"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@Claude** in a channel to start chatting
    • Use `!tz alias Claude <new-alias>` to add more aliases
    • Use `!tz info Claude` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.192Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      152 |         aliases: []
      153 |       });
    > 154 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      155 |         expect.stringContaining('Prompt: "You are a helpful assistant"'),
      156 |         {}
      157 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:154:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with alias only

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.201Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      201 |         aliases: ['tb']
      202 |       });
    > 203 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      204 |         expect.stringContaining('Alias: **tb**'),
      205 |         {}
      206 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:203:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with alias and prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are a test bot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.203Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      224 |         aliases: ['tb']
      225 |       });
    > 226 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      227 |         expect.stringContaining('Alias: **tb**'),
      228 |         {}
      229 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:226:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should validate alias format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Aliases can only contain letters, numbers, underscores, and hyphens.",
    + {"embeds": [{"color": 16007990, "description": "Aliases can only contain letters, numbers, underscores, and hyphens.", "fields": [{"inline": false, "name": "Valid characters", "value": "• Letters (a-z, A-Z)
    • Numbers (0-9)
    • Underscores (_)
    • Hyphens (-)"}, {"inline": false, "name": "Examples", "value": "✅ `claude-ai`
    ✅ `helper_bot`
    ✅ `AI2024`
    ❌ `claude.ai`
    ❌ `helper bot`
    ❌ `AI@2024`"}], "title": "❌ Invalid Alias Format"}]},
      {},

    Number of calls: 1

      254 |       await command.execute(mockContext);
      255 |
    > 256 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      257 |         'Aliases can only contain letters, numbers, underscores, and hyphens.',
      258 |         {}
      259 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:256:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › slash command execution › should create personality with alias option

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.220Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      327 |         aliases: ['tb']
      328 |       });
    > 329 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      330 |         expect.stringContaining('Alias: **tb**'),
      331 |         {}
      332 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:329:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › validation › should reject short names

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Personality name must be at least 2 characters long.",
    + {"embeds": [{"color": 16007990, "description": "Personality name must be at least 2 characters long.", "fields": [{"inline": false, "name": "Requirements", "value": "• Minimum 2 characters
    • Maximum 50 characters
    • Can include letters, numbers, spaces"}], "title": "❌ Invalid Name"}]},
      {},

    Number of calls: 1

      341 |       await command.execute(mockContext);
      342 |
    > 343 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      344 |         'Personality name must be at least 2 characters long.',
      345 |         {}
      346 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:343:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › validation › should reject long names

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Personality name must be 50 characters or less.",
    + {"embeds": [{"color": 16007990, "description": "Personality name must be 50 characters or less.", "fields": [{"inline": true, "name": "Current length", "value": "51 characters"}, {"inline": true, "name": "Maximum allowed", "value": "50 characters"}], "title": "❌ Name Too Long"}]},
      {},

    Number of calls: 1

      354 |       await command.execute(mockContext);
      355 |
    > 356 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      357 |         'Personality name must be 50 characters or less.',
      358 |         {}
      359 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:356:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle service not available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred while creating the personality",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756229"}, "timestamp": "2025-06-19T07:39:16.229Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      369 |       await command.execute(mockContext);
      370 |
    > 371 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      372 |         expect.stringContaining('An error occurred while creating the personality'),
      373 |         {}
      374 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:371:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle already exists error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "already exists",
    + {"embeds": [{"color": 16007990, "description": "A personality named **TestBot** already exists.", "fields": [{"inline": false, "name": "What to do", "value": "• Choose a different name for your personality
    • Use `!tz remove TestBot` to delete the existing one first
    • Use `!tz info TestBot` to see who owns it"}], "footer": {"text": "Each personality must have a unique name"}, "title": "❌ Personality Already Exists"}]},
      {},

    Number of calls: 1

      387 |       await command.execute(mockContext);
      388 |
    > 389 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      390 |         expect.stringContaining('already exists'),
      391 |         {}
      392 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:389:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle authentication error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Authentication failed",
    + {"embeds": [{"color": 16750592, "description": "You need to authenticate before creating personalities.", "fields": [{"inline": false, "name": "How to authenticate", "value": "1. Use `!tz auth` to start authentication
    2. Follow the instructions in the DM
    3. Try creating your personality again"}], "footer": {"text": "Authentication ensures secure personality management"}, "title": "❌ Authentication Required"}]},
      {},

    Number of calls: 1

      401 |       await command.execute(mockContext);
      402 |
    > 403 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      404 |         expect.stringContaining('Authentication failed'),
      405 |         {}
      406 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:403:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle service failure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Service unavailable"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756236"}, "timestamp": "2025-06-19T07:39:16.236Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      415 |       await command.execute(mockContext);
      416 |
    > 417 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      418 |         expect.stringContaining('An error occurred'),
      419 |         {}
      420 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:417:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle generic errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred while creating the personality",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Unknown error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756238"}, "timestamp": "2025-06-19T07:39:16.238Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      433 |       await command.execute(mockContext);
      434 |
    > 435 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      436 |         expect.stringContaining('An error occurred while creating the personality'),
      437 |         {}
      438 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:435:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

2025-06-19 03:39:16 [31merror[39m: [RemoveCommand] Exception during removal: Database error
2025-06-19 03:39:16 [31merror[39m: [RemoveCommand] Error: Database error
2025-06-19 03:39:16 [31merror[39m: [RemoveCommand] Error: PersonalityApplicationService not available
FAIL tests/unit/application/commands/personality/RemoveCommand.test.js
  RemoveCommand
    command metadata
      ✓ should have correct properties (4 ms)
      ✓ should have correct options (7 ms)
    execute
      ✕ should remove personality successfully (5 ms)
      ✕ should handle missing personality name (3 ms)
      ✓ should handle slash command format (3 ms)
      ✕ should handle personality not found error (2 ms)
      ✕ should handle permission error (3 ms)
      ✕ should handle authentication error (3 ms)
      ✕ should handle general errors (6 ms)
      ✕ should handle missing personality service (13 ms)
      ✓ should clear cache for both alias and actual name when different (3 ms)

  ● RemoveCommand › execute › should remove personality successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": StringContaining "✅ **Test Personality** has been removed", "embeds": ArrayContaining [ObjectContaining {"color": 16007990, "title": "Personality Removed"}]}
    Received: {"embeds": [{"color": 16007990, "description": "**Test Personality** has been removed from your collection.", "fields": [{"inline": true, "name": "Removed Personality", "value": "Test Personality"}, {"inline": false, "name": "What Now?", "value": "• You can recreate this personality with the same name
    • Use `list` to see your remaining personalities
    • The personality's conversation history has been preserved"}], "footer": {"text": "This action cannot be undone"}, "timestamp": "2025-06-19T07:39:16.333Z", "title": "✅ Personality Removed Successfully"}]}

    Number of calls: 1

       98 |       expect(mockMessageTracker.removeCompletedAddCommand).toHaveBeenCalledWith('123456789', 'testpersonality');
       99 |       
    > 100 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      101 |         expect.objectContaining({
      102 |           content: expect.stringContaining('✅ **Test Personality** has been removed'),
      103 |           embeds: expect.arrayContaining([

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:100:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle missing personality name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "You need to provide a personality name"
    Received: {"embeds": [{"color": 2201331, "description": "Remove a personality from your collection.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz remove <name>`"}, {"inline": false, "name": "Examples", "value": "• `!tz remove Claude` - Remove by name
    • `!tz remove cl` - Remove by alias
    • `!tz remove \"My Assistant\"` - Remove with spaces"}, {"inline": false, "name": "Important", "value": "⚠️ You can only remove personalities you created
    ⚠️ This action cannot be undone"}], "footer": {"text": "Removed personalities can be recreated with the same name"}, "title": "How to Remove a Personality"}]}

    Number of calls: 1

      117 |       await command.execute(mockContext);
      118 |       
    > 119 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      120 |         expect.stringContaining('You need to provide a personality name')
      121 |       );
      122 |       expect(mockPersonalityService.removePersonality).not.toHaveBeenCalled();

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:119:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle personality not found error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "not found"
    Received: {"embeds": [{"color": 16007990, "description": "No personality found with the name or alias \"testpersonality\".", "fields": [{"inline": false, "name": "What to check", "value": "• Spelling of the personality name
    • Try using the full name instead of alias
    • Use `list` command to see your personalities"}], "footer": {"text": "Personality names are case-insensitive"}, "title": "❌ Personality Not Found"}]}

    Number of calls: 1

      141 |       await command.execute(mockContext);
      142 |       
    > 143 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      144 |         expect.stringContaining('not found')
      145 |       );
      146 |       expect(mockPersonalityService.removePersonality).not.toHaveBeenCalled();

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:143:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle permission error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "cannot remove a personality that you didn't create"
    Received: {"embeds": [{"color": 16007990, "description": "You cannot remove a personality that you didn't create.", "fields": [{"inline": false, "name": "Why this happened", "value": "• You are not the owner of this personality
    • Only the creator can remove a personality"}, {"inline": false, "name": "What you can do", "value": "• Use `list` to see personalities you own
    • Ask the owner to remove it
    • Create your own version with a different name"}], "title": "❌ Permission Denied"}]}

    Number of calls: 1

      154 |       await command.execute(mockContext);
      155 |       
    > 156 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      157 |         expect.stringContaining('cannot remove a personality that you didn\'t create')
      158 |       );
      159 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:156:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle authentication error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Authentication failed"
    Received: {"embeds": [{"color": 16750592, "description": "You need to authenticate before removing personalities.", "fields": [{"inline": false, "name": "How to authenticate", "value": "1. Use `!tz auth` to start authentication
    2. Follow the instructions in the DM
    3. Try removing the personality again"}], "footer": {"text": "Authentication ensures secure personality management"}, "title": "❌ Authentication Required"}]}

    Number of calls: 1

      166 |       await command.execute(mockContext);
      167 |       
    > 168 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      169 |         expect.stringContaining('Authentication failed')
      170 |       );
      171 |       expect(mockContext.respond).toHaveBeenCalledWith(

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:168:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle general errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "An error occurred"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while removing the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Database error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check the personality name
    • Verify you own the personality
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756365"}, "timestamp": "2025-06-19T07:39:16.365Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      181 |       await command.execute(mockContext);
      182 |       
    > 183 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      184 |         expect.stringContaining('An error occurred')
      185 |       );
      186 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:183:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "An error occurred"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while removing the personality.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check the personality name
    • Verify you own the personality
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756379"}, "timestamp": "2025-06-19T07:39:16.380Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      191 |       await command.execute(mockContext);
      192 |       
    > 193 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      194 |         expect.stringContaining('An error occurred')
      195 |       );
      196 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:193:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

FAIL tests/unit/webhookManager.avatar.test.js
  WebhookManager Avatar URL Handling
    Basic Avatar URL Validation
      ✕ should return false for null or empty URLs (4 ms)
      ✕ should return false for invalid URL formats (2 ms)
      ✕ should handle non-200 responses (2 ms)
      ✕ should return false for non-image content types (2 ms)
      ✕ should handle network errors gracefully (3 ms)
    getValidAvatarUrl function
      ✕ should return null for null or empty URLs (2 ms)
      ✕ should return original URL when validation passes (3 ms)
      ✕ should handle validation failures (2 ms)
    warmupAvatarUrl function
      ✕ should return null for null URLs (2 ms)
      ✕ should return URL from cache if already warmed up (6 ms)
      ✕ should handle valid URLs (2 ms)
      ✕ should handle warmup failures gracefully (2 ms)
      ✕ should handle non-stream response bodies correctly (3 ms)
      ✕ should handle response with only text method available (2 ms)
      ✕ should handle response with no read methods available (3 ms)
    preloadPersonalityAvatar function
      ✕ should set null for personalities without avatar URL (3 ms)
      ✕ should validate and update invalid avatar URLs (2 ms)
      ✕ should handle null personality gracefully (2 ms)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for null or empty URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      86 |   describe('Basic Avatar URL Validation', () => {
      87 |     test('should return false for null or empty URLs', async () => {
    > 88 |       expect(await webhookManager.validateAvatarUrl(null)).toBe(false);
         |                                   ^
      89 |       expect(await webhookManager.validateAvatarUrl('')).toBe(false);
      90 |       expect(await webhookManager.validateAvatarUrl(undefined)).toBe(false);
      91 |     });

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:88:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for invalid URL formats

    TypeError: webhookManager.validateAvatarUrl is not a function

      92 |     
      93 |     test('should return false for invalid URL formats', async () => {
    > 94 |       expect(await webhookManager.validateAvatarUrl('not-a-url')).toBe(false);
         |                                   ^
      95 |     });
      96 |     
      97 |     test('should handle non-200 responses', async () => {

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:94:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should handle non-200 responses

    TypeError: webhookManager.validateAvatarUrl is not a function

      112 |         // In the updated code, we treat image extensions specially in the test for CDN compatibility
      113 |         // When running in tests, all we care about is that the function completes without errors
    > 114 |         await webhookManager.validateAvatarUrl('https://example.com/notfound.png');
          |                              ^
      115 |       } finally {
      116 |         // Restore original NODE_ENV
      117 |         process.env.NODE_ENV = origNodeEnv;

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:114:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for non-image content types

    TypeError: webhookManager.validateAvatarUrl is not a function

      129 |       }));
      130 |       
    > 131 |       expect(await webhookManager.validateAvatarUrl('https://example.com/page.html')).toBe(false);
          |                                   ^
      132 |     });
      133 |     
      134 |     test('should handle network errors gracefully', async () => {

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:131:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should handle network errors gracefully

    TypeError: webhookManager.validateAvatarUrl is not a function

      141 |       try {
      142 |         // Just check that it completes without throwing
    > 143 |         await webhookManager.validateAvatarUrl('https://example.com/error.png');
          |                              ^
      144 |       } finally {
      145 |         // Restore original NODE_ENV
      146 |         process.env.NODE_ENV = origNodeEnv;

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:143:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should return null for null or empty URLs

    TypeError: webhookManager.getValidAvatarUrl is not a function

      151 |   describe('getValidAvatarUrl function', () => {
      152 |     test('should return null for null or empty URLs', async () => {
    > 153 |       expect(await webhookManager.getValidAvatarUrl(null)).toBe(null);
          |                                   ^
      154 |       expect(await webhookManager.getValidAvatarUrl('')).toBe(null);
      155 |       expect(await webhookManager.getValidAvatarUrl(undefined)).toBe(null);
      156 |     });

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:153:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should return original URL when validation passes

    TypeError: webhookManager.getValidAvatarUrl is not a function

      162 |       
      163 |       try {
    > 164 |         const result = await webhookManager.getValidAvatarUrl(validUrl);
          |                                             ^
      165 |         expect(result).toBe(validUrl);
      166 |       } finally {
      167 |         // Restore original function

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:164:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should handle validation failures

    TypeError: webhookManager.getValidAvatarUrl is not a function

      177 |       try {
      178 |         // Just verify it completes - the exact return value may change based on our implementation
    > 179 |         await webhookManager.getValidAvatarUrl(validUrl);
          |                              ^
      180 |       } finally {
      181 |         // Restore original function
      182 |         webhookManager.validateAvatarUrl = original;

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:179:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should return null for null URLs

    TypeError: webhookManager.warmupAvatarUrl is not a function

      187 |   describe('warmupAvatarUrl function', () => {
      188 |     test('should return null for null URLs', async () => {
    > 189 |       expect(await webhookManager.warmupAvatarUrl(null)).toBe(null);
          |                                   ^
      190 |     });
      191 |     
      192 |     test('should return URL from cache if already warmed up', async () => {

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:189:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should return URL from cache if already warmed up

    TypeError: webhookManager.warmupAvatarUrl is not a function

      195 |       
      196 |       // Should return from cache without calling fetch
    > 197 |       const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                           ^
      198 |       
      199 |       expect(result).toBe(validUrl);
      200 |       expect(nodeFetch).not.toHaveBeenCalled();

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:197:43)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle valid URLs

    TypeError: webhookManager.warmupAvatarUrl is not a function

      208 |       try {
      209 |         // Just verify it completes - the exact behavior may change
    > 210 |         await webhookManager.warmupAvatarUrl(validUrl);
          |                              ^
      211 |       } finally {
      212 |         // Restore original function
      213 |         webhookManager.getValidAvatarUrl = originalGetValidAvatarUrl;

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:210:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle warmup failures gracefully

    TypeError: webhookManager.warmupAvatarUrl is not a function

      225 |       try {
      226 |         // Just verify it completes without throwing
    > 227 |         await webhookManager.warmupAvatarUrl(validUrl);
          |                              ^
      228 |       } finally {
      229 |         // Restore original function
      230 |         webhookManager.getValidAvatarUrl = originalGetValidAvatarUrl;

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:227:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle non-stream response bodies correctly

    TypeError: webhookManager.warmupAvatarUrl is not a function

      254 |       try {
      255 |         // Should complete successfully using arrayBuffer fallback
    > 256 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      257 |         expect(result).toBe(validUrl);
      258 |       } finally {
      259 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:256:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle response with only text method available

    TypeError: webhookManager.warmupAvatarUrl is not a function

      284 |       try {
      285 |         // Should complete successfully using text fallback
    > 286 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      287 |         expect(result).toBe(validUrl);
      288 |       } finally {
      289 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:286:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle response with no read methods available

    TypeError: webhookManager.warmupAvatarUrl is not a function

      313 |       try {
      314 |         // Should still complete successfully using status code
    > 315 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      316 |         expect(result).toBe(validUrl);
      317 |       } finally {
      318 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:315:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should set null for personalities without avatar URL

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      331 |       
      332 |       // Call the function
    > 333 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      334 |       
      335 |       // Should set null
      336 |       expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:333:28)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should validate and update invalid avatar URLs

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      349 |       
      350 |       // Call the function
    > 351 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      352 |       
      353 |       // Should update to null when warmup fails
      354 |       expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:351:28)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should handle null personality gracefully

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      356 |     
      357 |     test('should handle null personality gracefully', async () => {
    > 358 |       await expect(webhookManager.preloadPersonalityAvatar(null)).resolves.not.toThrow();
          |                                   ^
      359 |     });
      360 |   });
      361 | });

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:358:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

FAIL tests/unit/webhookManager.exports.test.js
  WebhookManager - Exported Functions
    getStandardizedUsername
      ✕ should prioritize displayName if available (3 ms)
      ✕ should truncate display names longer than 32 characters (2 ms)
      ✕ should extract name from fullName if displayName is not available (2 ms)
      ✕ should use fullName if it has no hyphens and is short enough (4 ms)
      ✕ should return "Bot" for null or undefined personality (2 ms)
    hashMessage and isDuplicateMessage
      ✕ should create a consistent hash for a message (5 ms)
      ✕ should detect duplicate messages (2 ms)
      ✕ should not detect different messages as duplicates (1 ms)
      ✕ should not flag empty content as duplicate (2 ms)
    Pending message functions
      ✕ should create a consistent key format for personality-channel combinations (2 ms)
      ✕ should register and detect pending messages (1 ms)
      ✕ should timeout pending messages after the error wait time (2 ms)
    Message timing functions
      ✕ should calculate delay needed for proper message ordering (2 ms)
    Webhook cache functions
      ✕ should have clearWebhookCache and clearAllWebhookCaches functions exported (3 ms)
    preloadPersonalityAvatar
      ✕ should be an exported function that handles avatars (3 ms)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      93 |       };
      94 |       
    > 95 |       const result = webhookManager.getStandardizedUsername(personality);
         |                                     ^
      96 |       expect(result).toBe('Test Display Name');
      97 |     });
      98 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:95:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should truncate display names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      102 |       };
      103 |       
    > 104 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      105 |       expect(result.length).toBeLessThanOrEqual(32);
      106 |       expect(result).toContain('...');
      107 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:104:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should extract name from fullName if displayName is not available

    TypeError: webhookManager.getStandardizedUsername is not a function

      112 |       };
      113 |       
    > 114 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      115 |       // Should capitalize the first part of the hyphenated name
      116 |       expect(result).toBe('Test');
      117 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:114:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should use fullName if it has no hyphens and is short enough

    TypeError: webhookManager.getStandardizedUsername is not a function

      122 |       };
      123 |       
    > 124 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      125 |       // Should capitalize the first letter
      126 |       expect(result).toBe('Shortname');
      127 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:124:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      128 |     
      129 |     it('should return "Bot" for null or undefined personality', () => {
    > 130 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      131 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      132 |     });
      133 |   });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:130:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should create a consistent hash for a message

    TypeError: webhookManager.hashMessage is not a function

      139 |       const channelId = 'channel-123';
      140 |       
    > 141 |       const hash1 = webhookManager.hashMessage(content, username, channelId);
          |                                    ^
      142 |       const hash2 = webhookManager.hashMessage(content, username, channelId);
      143 |       
      144 |       // Same inputs should produce the same hash

      at Object.hashMessage (tests/unit/webhookManager.exports.test.js:141:36)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should detect duplicate messages

    TypeError: webhookManager.isDuplicateMessage is not a function

      156 |       
      157 |       // First message should not be a duplicate
    > 158 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(false);
          |                             ^
      159 |       
      160 |       // Second identical message should be detected as a duplicate
      161 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(true);

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:158:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should not detect different messages as duplicates

    TypeError: webhookManager.isDuplicateMessage is not a function

      167 |       
      168 |       // First message
    > 169 |       expect(webhookManager.isDuplicateMessage('First message', username, channelId)).toBe(false);
          |                             ^
      170 |       
      171 |       // Different content
      172 |       expect(webhookManager.isDuplicateMessage('Second message', username, channelId)).toBe(false);

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:169:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should not flag empty content as duplicate

    TypeError: webhookManager.isDuplicateMessage is not a function

      183 |       const channelId = 'channel-123';
      184 |       
    > 185 |       expect(webhookManager.isDuplicateMessage('', username, channelId)).toBe(false);
          |                             ^
      186 |       expect(webhookManager.isDuplicateMessage(null, username, channelId)).toBe(false);
      187 |       expect(webhookManager.isDuplicateMessage(undefined, username, channelId)).toBe(false);
      188 |     });

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:185:29)

  ● WebhookManager - Exported Functions › Pending message functions › should create a consistent key format for personality-channel combinations

    TypeError: webhookManager.createPersonalityChannelKey is not a function

      199 |       const channelId = 'channel-123';
      200 |       
    > 201 |       const key = webhookManager.createPersonalityChannelKey(personalityName, channelId);
          |                                  ^
      202 |       expect(key).toBe('test-personality_channel-123');
      203 |     });
      204 |     

      at Object.createPersonalityChannelKey (tests/unit/webhookManager.exports.test.js:201:34)

  ● WebhookManager - Exported Functions › Pending message functions › should register and detect pending messages

    TypeError: webhookManager.hasPersonalityPendingMessage is not a function

      209 |       
      210 |       // Initially no pending message
    > 211 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(false);
          |                             ^
      212 |       
      213 |       // Register a pending message
      214 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);

      at Object.hasPersonalityPendingMessage (tests/unit/webhookManager.exports.test.js:211:29)

  ● WebhookManager - Exported Functions › Pending message functions › should timeout pending messages after the error wait time

    TypeError: webhookManager.registerPendingMessage is not a function

      238 |         
      239 |         // Register a pending message
    > 240 |         webhookManager.registerPendingMessage(personalityName, channelId, content, false);
          |                        ^
      241 |         
      242 |         // Should have a pending message
      243 |         expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(true);

      at Object.registerPendingMessage (tests/unit/webhookManager.exports.test.js:240:24)

  ● WebhookManager - Exported Functions › Message timing functions › should calculate delay needed for proper message ordering

    TypeError: webhookManager.calculateMessageDelay is not a function

      269 |         
      270 |         // Initially should not need a delay
    > 271 |         expect(webhookManager.calculateMessageDelay(channelId)).toBe(0);
          |                               ^
      272 |         
      273 |         // Update last message time for the channel
      274 |         webhookManager.updateChannelLastMessageTime(channelId);

      at Object.calculateMessageDelay (tests/unit/webhookManager.exports.test.js:271:31)

  ● WebhookManager - Exported Functions › Webhook cache functions › should have clearWebhookCache and clearAllWebhookCaches functions exported

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      298 |     
      299 |     it('should have clearWebhookCache and clearAllWebhookCaches functions exported', () => {
    > 300 |       expect(typeof webhookManager.clearWebhookCache).toBe('function');
          |                                                       ^
      301 |       expect(typeof webhookManager.clearAllWebhookCaches).toBe('function');
      302 |     });
      303 |     

      at Object.toBe (tests/unit/webhookManager.exports.test.js:300:55)

  ● WebhookManager - Exported Functions › preloadPersonalityAvatar › should be an exported function that handles avatars

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      309 |     it('should be an exported function that handles avatars', () => {
      310 |       // Verify the function exists
    > 311 |       expect(typeof webhookManager.preloadPersonalityAvatar).toBe('function');
          |                                                              ^
      312 |       
      313 |       // Create a personality with no avatar to avoid actual fetch calls
      314 |       const personality = {

      at Object.toBe (tests/unit/webhookManager.exports.test.js:311:62)

FAIL tests/unit/webhookManager.media.test.js
  Webhook Manager - Media Handling
    ✕ should send message with files through webhook (3 ms)
    ✕ should send message with single file through webhook (3 ms)
    ✕ should handle DM channels without webhooks (2 ms)
    ✕ should handle empty content with files (2 ms)
    ✕ should send simple message without options (2 ms)
    ✕ should handle errors gracefully (3 ms)

  ● Webhook Manager - Media Handling › should send message with files through webhook

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Check out this content", "username": "Test Personality"}

    Number of calls: 0

      68 |     );
      69 |     
    > 70 |     expect(mockWebhook.send).toHaveBeenCalledWith(
         |                              ^
      71 |       expect.objectContaining({
      72 |         content: 'Check out this content',
      73 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:70:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should send message with single file through webhook

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Multiple files", "username": "Test Personality"}

    Number of calls: 0

       96 |     await promise;
       97 |     
    >  98 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
       99 |       expect.objectContaining({
      100 |         content: 'Multiple files',
      101 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:98:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle DM channels without webhooks

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      123 |     
      124 |     // In DMs, it should use channel.send instead of webhook
    > 125 |     expect(mockChannel.send).toHaveBeenCalled();
          |                              ^
      126 |     expect(mockWebhook.send).not.toHaveBeenCalled();
      127 |   });
      128 |

      at toHaveBeenCalled (tests/unit/webhookManager.media.test.js:125:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle empty content with files

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"files": ArrayContaining [ObjectContaining {"attachment": "https://example.com/image.png"}], "username": "Test Personality"}

    Number of calls: 0

      146 |     await promise;
      147 |     
    > 148 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
      149 |       expect.objectContaining({
      150 |         username: 'Test Personality',
      151 |         files: expect.arrayContaining([

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:148:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should send simple message without options

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Message with embed", "username": "Test Personality"}

    Number of calls: 0

      173 |     await promise;
      174 |     
    > 175 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
      176 |       expect.objectContaining({
      177 |         content: 'Message with embed',
      178 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:175:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      184 |     mockWebhook.send.mockRejectedValue(new Error('Webhook error'));
      185 |     
    > 186 |     const promise = expect(
          |                     ^
      187 |       webhookManager.sendWebhookMessage(
      188 |         mockChannel,
      189 |         'This will fail',

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/webhookManager.media.test.js:186:21)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at _next (tests/unit/webhookManager.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.media.test.js:2:1)

FAIL tests/unit/domain/ai/index.test.js
  AI Domain Index
    exports
      ✓ should export all aggregates (4 ms)
      ✓ should export all value objects (2 ms)
      ✓ should export all services (2 ms)
      ✓ should export all repositories (2 ms)
      ✓ should export all events (2 ms)
    functionality
      ✓ should allow creating AI requests (2 ms)
      ✓ should allow creating AI events (7 ms)
    domain boundary
      ✓ should not export internal implementation details (2 ms)
      ✕ should provide complete public API (3 ms)

  ● AI Domain Index › domain boundary › should provide complete public API

    expect(received).toHaveLength(expected)

    Expected length: 14
    Received length: 15
    Received array:  ["AIRequest", "AIRequestId", "AIContent", "AIModel", "AIService", "AIRequestDeduplicator", "AIRequestRepository", "AIRequestCreated", "AIRequestSent", "AIResponseReceived", …]

      140 |       }
      141 |       
    > 142 |       expect(exportedKeys).toHaveLength(expectedKeys.length);
          |                            ^
      143 |     });
      144 |   });
      145 | });

      at Object.toHaveLength (tests/unit/domain/ai/index.test.js:142:28)

FAIL tests/unit/webhookManager.test.js
  WebhookManager
    isDuplicateMessage and hashMessage
      ✕ should create a consistent hash for a message (2 ms)
      ✕ should detect a duplicate message (2 ms)
      ✕ should not consider different messages as duplicates (3 ms)
      ✕ should not consider empty content as a duplicate (3 ms)
    getStandardizedUsername
      ✕ should prioritize displayName if available (2 ms)
      ✕ should fall back to first part of fullName if no displayName (2 ms)
      ✕ should use fullName if no hyphens and under limit (2 ms)
      ✕ should truncate names longer than 32 characters (2 ms)
      ✕ should return "Bot" for null or undefined personality (2 ms)
    Pending Message Tracking
      ✕ should create a consistent key for personality-channel combinations (7 ms)
      ✕ should register and detect pending messages (3 ms)
      ✕ should expire pending messages after timeout (2 ms)

  ● WebhookManager › isDuplicateMessage and hashMessage › should create a consistent hash for a message

    TypeError: webhookManager.hashMessage is not a function

      106 |       const channelId = 'channel-123';
      107 |       
    > 108 |       const hash1 = webhookManager.hashMessage(content, username, channelId);
          |                                    ^
      109 |       const hash2 = webhookManager.hashMessage(content, username, channelId);
      110 |       
      111 |       // Same inputs should produce the same hash

      at Object.hashMessage (tests/unit/webhookManager.test.js:108:36)

  ● WebhookManager › isDuplicateMessage and hashMessage › should detect a duplicate message

    TypeError: webhookManager.isDuplicateMessage is not a function

      123 |       
      124 |       // First time is not a duplicate
    > 125 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(false);
          |                             ^
      126 |       
      127 |       // Second time should be detected as duplicate
      128 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(true);

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:125:29)

  ● WebhookManager › isDuplicateMessage and hashMessage › should not consider different messages as duplicates

    TypeError: webhookManager.isDuplicateMessage is not a function

      134 |       
      135 |       // First message
    > 136 |       expect(webhookManager.isDuplicateMessage('First message', username, channelId)).toBe(false);
          |                             ^
      137 |       
      138 |       // Different content should not be a duplicate
      139 |       expect(webhookManager.isDuplicateMessage('Second message', username, channelId)).toBe(false);

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:136:29)

  ● WebhookManager › isDuplicateMessage and hashMessage › should not consider empty content as a duplicate

    TypeError: webhookManager.isDuplicateMessage is not a function

      150 |       const channelId = 'channel-123';
      151 |       
    > 152 |       expect(webhookManager.isDuplicateMessage('', username, channelId)).toBe(false);
          |                             ^
      153 |       expect(webhookManager.isDuplicateMessage(null, username, channelId)).toBe(false);
      154 |       expect(webhookManager.isDuplicateMessage(undefined, username, channelId)).toBe(false);
      155 |     });

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:152:29)

  ● WebhookManager › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      163 |       };
      164 |       
    > 165 |       expect(webhookManager.getStandardizedUsername(personality)).toBe('Display Name');
          |                             ^
      166 |     });
      167 |     
      168 |     it('should fall back to first part of fullName if no displayName', () => {

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:165:29)

  ● WebhookManager › getStandardizedUsername › should fall back to first part of fullName if no displayName

    TypeError: webhookManager.getStandardizedUsername is not a function

      171 |       };
      172 |       
    > 173 |       expect(webhookManager.getStandardizedUsername(personality)).toBe('First');
          |                             ^
      174 |     });
      175 |     
      176 |     it('should use fullName if no hyphens and under limit', () => {

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:173:29)

  ● WebhookManager › getStandardizedUsername › should use fullName if no hyphens and under limit

    TypeError: webhookManager.getStandardizedUsername is not a function

      180 |       
      181 |       // Use a case-insensitive match because the implementation capitalizes the first letter
    > 182 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      183 |       expect(result.toLowerCase()).toBe('shortname'.toLowerCase());
      184 |     });
      185 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:182:37)

  ● WebhookManager › getStandardizedUsername › should truncate names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      189 |       };
      190 |       
    > 191 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      192 |       expect(result.length).toBeLessThanOrEqual(32);
      193 |       expect(result).toContain('...');
      194 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:191:37)

  ● WebhookManager › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      195 |     
      196 |     it('should return "Bot" for null or undefined personality', () => {
    > 197 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      198 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      199 |       expect(webhookManager.getStandardizedUsername({})).toBe('Bot');
      200 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:197:29)

  ● WebhookManager › Pending Message Tracking › should create a consistent key for personality-channel combinations

    TypeError: webhookManager.createPersonalityChannelKey is not a function

      211 |       const channelId = 'channel-123';
      212 |       
    > 213 |       const key = webhookManager.createPersonalityChannelKey(personalityName, channelId);
          |                                  ^
      214 |       expect(key).toBe('test-personality_channel-123');
      215 |     });
      216 |     

      at Object.createPersonalityChannelKey (tests/unit/webhookManager.test.js:213:34)

  ● WebhookManager › Pending Message Tracking › should register and detect pending messages

    TypeError: webhookManager.hasPersonalityPendingMessage is not a function

      221 |       
      222 |       // Initially should have no pending message
    > 223 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(false);
          |                             ^
      224 |       
      225 |       // Register a pending message
      226 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);

      at Object.hasPersonalityPendingMessage (tests/unit/webhookManager.test.js:223:29)

  ● WebhookManager › Pending Message Tracking › should expire pending messages after timeout

    TypeError: webhookManager.registerPendingMessage is not a function

      242 |       
      243 |       // Register a pending message
    > 244 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);
          |                      ^
      245 |       
      246 |       // Should detect a pending message
      247 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(true);

      at Object.registerPendingMessage (tests/unit/webhookManager.test.js:244:22)

FAIL tests/unit/webhookManager.helpers.test.js
  WebhookManager - Helper Functions
    Console output management
      ✕ minimizeConsoleOutput should return an empty object with structured logging (4 ms)
      ✕ restoreConsoleOutput should be a no-op with structured logging (7 ms)
    Message ID generation
      ✕ generateMessageTrackingId should create unique IDs (2 ms)
    Error content detection
      ✕ isErrorContent should identify error messages (2 ms)
      ✕ markErrorContent should add prefix to error messages (1 ms)
    Message preparation
      ✕ prepareMessageData should format message data correctly (2 ms)
    Message chunk sending
      ✕ sendMessageChunk should send message via webhook (4 ms)
      ✕ sendMessageChunk should handle errors (3 ms)
    Virtual result creation
      ✕ createVirtualResult should create a valid result object (2 ms)
      ✕ createVirtualResult should handle missing personality data (2 ms)
    Message splitting
      ✕ splitByCharacterLimit should split text correctly (2 ms)
      ✕ processSentence should handle sentences correctly (1 ms)
      ✕ processLine should handle lines correctly (2 ms)
      ✕ processParagraph should handle paragraphs correctly (6 ms)

  ● WebhookManager - Helper Functions › Console output management › minimizeConsoleOutput should return an empty object with structured logging

    TypeError: webhookManager.minimizeConsoleOutput is not a function

      56 |     test('minimizeConsoleOutput should return an empty object with structured logging', () => {
      57 |       // Call the function
    > 58 |       const originalFunctions = webhookManager.minimizeConsoleOutput();
         |                                                ^
      59 |       
      60 |       // Verify it returns an empty object now that we're using structured logging
      61 |       expect(originalFunctions).toEqual({});

      at Object.minimizeConsoleOutput (tests/unit/webhookManager.helpers.test.js:58:48)

  ● WebhookManager - Helper Functions › Console output management › restoreConsoleOutput should be a no-op with structured logging

    TypeError: webhookManager.minimizeConsoleOutput is not a function

      72 |     test('restoreConsoleOutput should be a no-op with structured logging', () => {
      73 |       // First minimize (now returns empty object)
    > 74 |       const originalFunctions = webhookManager.minimizeConsoleOutput();
         |                                                ^
      75 |       
      76 |       // Then restore (should be a no-op)
      77 |       webhookManager.restoreConsoleOutput(originalFunctions);

      at Object.minimizeConsoleOutput (tests/unit/webhookManager.helpers.test.js:74:48)

  ● WebhookManager - Helper Functions › Message ID generation › generateMessageTrackingId should create unique IDs

    TypeError: webhookManager.generateMessageTrackingId is not a function

       96 |       
       97 |       // Generate IDs
    >  98 |       const id1 = webhookManager.generateMessageTrackingId(channelId);
          |                                  ^
       99 |       const id2 = webhookManager.generateMessageTrackingId(channelId);
      100 |       
      101 |       // IDs should be strings

      at Object.generateMessageTrackingId (tests/unit/webhookManager.helpers.test.js:98:34)

  ● WebhookManager - Helper Functions › Error content detection › isErrorContent should identify error messages

    TypeError: webhookManager.isErrorContent is not a function

      113 |     test('isErrorContent should identify error messages', () => {
      114 |       // Test error patterns
    > 115 |       expect(webhookManager.isErrorContent("I'm having trouble connecting")).toBe(true);
          |                             ^
      116 |       expect(webhookManager.isErrorContent("ERROR_MESSAGE_PREFIX: Some error")).toBe(true);
      117 |       expect(webhookManager.isErrorContent("I'm experiencing a technical issue")).toBe(true);
      118 |       expect(webhookManager.isErrorContent("Error ID: 12345")).toBe(true);

      at Object.isErrorContent (tests/unit/webhookManager.helpers.test.js:115:29)

  ● WebhookManager - Helper Functions › Error content detection › markErrorContent should add prefix to error messages

    TypeError: webhookManager.markErrorContent is not a function

      130 |     test('markErrorContent should add prefix to error messages', () => {
      131 |       // Should add prefix to error messages
    > 132 |       expect(webhookManager.markErrorContent("I'm having trouble connecting")).toContain('ERROR_MESSAGE_PREFIX:');
          |                             ^
      133 |       expect(webhookManager.markErrorContent("technical issue")).toContain('ERROR_MESSAGE_PREFIX:');
      134 |       
      135 |       // Should not modify non-error messages

      at Object.markErrorContent (tests/unit/webhookManager.helpers.test.js:132:29)

  ● WebhookManager - Helper Functions › Message preparation › prepareMessageData should format message data correctly

    TypeError: webhookManager.prepareMessageData is not a function

      153 |       
      154 |       // Test with basic info
    > 155 |       const basicData = webhookManager.prepareMessageData(content, username, personality, false, threadId);
          |                                        ^
      156 |       expect(basicData.content).toBe(content);
      157 |       expect(basicData.username).toBe(username);
      158 |       expect(basicData._personality).toBe(personality); // Personality is stored internally

      at Object.prepareMessageData (tests/unit/webhookManager.helpers.test.js:155:40)

  ● WebhookManager - Helper Functions › Message chunk sending › sendMessageChunk should send message via webhook

    TypeError: webhookManager.sendMessageChunk is not a function

      182 |       
      183 |       // Call the function
    > 184 |       const result = await webhookManager.sendMessageChunk(webhook, messageData, 0, 1);
          |                                           ^
      185 |       
      186 |       // Verify webhook.send was called with the message data plus avatarURL
      187 |       expect(webhook.send).toHaveBeenCalledWith({

      at sendMessageChunk (tests/unit/webhookManager.helpers.test.js:184:43)
      at Generator.call (tests/unit/webhookManager.helpers.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at _next (tests/unit/webhookManager.helpers.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.helpers.test.js:2:1)

  ● WebhookManager - Helper Functions › Message chunk sending › sendMessageChunk should handle errors

    TypeError: webhookManager.sendMessageChunk is not a function

      209 |       
      210 |       // Call should throw, even though fallback was attempted
    > 211 |       await expect(webhookManager.sendMessageChunk(webhook, messageData, 0, 1))
          |                                   ^
      212 |         .rejects.toThrow();
      213 |       
      214 |       // Verify webhook.send was called for both attempts

      at sendMessageChunk (tests/unit/webhookManager.helpers.test.js:211:35)
      at Generator.call (tests/unit/webhookManager.helpers.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at _next (tests/unit/webhookManager.helpers.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.helpers.test.js:2:1)

  ● WebhookManager - Helper Functions › Virtual result creation › createVirtualResult should create a valid result object

    TypeError: webhookManager.createVirtualResult is not a function

      235 |       
      236 |       // Call the function
    > 237 |       const result = webhookManager.createVirtualResult(personality, channelId);
          |                                     ^
      238 |       
      239 |       // Verify structure
      240 |       expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.helpers.test.js:237:37)

  ● WebhookManager - Helper Functions › Virtual result creation › createVirtualResult should handle missing personality data

    TypeError: webhookManager.createVirtualResult is not a function

      251 |       
      252 |       // Call with null personality
    > 253 |       const result1 = webhookManager.createVirtualResult(null, channelId);
          |                                      ^
      254 |       expect(result1).toHaveProperty('isDuplicate', true);
      255 |       
      256 |       // Call with personality missing fullName

      at Object.createVirtualResult (tests/unit/webhookManager.helpers.test.js:253:38)

  ● WebhookManager - Helper Functions › Message splitting › splitByCharacterLimit should split text correctly

    TypeError: webhookManager.splitByCharacterLimit is not a function

      266 |       
      267 |       // Split the text
    > 268 |       const chunks = webhookManager.splitByCharacterLimit(longText);
          |                                     ^
      269 |       
      270 |       // Should be split into chunks
      271 |       expect(chunks.length).toBeGreaterThan(1);

      at Object.splitByCharacterLimit (tests/unit/webhookManager.helpers.test.js:268:37)

  ● WebhookManager - Helper Functions › Message splitting › processSentence should handle sentences correctly

    TypeError: webhookManager.processSentence is not a function

      285 |       
      286 |       // Process a short sentence with empty current chunk
    > 287 |       let result = webhookManager.processSentence('This is a short sentence.', chunks, '');
          |                                   ^
      288 |       expect(result).toBe('This is a short sentence.');
      289 |       expect(chunks.length).toBe(0);
      290 |       

      at Object.processSentence (tests/unit/webhookManager.helpers.test.js:287:35)

  ● WebhookManager - Helper Functions › Message splitting › processLine should handle lines correctly

    TypeError: webhookManager.processLine is not a function

      309 |       
      310 |       // Process a short line
    > 311 |       let result = webhookManager.processLine('This is a short line', chunks, '');
          |                                   ^
      312 |       expect(result).toBe('This is a short line');
      313 |       
      314 |       // Process a line with newlines

      at Object.processLine (tests/unit/webhookManager.helpers.test.js:311:35)

  ● WebhookManager - Helper Functions › Message splitting › processParagraph should handle paragraphs correctly

    TypeError: webhookManager.processParagraph is not a function

      331 |       
      332 |       // Process a short paragraph
    > 333 |       let result = webhookManager.processParagraph('This is a short paragraph.', chunks, '');
          |                                   ^
      334 |       expect(result).toBe('This is a short paragraph.');
      335 |       
      336 |       // Process another paragraph

      at Object.processParagraph (tests/unit/webhookManager.helpers.test.js:333:35)

FAIL tests/unit/application/commands/conversation/DeactivateCommand.test.js
  DeactivateCommand
    command metadata
      ✓ should have correct metadata (3 ms)
    execute
      ✕ should deactivate an active personality (3 ms)
      ✕ should reject in DM channels (1 ms)
      ✕ should reject without Manage Messages permission (2 ms)
      ✕ should handle no active personality (8 ms)
      ✕ should handle deactivation errors (1 ms)
      ✕ should handle unexpected errors gracefully (2 ms)
      ✕ should log successful deactivation (2 ms)
      ✕ should include timestamp in embed (2 ms)
      ✕ should handle personalities with special characters in names (3 ms)

  ● DeactivateCommand › execute › should deactivate an active personality

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:73:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should reject in DM channels

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:102:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should reject without Manage Messages permission

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:116:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle no active personality

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:131:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle deactivation errors

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:149:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:168:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should log successful deactivation

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:186:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should include timestamp in embed

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:200:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle personalities with special characters in names

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:214:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

FAIL tests/unit/webhookManager.chunkDelay.test.js
  WebhookManager - Chunk Delay Tests
    ✕ should not delay on the first chunk (2 ms)
    ✕ should delay 750ms between chunks for multi-chunk messages (2 ms)
    ✕ should use custom delay function when set (1 ms)
    ✕ should apply delay for each chunk after the first (2 ms)
    ✕ should verify exact delay timing between chunks (1 ms)
    ✕ should handle empty content without delays (1 ms)
    ✕ should handle delay errors gracefully (5 ms)

  ● WebhookManager - Chunk Delay Tests › should not delay on the first chunk

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should delay 750ms between chunks for multi-chunk messages

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should use custom delay function when set

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should apply delay for each chunk after the first

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should verify exact delay timing between chunks

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should handle empty content without delays

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should handle delay errors gracefully

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

FAIL tests/unit/webhookManager.dm.media.test.js
  Webhook Manager - DM Media Handling
    ✕ should properly format DM messages with personality name (2 ms)
    ✕ should process media in DM messages (2 ms)
    ✕ should handle splitting long messages with media attachments (1 ms)
    ✕ should continue with original content if media processing fails (2 ms)

  ● Webhook Manager - DM Media Handling › should properly format DM messages with personality name

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      58 |
      59 |   it('should properly format DM messages with personality name', async () => {
    > 60 |     const result = await webhookManager.sendFormattedMessageInDM(
         |                                         ^
      61 |       mockChannel,
      62 |       'Hello World',
      63 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:60:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should process media in DM messages

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      92 |     });
      93 |
    > 94 |     const result = await webhookManager.sendFormattedMessageInDM(
         |                                         ^
      95 |       mockChannel,
      96 |       'Check out this image: https://example.com/image.jpg',
      97 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:94:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should handle splitting long messages with media attachments

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      143 |     });
      144 |     
    > 145 |     const result = await webhookManager.sendFormattedMessageInDM(
          |                                         ^
      146 |       mockChannel,
      147 |       mediaMessage,
      148 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:145:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should continue with original content if media processing fails

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      168 |     mediaHandler.processMediaUrls.mockRejectedValue(new Error('Media processing failed'));
      169 |
    > 170 |     const result = await webhookManager.sendFormattedMessageInDM(
          |                                         ^
      171 |       mockChannel,
      172 |       'Message with problematic image: https://example.com/bad-image.jpg',
      173 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:170:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

FAIL tests/unit/webhookManager.username.suffix.test.js
  Webhook Username Suffix
    ✕ should append bot suffix to display name (1 ms)
    ✕ should handle long display names and truncate properly (1 ms)
    ✕ should handle missing display name and use fullName (1 ms)
    ✕ should handle null/undefined personality (1 ms)
    ✕ should work when bot has no suffix (2 ms)
    ✕ should remove Discord discriminator from suffix (1 ms)
    ✕ should work when global.tzurotClient is undefined (1 ms)

  ● Webhook Username Suffix › should append bot suffix to display name

    TypeError: getStandardizedUsername is not a function

      24 |     };
      25 |     
    > 26 |     const username = getStandardizedUsername(personality);
         |                      ^
      27 |     expect(username).toBe('Albert Einstein | Test Server');
      28 |     
      29 |     // Test with inconsistent spacing in the bot tag

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:26:22)

  ● Webhook Username Suffix › should handle long display names and truncate properly

    TypeError: getStandardizedUsername is not a function

      45 |     };
      46 |     
    > 47 |     const username = getStandardizedUsername(personality);
         |                      ^
      48 |     const expectedSuffix = ' | Test Server';
      49 |     const maxNameLength = 29 - expectedSuffix.length;
      50 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:47:22)

  ● Webhook Username Suffix › should handle missing display name and use fullName

    TypeError: getStandardizedUsername is not a function

      61 |     };
      62 |     
    > 63 |     const username = getStandardizedUsername(personality);
         |                      ^
      64 |     expect(username).toBe('Marie | Test Server');
      65 |   });
      66 |   

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:63:22)

  ● Webhook Username Suffix › should handle null/undefined personality

    TypeError: getStandardizedUsername is not a function

      66 |   
      67 |   it('should handle null/undefined personality', () => {
    > 68 |     const username = getStandardizedUsername(null);
         |                      ^
      69 |     expect(username).toBe('Bot');
      70 |   });
      71 |   

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:68:22)

  ● Webhook Username Suffix › should work when bot has no suffix

    TypeError: getStandardizedUsername is not a function

      81 |     };
      82 |     
    > 83 |     const username = getStandardizedUsername(personality);
         |                      ^
      84 |     expect(username).toBe('Sigmund Freud');
      85 |     
      86 |     // Restore the global

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:83:22)

  ● Webhook Username Suffix › should remove Discord discriminator from suffix

    TypeError: getStandardizedUsername is not a function

       99 |     };
      100 |     
    > 101 |     const username = getStandardizedUsername(personality);
          |                      ^
      102 |     expect(username).toBe('Carl Jung | Test Server');
      103 |     expect(username.includes('#1234')).toBe(false);
      104 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:101:22)

  ● Webhook Username Suffix › should work when global.tzurotClient is undefined

    TypeError: getStandardizedUsername is not a function

      124 |     };
      125 |     
    > 126 |     const username = getStandardizedUsername(personality);
          |                      ^
      127 |     expect(username).toBe('Carl Jung');
      128 |     
      129 |     // Restore the global

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:126:22)

FAIL tests/unit/webhookManager.simple.test.js
  WebhookManager Avatar URL Handling - Simplified Tests
    ✕ validateAvatarUrl should return false for invalid URLs (4 ms)
    ✕ getValidAvatarUrl should return null for null input (1 ms)
    ✕ preloadPersonalityAvatar should set null for personalities without avatarUrl (2 ms)
    ✕ preloadPersonalityAvatar should handle null personality gracefully (3 ms)

  ● WebhookManager Avatar URL Handling - Simplified Tests › validateAvatarUrl should return false for invalid URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      53 |   test('validateAvatarUrl should return false for invalid URLs', async () => {
      54 |     // Test with null URL
    > 55 |     expect(await webhookManager.validateAvatarUrl(null)).toBe(false);
         |                                 ^
      56 |     
      57 |     // Test with empty URL
      58 |     expect(await webhookManager.validateAvatarUrl('')).toBe(false);

      at validateAvatarUrl (tests/unit/webhookManager.simple.test.js:55:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › getValidAvatarUrl should return null for null input

    TypeError: webhookManager.getValidAvatarUrl is not a function

      64 |   test('getValidAvatarUrl should return null for null input', async () => {
      65 |     // This is the simplest test case that should always work
    > 66 |     expect(await webhookManager.getValidAvatarUrl(null)).toBe(null);
         |                                 ^
      67 |   });
      68 |   
      69 |   test('preloadPersonalityAvatar should set null for personalities without avatarUrl', async () => {

      at getValidAvatarUrl (tests/unit/webhookManager.simple.test.js:66:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › preloadPersonalityAvatar should set null for personalities without avatarUrl

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      75 |     
      76 |     // Call the function
    > 77 |     await webhookManager.preloadPersonalityAvatar(personality);
         |                          ^
      78 |     
      79 |     // Verify the avatar URL was set to null
      80 |     expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.simple.test.js:77:26)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › preloadPersonalityAvatar should handle null personality gracefully

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      83 |   test('preloadPersonalityAvatar should handle null personality gracefully', async () => {
      84 |     // This should not throw any errors
    > 85 |     await expect(webhookManager.preloadPersonalityAvatar(null)).resolves.not.toThrow();
         |                                 ^
      86 |   });
      87 | });

      at preloadPersonalityAvatar (tests/unit/webhookManager.simple.test.js:85:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

FAIL tests/unit/webhookManager.createVirtual.test.js
  WebhookManager - createVirtualResult
    ✕ should create a virtual result with expected format (3 ms)
    ✕ should handle null personality gracefully (2 ms)
    ✕ should handle missing fullName property gracefully (3 ms)
    ✕ should generate a unique virtual ID for each call (2 ms)

  ● WebhookManager - createVirtualResult › should create a virtual result with expected format

    TypeError: webhookManager.createVirtualResult is not a function

      32 |     
      33 |     // Call the function we're testing
    > 34 |     const result = webhookManager.createVirtualResult(personality, channelId);
         |                                   ^
      35 |     
      36 |     // Verify the returned object has the expected format
      37 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:34:35)

  ● WebhookManager - createVirtualResult › should handle null personality gracefully

    TypeError: webhookManager.createVirtualResult is not a function

      50 |   it('should handle null personality gracefully', () => {
      51 |     // Call the function with null personality
    > 52 |     const result = webhookManager.createVirtualResult(null, 'test-channel-123');
         |                                   ^
      53 |     
      54 |     // Verify the structure of the result
      55 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:52:35)

  ● WebhookManager - createVirtualResult › should handle missing fullName property gracefully

    TypeError: webhookManager.createVirtualResult is not a function

      67 |     
      68 |     // Call the function
    > 69 |     const result = webhookManager.createVirtualResult(personality, 'test-channel-123');
         |                                   ^
      70 |     
      71 |     // Verify the structure of the result
      72 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:69:35)

  ● WebhookManager - createVirtualResult › should generate a unique virtual ID for each call

    TypeError: webhookManager.createVirtualResult is not a function

      78 |   it('should generate a unique virtual ID for each call', () => {
      79 |     // Call the function multiple times
    > 80 |     const result1 = webhookManager.createVirtualResult(null, 'test-channel-123');
         |                                    ^
      81 |     const result2 = webhookManager.createVirtualResult(null, 'test-channel-123');
      82 |     
      83 |     // Verify the IDs are different

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:80:36)

FAIL tests/unit/validateAvatarUrl.test.js
  validateAvatarUrl Success Test
    ✕ should return true for valid image URLs (3 ms)

  ● validateAvatarUrl Success Test › should return true for valid image URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      81 |     
      82 |     // Execute the validation
    > 83 |     const result = await webhookManager.validateAvatarUrl(validUrl);
         |                                         ^
      84 |     
      85 |     // Should return true
      86 |     expect(result).toBe(true);

      at validateAvatarUrl (tests/unit/validateAvatarUrl.test.js:83:41)
      at Generator.call (tests/unit/validateAvatarUrl.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/validateAvatarUrl.test.js:2:1)
      at asyncGeneratorStep (tests/unit/validateAvatarUrl.test.js:2:1)
      at asyncGeneratorStep (tests/unit/validateAvatarUrl.test.js:2:1)
      at _next (tests/unit/validateAvatarUrl.test.js:2:1)
      at Object.<anonymous> (tests/unit/validateAvatarUrl.test.js:2:1)

2025-06-19 03:39:17 [31merror[39m: [AIService] Error: personalityName is required but was not provided
2025-06-19 03:39:18 [31merror[39m: [AIService] API error with normal personality test-personality: API connection failed
2025-06-19 03:39:18 [31merror[39m: [ErrorTracker] CRITICAL AI_SERVICE: API connection failed (ERR-ai_-han-mc32lh8i-3jz)
2025-06-19 03:39:18 [31merror[39m: [AIService] Invalid response structure from test-personality
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [AIService] Invalid response structure from test-personality
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [AIService] Non-string content from test-personality: object
2025-06-19 03:39:18 [31merror[39m: [AIService] Non-string error from test-personality
2025-06-19 03:39:18 [31merror[39m: [AIService] Non-string content sample: {"some":"object"}
2025-06-19 03:39:18 [31merror[39m: [ErrorTracker] CRITICAL API_CONTENT: Non-string API response: Content type: object (ERR-api-get-mc32lhd7-re)
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: type_error
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: Type mismatch or incompatible types
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: TypeError: Cannot read property of undefined
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [ErrorTracker] CRITICAL API_CONTENT: API content error: Type mismatch or incompatible types (ERR-api-get-mc32lhee-5i7)
2025-06-19 03:39:18 [31merror[39m: [AIService] Invalid response structure from test-personality
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [AIService] API error with normal personality test-personality: Request timeout
2025-06-19 03:39:18 [31merror[39m: [ErrorTracker] CRITICAL AI_SERVICE: Request timeout (ERR-ai_-han-mc32lhgi-381)
2025-06-19 03:39:18 [31merror[39m: [AIService] Invalid response structure from test-personality
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:18 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:18 [31merror[39m: [AIService] Error context - User: test-user-123, Channel: test-channel-456
2025-06-19 03:39:18 [31merror[39m: [AIService] API error with normal personality test-personality: Specific type error
2025-06-19 03:39:18 [31merror[39m: [ErrorTracker] CRITICAL AI_SERVICE: Specific type error (ERR-ai_-han-mc32lhjp-2vc)
PASS tests/unit/aiService.error.test.js
  aiService Error Handling
    Initialization and environment
      ✓ aiService should handle missing API key (99 ms)
      ✓ aiService should use default values for missing config settings (63 ms)
    Error detection
      ✓ isErrorResponse should correctly identify high confidence error patterns (29 ms)
      ✓ isErrorResponse should correctly identify low confidence patterns with context (34 ms)
      ✓ isErrorResponse should not flag normal content with error-like terms (32 ms)
      ✓ isErrorResponse should handle edge cases (34 ms)
    Blackout periods
      ✓ isInBlackoutPeriod should return true for recent errors (34 ms)
      ✓ isInBlackoutPeriod should return false after blackout period expires (32 ms)
      ✓ addToBlackoutList should accept a custom duration parameter (37 ms)
      ✓ createBlackoutKey should handle missing context properties (29 ms)
    Request handling
      ✓ getAiResponse should handle missing parameters gracefully (48 ms)
      ✓ getAiResponse should track errors but not skip API calls (30 ms)
      ✓ getAiResponse should handle API errors gracefully (59 ms)
      ✓ getAiResponse should handle empty responses gracefully (62 ms)
      ✓ getAiResponse should use personality error message for empty responses (44 ms)
      ✓ getAiResponse should handle non-string responses gracefully (42 ms)
      ✓ getAiResponse should detect error content in API responses (42 ms)
      ✓ getAiResponse should handle completely null response gracefully (42 ms)
      ✓ getAiResponse should handle network timeouts gracefully (34 ms)
      ✓ getAiResponse should handle response with missing message property (42 ms)
      ✓ getAiResponse should handle response with empty string content (40 ms)
    API error handling
      ✓ getAiResponse should detect API errors (39 ms)
    Duplicate request prevention
      ✓ createRequestId should create consistent IDs for same inputs (28 ms)
      ✓ getAiResponse should handle duplicate requests (35 ms)
      ✓ getAiResponse should track pending requests (28 ms)

PASS tests/unit/commands/handlers/miscHandlers.test.js
  Miscellaneous Command Handlers
    Reset Command
      ✓ should have the correct metadata (38 ms)
      ✓ should call clearConversation when reset command runs (32 ms)
      ✓ should report when no personality is found (37 ms)
    Auto Response Command
      ✓ should have the correct metadata (41 ms)
      ✓ should enable auto-response with "on" parameter (43 ms)
      ✓ should disable auto-response with "off" parameter (42 ms)
      ✓ should check auto-response status with "status" parameter (41 ms)
      ✓ should show help with no parameters (44 ms)
    Info Command
      ✓ should have the correct metadata (40 ms)
      ✓ should handle being called with a personality name (38 ms)
      ✓ should handle fallback lookups (31 ms)
      ✓ should show error when personality is not found (38 ms)
      ✓ should show error with no parameters (34 ms)
    Status Command
      ✓ should have the correct metadata (36 ms)
      ✓ should show bot status (33 ms)
    Ping Command
      ✓ should have the correct metadata (35 ms)
      ✓ should respond with pong (36 ms)
    Debug Command
      ✓ should have the correct metadata (34 ms)
      ✓ should show generic debug info without params (35 ms)

PASS tests/unit/commands/handlers/help.test.js
  Help Command
    ✓ should have the correct metadata (50 ms)
    General Help Command
      ✓ should display help for regular users (43 ms)
      ✓ should include admin commands for admin users (39 ms)
      ✓ should handle errors gracefully (37 ms)
    Command-Specific Help
      ✓ should display help for a specific command (47 ms)
      ✓ should show error for non-existent command (44 ms)
      ✓ should deny help for admin commands to regular users (41 ms)
      ✓ should allow help for admin commands to admin users (42 ms)
    Special Command Help
      ✓ should display special help for the auth command (37 ms)
      ✓ should display special help for the add command (42 ms)
      ✓ should display special help for the list command (42 ms)
      ✓ should display special help for the debug command (43 ms)

PASS tests/unit/bot.activation.test.js
  Bot Activated Personality Handling
    Command Activation
      ✓ should ignore command messages when a personality is activated (174 ms)
      ✓ should respond to non-command messages when a personality is activated (78 ms)
      ✓ should treat !rtz by itself as a command and ignore it (70 ms)
      ✓ should only consider messages starting with the exact prefix as commands (71 ms)
      ✓ should ignore commands without a space after prefix (bug fix) (76 ms)
    Webhook Activation
      ✓ should ignore webhook messages when there is an activated personality in the channel (70 ms)
      ✓ should process normal user messages when a personality is activated (68 ms)

PASS tests/unit/webhookServer.test.js
  webhookServer
    verifyGitHubSignature
      ✓ should verify valid signature (4 ms)
      ✓ should reject invalid signature (2 ms)
      ✓ should reject missing signature (2 ms)
      ✓ should reject missing secret (1 ms)
    handleGitHubRelease
      ✓ should handle published release (10 ms)
      ✓ should ignore non-published release actions (3 ms)
      ✓ should ignore non-release events (2 ms)
      ✓ should handle uninitialized notification manager (3 ms)
    createWebhookServer
      ✓ should create and start server (106 ms)
      ✓ should handle OPTIONS requests (143 ms)
      ✓ should reject non-POST requests (121 ms)
      ✓ should return 404 for unknown routes (117 ms)
      ✓ should reject webhooks with invalid signature (123 ms)

PASS tests/unit/bot.activated.command.test.js
  Bot Activated Personality Command Handling
    ✓ should ignore command messages when a personality is activated (249 ms)
    ✓ should respond to non-command messages when a personality is activated (96 ms)
    ✓ should treat !rtz by itself as a command and ignore it (95 ms)
    ✓ should only consider messages starting with the exact prefix as commands (80 ms)
    ✓ should ignore commands without a space after prefix (bug fix) (76 ms)

PASS tests/unit/commands/handlers/remove.test.js
  Remove Command
    ✓ should have the correct metadata (31 ms)
    ✓ should require a personality name (18 ms)
    ✓ should handle non-existent personality (9 ms)
    ✓ should remove a personality by name (12 ms)
    ✓ should remove a personality by alias (14 ms)
    ✓ should handle errors from removePersonality (11 ms)
    ✓ should handle unexpected errors gracefully (16 ms)

PASS tests/unit/commandSystem.test.js
  Command System
    Command Registry
      ✓ should register commands correctly (84 ms)
      ✓ should handle missing commands gracefully (57 ms)
    processCommand
      ✓ should process valid commands (63 ms)
      ✓ should handle unknown commands (60 ms)
      ✓ should process commands by alias (60 ms)
    Permission checks
      ✓ should verify permission-based commands are registered with correct metadata (61 ms)

PASS tests/unit/utils/webhookUserTracker.test.js
  webhookUserTracker
    associateWebhookWithUser
      ✓ should associate webhook with user (5 ms)
      ✓ should not associate if webhookId is missing (4 ms)
      ✓ should not associate if userId is missing (4 ms)
      ✓ should update existing association (4 ms)
    getRealUserIdFromWebhook
      ✓ should return null for missing webhookId (3 ms)
      ✓ should return null for unknown webhook (5 ms)
      ✓ should return user ID for known webhook (5 ms)
      ✓ should update timestamp when retrieving association (4 ms)
    isProxySystemWebhook
      ✓ should return false for null message (8 ms)
      ✓ should return false for non-webhook message (4 ms)
      ✓ should identify PluralKit by application ID (4 ms)
      ✓ should identify Tupperbox by application ID (3 ms)
      ✓ should use cached identification (4 ms)
      ✓ should identify by username containing PluralKit (6 ms)
      ✓ should identify by member nickname containing system name (4 ms)
      ✓ should identify by embed patterns (4 ms)
      ✓ should identify by pk: pattern in embed values (5 ms)
      ✓ should identify by content patterns (5 ms)
      ✓ should identify by pk: in content (6 ms)
      ✓ should return false for non-proxy webhook (4 ms)
    getRealUserId
      ✓ should return null for null message (5 ms)
      ✓ should return author ID for non-webhook message (3 ms)
      ✓ should return null if no author ID (3 ms)
      ✓ should return cached user ID for known webhook (5 ms)
      ✓ should return proxy-system-user for proxy systems (5 ms)
      ✓ should return author ID for unknown webhook (3 ms)
    shouldBypassNsfwVerification
      ✓ should return false for null message (3 ms)
      ✓ should return false for non-webhook message (4 ms)
      ✓ should bypass for proxy system webhooks (5 ms)
      ✓ should bypass for non-auth webhook commands (4 ms)
      ✓ should not bypass for auth command (8 ms)
      ✓ should handle commands with no arguments (4 ms)
      ✓ should return false for non-command webhook messages (4 ms)
    isAuthenticationAllowed
      ✓ should allow auth for non-webhook messages (4 ms)
      ✓ should allow auth for null message (5 ms)
      ✓ should not allow auth for proxy systems (4 ms)
      ✓ should allow auth for webhook with known user (3 ms)
      ✓ should not allow auth for unknown webhook (3 ms)
    clearCachedWebhook
      ✓ should clear specific cached webhook (5 ms)
      ✓ should handle clearing non-existent webhook (3 ms)
    clearAllCachedWebhooks
      ✓ should clear all cached webhooks (4 ms)
      ✓ should handle clearing when no webhooks cached (4 ms)
    cleanup intervals
      ✓ should clean up old webhook user associations (5 ms)
      ✓ should clean up old proxy webhook cache entries (3 ms)
      ✓ should not clean up fresh entries (3 ms)
    checkProxySystemAuthentication
      ✓ should return not authenticated for null message (7 ms)
      ✓ should return not authenticated for non-webhook message (5 ms)
      ✓ should return not authenticated for non-proxy webhook (4 ms)
      ✓ should check authentication for proxy system with found message (6 ms)
      ✓ should return not authenticated when no original message found (5 ms)

PASS tests/unit/commandValidation.test.js
  Command Validation
    validateCommand
      add command validation
        ✓ should validate valid add command (3 ms)
        ✓ should validate add command with optional alias (2 ms)
        ✓ should fail when profileName is missing (1 ms)
        ✓ should fail when profileName is null (2 ms)
        ✓ should fail when profileName is empty string (1 ms)
        ✓ should fail when alias is not a string (2 ms)
      alias command validation
        ✓ should validate valid alias command (2 ms)
        ✓ should fail when profileName is missing (3 ms)
        ✓ should fail when newAlias is missing (2 ms)
        ✓ should fail with multiple errors (5 ms)
      remove command validation
        ✓ should validate valid remove command (2 ms)
        ✓ should fail when profileName is missing (1 ms)
      info command validation
        ✓ should validate valid info command (2 ms)
        ✓ should fail when profileName is missing (3 ms)
      activate command validation
        ✓ should validate valid activate command (2 ms)
        ✓ should fail when personalityName is missing (1 ms)
      autorespond command validation
        ✓ should validate valid autorespond command with on (2 ms)
        ✓ should validate valid autorespond command with off (1 ms)
        ✓ should validate valid autorespond command with status (2 ms)
        ✓ should validate case-insensitive status values (1 ms)
        ✓ should fail with invalid status value (2 ms)
        ✓ should fail when status is missing (1 ms)
      unknown command validation
        ✓ should pass validation for unknown commands (2 ms)
      type validation
        ✓ should validate string types correctly (2 ms)
        ✓ should fail for non-string when string expected (4 ms)
        ✓ should not validate type for undefined optional parameters (2 ms)
        ✓ should not validate type for null optional parameters (1 ms)
      validation failure logging
        ✓ should log validation failures with all errors (2 ms)
    validateCommandMiddleware
      ✓ should return success for valid command (2 ms)
      ✓ should return failure for invalid command (3 ms)
      ✓ should handle validation errors gracefully (3 ms)
      ✓ should return processed args on success (2 ms)
      ✓ should join multiple errors in message (1 ms)
    validationRules
      ✓ should export validation rules (1 ms)
      ✓ should have correct structure for add command (2 ms)
      ✓ should have custom validation for autorespond command (1 ms)
    edge cases
      ✓ should handle objects as parameters (2 ms)
      ✓ should handle arrays as parameters (1 ms)
      ✓ should handle boolean as parameters (3 ms)

PASS tests/unit/bot.activated.webhook.test.js
  Bot Activated Personality Webhook Handling
    ✓ should ignore webhook messages when there is an activated personality in the channel (159 ms)
    ✓ should process normal user messages when a personality is activated (70 ms)

PASS tests/unit/adapters/persistence/FileConversationRepository.test.js
  FileConversationRepository
    initialize
      ✓ should create data directory if it does not exist (5 ms)
      ✓ should load existing data file (2 ms)
      ✓ should create new file if it does not exist (8 ms)
      ✓ should clean up old conversations on startup (3 ms)
      ✓ should throw error for other file read errors (25 ms)
      ✓ should not reinitialize if already initialized (2 ms)
    save
      ✓ should save a conversation with limited message history (7 ms)
      ✓ should enforce max conversations limit (4 ms)
      ✓ should handle save errors (2 ms)
      ✓ should initialize if not already initialized (2 ms)
    findById
      ✓ should find conversation by ID (3 ms)
      ✓ should return null if conversation not found (9 ms)
      ✓ should handle errors during hydration (2 ms)
    findActiveByUser
      ✓ should find active conversations by user (4 ms)
      ✓ should not return ended conversations (2 ms)
      ✓ should return empty array if no active conversations (3 ms)
      ✓ should handle errors during hydration (4 ms)
    findActiveByChannel
      ✓ should find most recent active conversation in channel (2 ms)
      ✓ should return null if no active conversation in channel (1 ms)
      ✓ should not return conversations older than threshold (2 ms)
      ✓ should handle errors during hydration (2 ms)
    delete
      ✓ should delete a conversation (3 ms)
      ✓ should handle deleting non-existent conversation (3 ms)
      ✓ should handle delete errors (2 ms)
    countByPersonality
      ✓ should count conversations for a personality (5 ms)
      ✓ should return 0 if no conversations for personality (2 ms)
      ✓ should handle errors (2 ms)
    getStats
      ✓ should return repository statistics (4 ms)
      ✓ should return zero stats for empty repository (2 ms)
    _hydrate
      ✓ should hydrate conversation with settings (2 ms)
      ✓ should hydrate ended conversation (3 ms)
      ✓ should mark events as committed (2 ms)
    _persist
      ✓ should write to temp file then rename (2 ms)
      ✓ should format JSON with indentation (4 ms)
      ✓ should throw specific error on failure (4 ms)
    _cleanupOldConversations
      ✓ should remove conversations older than 24 hours (2 ms)
      ✓ should remove ended conversations regardless of age (2 ms)
    _enforceMaxConversations
      ✓ should remove oldest conversations when limit exceeded (6 ms)

PASS tests/unit/adapters/persistence/FileAuthenticationRepository.test.js
  FileAuthenticationRepository
    initialize
      ✓ should create data directory if it does not exist (10 ms)
      ✓ should load existing data file (4 ms)
      ✓ should create new file if it does not exist (5 ms)
      ✓ should clean up expired tokens on startup (3 ms)
      ✓ should start cleanup timer (3 ms)
      ✓ should throw error for other file read errors (26 ms)
      ✓ should not reinitialize if already initialized (2 ms)
    save
      ✓ should save user authentication (12 ms)
      ✓ should update existing user authentication (4 ms)
      ✓ should handle save errors (3 ms)
      ✓ should initialize if not already initialized (3 ms)
    findByUserId
      ✓ should find user auth by ID (4 ms)
      ✓ should return null if user not found (3 ms)
      ✓ should handle errors during hydration (2 ms)
    findByToken
      ✓ should find user auth by token (4 ms)
      ✓ should return null if token not found (2 ms)
      ✓ should clean up orphaned token and return null (3 ms)
      ✓ should handle errors during hydration (5 ms)
    findByPersonalityId
      ✓ should find all users with tokens for personality (7 ms)
      ✓ should not include users with only revoked tokens (3 ms)
      ✓ should return empty array if no users found (3 ms)
      ✓ should handle errors during hydration (5 ms)
    delete
      ✓ should delete user auth and associated tokens (2 ms)
      ✓ should handle deleting non-existent user (2 ms)
      ✓ should handle delete errors (2 ms)
    exists
      ✓ should return true if user exists (2 ms)
      ✓ should return false if user does not exist (4 ms)
    countActiveUsers
      ✓ should count users with valid tokens (3 ms)
      ✓ should return 0 if no active users (2 ms)
      ✓ should handle errors (3 ms)
    getStats
      ✓ should return repository statistics (8 ms)
      ✓ should return zero stats for empty repository (2 ms)
    _hydrate
      ✓ should hydrate user with NSFW status (2 ms)
      ✓ should hydrate user with tokens (3 ms)
      ✓ should mark events as committed (4 ms)
    _persist
      ✓ should write to temp file then rename (4 ms)
      ✓ should format JSON with indentation (3 ms)
      ✓ should throw specific error on failure (2 ms)
    _cleanupExpiredTokens
      ✓ should remove expired tokens (3 ms)
      ✓ should be called periodically by timer (3 ms)
    shutdown
      ✓ should stop cleanup timer (3 ms)

PASS tests/unit/core/personality/PersonalityManager.test.js
  PersonalityManager Integration Tests
    initialize
      ✓ should initialize and load data from persistence (19 ms)
      ✓ should handle deferred owner personality seeding (4 ms)
      ✓ should handle synchronous owner personality seeding (4 ms)
      ✓ should skip seeding when requested (9 ms)
      ✓ should handle initialization errors (4 ms)
    registerPersonality
      ✓ should register a new personality successfully (11 ms)
      ✓ should fetch and set profile info (5 ms)
      ✓ should skip profile fetching when fetchInfo is false (7 ms)
      ✓ should handle profile fetch errors gracefully (9 ms)
      ✓ should set display name alias with smart collision handling (9 ms)
      ✓ should return error for invalid data (4 ms)
      ✓ should handle duplicate registration (5 ms)
    setPersonalityAlias
      ✓ should set an alias successfully (7 ms)
      ✓ should skip save when requested (5 ms)
      ✓ should return error for non-existent personality (7 ms)
      ✓ should prevent self-referential aliases (7 ms)
      ✓ should handle invalid alias format (4 ms)
    removePersonality
      ✓ should allow user to remove their own personality (5 ms)
      ✓ should prevent user from removing others personalities (7 ms)
      ✓ should allow bot owner to remove any personality (4 ms)
      ✓ should handle non-existent personality (9 ms)
    seedOwnerPersonalities
      ✓ should seed owner personalities from constants (6 ms)
      ✓ should skip seeding if owner has all expected personalities (4 ms)
      ✓ should add only missing personalities when some already exist (7 ms)
      ✓ should handle case-insensitive personality comparison (4 ms)
      ✓ should skip seeding if no owner configured (4 ms)
    listPersonalitiesForUser
      ✓ should list personalities for a specific user (11 ms)
      ✓ should return empty array for user with no personalities (6 ms)
    save
      ✓ should save personalities and aliases (6 ms)
      ✓ should handle save errors (2 ms)
    getters
      ✓ should expose personality aliases map (1 ms)
      ✓ should expose registry size (2 ms)
    _setDisplayNameAlias
      ✓ should set alias directly if not taken (4 ms)
      ✓ should create smart alias for collisions (4 ms)
      ✓ should fall back to random suffix if smart alias is taken (8 ms)

PASS tests/unit/commands/handlers/add.test.js
  Add Command
    ✓ should have the correct metadata (10 ms)
    ✓ should handle adding a personality successfully (21 ms)
    ✓ should handle missing personality name (8 ms)
    ✓ should handle registration errors (11 ms)
    ✓ should handle exceptions during registration (16 ms)
    ✓ should detect and prevent duplicate add commands via message tracker (9 ms)
    ✓ should block commands that already completed (11 ms)
    ✓ should block commands that already generated an embed (16 ms)
    ✓ should handle registration in DM channels (12 ms)
    ✓ should handle typing indicator errors gracefully (11 ms)
    ✓ should add alias information to the embed when provided (17 ms)
    ✓ should handle personality that already exists (10 ms)
    ✓ should automatically use display name as alias when no alias is provided (12 ms)
    ✓ should not set display name alias if it matches the full name (16 ms)
    ✓ should prefer explicit alias over display name (13 ms)
    ✓ should detect incomplete embeds (9 ms)
    ✓ should include @mention instructions in footer for server channels (15 ms)
    ✓ should include @mention instructions in footer for DM channels (10 ms)
    ✓ should use alternate alias in footer when display name conflicts (10 ms)

PASS tests/unit/core/personality/PersonalityManager.apiCompatibility.test.js
  PersonalityManager API Compatibility
    getPersonalityByAlias API
      ✓ should accept only one parameter (alias) (13 ms)
      ✓ should return personality when called with just alias (11 ms)
      ✓ should return null for unknown alias (17 ms)
      ✓ should ignore extra parameters if passed (12 ms)
      ✓ should handle null alias gracefully (11 ms)
      ✓ should handle undefined alias gracefully (9 ms)
    Error detection for wrong API usage
      ✓ should demonstrate the API mismatch issue (18 ms)
    Module exports API
      ✓ should export getPersonalityByAlias as a static method (13 ms)

PASS tests/unit/handlers/referenceHandler.test.js
  Reference Handler Module
    handleMessageReference
      ✓ should return false if message has no reference (3 ms)
      ✓ should ignore replies to webhooks from different bot instances (1 ms)
      ✓ should fetch and process a referenced webhook message with personality (2 ms)
      ✓ should handle replies to personalities with space-containing aliases (4 ms)
      ✓ should handle referenced messages with no personality (2 ms)
      ✓ should detect Discord message links in non-personality messages (7 ms)
      ✓ should handle errors when fetching referenced messages (2 ms)
    processMessageLinks
      ✓ should return unmodified content if messageContent is not a string (4 ms)
      ✓ should return unmodified content if no message link is present (3 ms)
      ✓ should return unmodified content if link is present but not replying to personality or mentioning (1 ms)
      ✓ should process a message link when replying to a personality webhook (3 ms)
      ✓ should process a message link when there is an active conversation (2 ms)
      ✓ should process a message link when triggered by a mention (2 ms)
      ✓ should process a linked webhook message and extract personality information (3 ms)
      ✓ should handle linked messages with embeds (4 ms)
      ✓ should handle linked messages with attachments (3 ms)
      ✓ should handle errors when processing linked messages (1 ms)
    processMessageLinks with reply scenarios
      ✓ should process Discord links from referenced message when replying with a mention (6 ms)
    parseEmbedsToText
      ✓ should return empty string for null or empty embeds array (3 ms)
      ✓ should correctly parse embed with title and description (3 ms)
      ✓ should correctly parse embed with fields (2 ms)
      ✓ should correctly parse embed with image and thumbnail (1 ms)
      ✓ should correctly parse embed with footer (2 ms)
      ✓ should correctly parse multiple embeds (2 ms)
    MESSAGE_LINK_REGEX
      ✓ should match standard discord.com link format (1 ms)
      ✓ should match ptb.discord.com link format (2 ms)
      ✓ should match canary.discord.com link format (2 ms)
      ✓ should match discordapp.com link format (2 ms)
      ✓ should not match invalid link formats (2 ms)

PASS tests/unit/conversationManager.test.js
  Conversation Manager
    recordConversation
      ✓ should record a conversation with a single message ID (4 ms)
      ✓ should record a conversation with multiple message IDs (2 ms)
    Auto-Response
      ✓ should enable auto-response for a user (4 ms)
      ✓ should disable auto-response for a user (3 ms)
      ✓ should not return an active personality if auto-response is disabled (3 ms)
    Channel Activation
      ✓ should activate a personality in a channel (2 ms)
      ✓ should deactivate a personality in a channel (3 ms)
      ✓ should return false when deactivating a channel with no active personality (2 ms)
    getPersonalityFromMessage
      ✓ should get a personality from a recorded message ID (7 ms)
      ✓ should fallback to webhook username if message ID is not found (4 ms)
      ✓ should handle case-insensitive webhook username matching (3 ms)
      ✓ should handle webhook naming pattern matching (2 ms)
      ✓ should return null if no matches are found (3 ms)
    clearConversation
      ✓ should clear a conversation for a user in a channel (4 ms)
      ✓ should return false if no conversation exists (2 ms)
      ✓ should handle multiple message IDs when clearing a conversation (2 ms)
    Conversation Timeout
      ✓ should simulate the effect of a stale conversation (3 ms)
      ✓ should not timeout recent conversations (2 ms)
    Data Persistence
      ✓ should save data when recording a conversation (4 ms)
      ✓ should save data when setting auto-response (3 ms)
      ✓ should save data when activating a personality in a channel (2 ms)
    DM Functionality
      ✓ should auto-enable auto-response for DM channels (6 ms)
      ✓ should use extended timeout for DM conversations (2 ms)
    getAllActivatedChannels
      ✓ should return all activated channels (12 ms)
      ✓ should return empty object when no channels are activated (11 ms)
    Error Handling
      ✓ should handle file system errors gracefully (10 ms)
      ✓ should handle file read errors other than ENOENT (16 ms)
      ✓ should handle invalid personality data gracefully (11 ms)
      ✓ should handle errors in personality lookup (10 ms)
    Legacy Support
      ✓ should support legacy lastMessageId in conversations (18 ms)
      ✓ should handle legacy message ID in clearConversation (9 ms)

2025-06-19 03:39:26 [31merror[39m: [AIService] API error with normal personality error-personality: Mock API error
2025-06-19 03:39:26 [31merror[39m: [ErrorTracker] CRITICAL AI_SERVICE: Mock API error (ERR-ai_-han-mc32lnx5-1ux)
2025-06-19 03:39:26 [31merror[39m: [AIService] API error with normal personality test-personality: Test error
2025-06-19 03:39:26 [31merror[39m: [ErrorTracker] CRITICAL AI_SERVICE: Test error (ERR-ai_-han-mc32lnyn-1zq)
2025-06-19 03:39:26 [31merror[39m: [AIService] Cannot make API request: User test-user is not authenticated
2025-06-19 03:39:26 [31merror[39m: [AIService] Empty content after sanitization from test-personality
2025-06-19 03:39:26 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:26 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:26 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:26 [31merror[39m: [AIService] Error context - User: user-123, Channel: channel-456
2025-06-19 03:39:26 [31merror[39m: [AIService] Sanitization error for test-personality: Sanitization failed
2025-06-19 03:39:26 [31merror[39m: [AIService] Error in content from test-personality: error_in_content
2025-06-19 03:39:26 [31merror[39m: [AIService] Error details: Unknown error format
2025-06-19 03:39:26 [31merror[39m: [AIService] Error content sample: Sanitization failed
2025-06-19 03:39:26 [31merror[39m: [AIService] Error context - User: user-123, Channel: channel-456
2025-06-19 03:39:26 [31merror[39m: [AIService] Invalid response structure from test-personality
2025-06-19 03:39:26 [31merror[39m: [AIService] Error in content from test-personality: empty_response
2025-06-19 03:39:26 [31merror[39m: [AIService] Error details: API returned empty or null content
2025-06-19 03:39:26 [31merror[39m: [AIService] Error content sample: Empty content
2025-06-19 03:39:26 [31merror[39m: [AIService] Error context - User: user-123, Channel: channel-456
2025-06-19 03:39:26 [31merror[39m: [AIService] Non-string content from test-personality: object
2025-06-19 03:39:26 [31merror[39m: [AIService] Non-string error from test-personality
2025-06-19 03:39:26 [31merror[39m: [AIService] Non-string content sample: {"unexpected":"object"}
2025-06-19 03:39:26 [31merror[39m: [ErrorTracker] CRITICAL API_CONTENT: Non-string API response: Content type: object (ERR-api-get-mc32lo04-7os)
PASS tests/unit/aiService.test.js
  AI Service
    isErrorResponse
      ✓ should return true for high confidence error patterns (12 ms)
      ✓ should return true for low confidence patterns with sufficient context (2 ms)
      ✓ should return false for normal responses even with error-like terms (3 ms)
      ✓ should return true for empty or null content (2 ms)
    Blackout Period Management
      ✓ should create a unique blackout key for a personality-user-channel combination (3 ms)
      ✓ should handle missing userId or channelId in context (3 ms)
      ✓ should add a personality to the blackout list (3 ms)
      ✓ should accept a custom duration when adding to blackout list (2 ms)
      ✓ should detect when a personality is in a blackout period (8 ms)
      ✓ should detect when a personality is not in a blackout period (3 ms)
    formatApiMessages
      ✓ should format a simple string message correctly (2 ms)
      ✓ should handle multimodal content array with image (2 ms)
      ✓ should handle multimodal content array with audio (3 ms)
      ✓ should not modify content array structure (2 ms)
      ✓ should preserve audio content in multimodal array (3 ms)
      ✓ should add speaker identification for PluralKit messages (3 ms)
      ✓ should NOT add speaker identification for regular users (3 ms)
      ✓ should add speaker identification to multimodal PluralKit messages (3 ms)
      ✓ should NOT add speaker identification to multimodal regular user messages (2 ms)
      ✓ should handle default userName parameter correctly (2 ms)
    createRequestId
      ✓ should create a unique request ID for tracking API requests (5 ms)
      ✓ should handle long messages by truncating to 50 characters (7 ms)
      ✓ should handle missing context values (3 ms)
      ✓ should handle multimodal content arrays with images (2 ms)
      ✓ should handle multimodal content arrays with audio (4 ms)
    getAiResponse
      ✓ should return a response from the AI service (4 ms)
      ✓ should handle empty or missing messages (4 ms)
      ✓ should handle missing personality name (2 ms)
      ✓ should track errors but not block API calls during blackout periods (4 ms)
      ✓ should prevent duplicate API calls for the same request (4 ms)
      ✓ should handle API errors gracefully (39 ms)
      ✓ should respect enhanced context feature flag (4 ms)
    Additional Coverage Tests
      ✓ should delegate initAiClient to aiAuth module (3 ms)
      ✓ should bypass authentication for recognized webhook users (3 ms)
      ✓ should handle authentication required errors from API (3 ms)
      ✓ should handle errors when logging message content fails (4 ms)
      ✓ should log reference with webhook name when available (4 ms)
      ✓ should log reference with author when no personality or webhook name (4 ms)
      ✓ should log reference as unknown-source when no identifying info (3 ms)
      ✓ should handle errors when logging reference details (3 ms)
      ✓ should throw error when AI client is not available (7 ms)
      ✓ should handle empty content after sanitization (18 ms)
      ✓ should handle sanitization errors (5 ms)
      ✓ should handle invalid response structure (4 ms)
      ✓ should handle non-string content from AI (5 ms)

PASS tests/unit/handlers/personalityHandler.test.js
  Personality Handler Module
    trackRequest
      ✓ should track a request and return request key (9 ms)
      ✓ should return null for duplicate requests (4 ms)
    startTypingIndicator
      ✓ should start typing indicator and return interval ID (4 ms)
      ✓ should handle errors when starting typing indicator (5 ms)
    recordConversationData
      ✓ should record conversation data for array of message IDs (8 ms)
      ✓ should record conversation data for single message ID (3 ms)
      ✓ should handle empty message IDs array (4 ms)
    handlePersonalityInteraction
      ✓ should check NSFW channel requirements (3 ms)
      ✓ should check authentication before age verification (3 ms)
      ✓ should auto-verify users in NSFW channels (3 ms)
      ✓ should require age verification in DMs without auto-verification (2 ms)
      ✓ should handle duplicate requests (3 ms)
      ✓ should start typing indicator (3 ms)
      ✓ should call getAiResponse with correct parameters (2 ms)
      ✓ should send response via webhookManager (3 ms)
      ✓ should handle error response markers (7 ms)
      ✓ should handle error messages from AI service (4 ms)
      ✓ should use direct thread message for threads (3 ms)
      ✓ should fall back to regular webhook if thread message fails (3 ms)
      ✓ should fall back to direct channel.send if all webhook methods fail (3 ms)
      ✓ should track errors and reply to user on failure (27 ms)
    PluralKit Integration
      ✓ should track PluralKit messages to the real user ID (2 ms)
      ✓ should pass isProxyMessage flag to AI service for PluralKit messages (4 ms)
      ✓ should handle regular users without proxy message formatting (4 ms)
      ✓ should use webhook options with real user ID for PluralKit (4 ms)
    PluralKit Authentication
      ✓ should check authentication for PluralKit proxy messages (6 ms)
      ✓ should allow authenticated PluralKit users to use personalities (4 ms)
      ✓ should not check PluralKit authentication for non-proxy messages (5 ms)
      ✓ should show custom error message for unauthenticated PluralKit users (3 ms)
    Markdown Image Link Processing
      ✓ should convert markdown image links to media handler format (3 ms)
      ✓ should handle multiple images but only process the last one (3 ms)
      ✓ should not modify responses without markdown image links (4 ms)
      ✓ should not process markdown links with mismatched URLs (4 ms)
      ✓ should handle various image formats (3 ms)
      ✓ should handle non-string AI responses gracefully (3 ms)
    Request Deduplication Error Recovery
      ✓ should remove request from tracking on AI service error to allow retries (4 ms)
      ✓ should remove request from tracking even when error reply fails (9 ms)
      ✓ should allow retry after error by not blocking subsequent requests (3 ms)
      ✓ should not remove request if trackRequest returns null (duplicate prevention) (3 ms)

PASS tests/unit/core/notifications/ReleaseNotificationManager.test.js
  ReleaseNotificationManager
    initialize
      ✓ should initialize with provided client (11 ms)
      ✓ should accept client in initialize method (3 ms)
      ✓ should throw error if no client provided (34 ms)
      ✓ should migrate authenticated users when authManager provided (3 ms)
      ✓ should handle error during user migration gracefully (2 ms)
      ✓ should not migrate users who already have preferences (2 ms)
      ✓ should handle empty auth tokens gracefully (2 ms)
      ✓ should clear saved version if no notifications have been sent (9 ms)
      ✓ should not clear saved version if notifications have been sent (2 ms)
      ✓ should not clear saved version if no version is saved (1 ms)
    checkAndNotify
      ✓ should not notify if no new version (2 ms)
      ✓ should not notify if GitHub release not found (2 ms)
      ✓ should not notify if no users opted in for change type (4 ms)
      ✓ should send notifications to opted-in users (5 ms)
      ✓ should handle notification failures gracefully (3 ms)
      ✓ should throw error if not initialized (2 ms)
    sendDMToUser
      ✓ should send DM to user (3 ms)
      ✓ should handle user not found (7 ms)
      ✓ should auto opt-out users with DMs disabled (3 ms)
    createReleaseEmbed
      ✓ should create embed with first notification message (1 ms)
      ✓ should create embed with implied consent message (2 ms)
      ✓ should create embed with standard message for users who interacted (2 ms)
      ✓ should add version comparison when lastVersion exists (2 ms)
      ✓ should add categorized changes (3 ms)
      ✓ should truncate long change lists (1 ms)
    getColorForChangeType
      ✓ should return correct colors (1 ms)
    getChangeTypeDescription
      ✓ should return correct descriptions (2 ms)
    getStatistics
      ✓ should return statistics from preferences (2 ms)
    Multi-release functionality
      ✓ should fetch multiple releases when versions have changed (3 ms)
      ✓ should create embed with multiple releases (21 ms)
      ✓ should aggregate changes from multiple releases (7 ms)
      ✓ should generate proper description for multiple releases (2 ms)
      ✓ should handle single release in multi-release flow (3 ms)
    First-run release fetching
      ✓ should fetch all releases on first run and limit to 5 (4 ms)
      ✓ should filter releases to only include those up to current version (3 ms)
      ✓ should use getReleasesBetween when lastVersion exists (2 ms)

PASS tests/unit/adapters/persistence/MemoryConversationRepository.test.js
  MemoryConversationRepository
    save
      ✓ should save a conversation (6 ms)
      ✓ should update indexes when saving (3 ms)
      ✓ should update last access time (3 ms)
      ✓ should enforce maximum conversation limit (4 ms)
      ✓ should handle save errors (31 ms)
    findById
      ✓ should find conversation by ID (10 ms)
      ✓ should update last access time when found (2 ms)
      ✓ should return null if not found (2 ms)
      ✓ should handle errors (3 ms)
    findActiveByUser
      ✓ should find active conversations for user (5 ms)
      ✓ should exclude conversations past TTL (4 ms)
      ✓ should return empty array for unknown user (2 ms)
      ✓ should handle errors (4 ms)
    findByMessageId
      ✓ should find conversation by message ID (3 ms)
      ✓ should update last access time when found (4 ms)
      ✓ should return null if message not found (8 ms)
      ✓ should return null if conversation deleted (3 ms)
      ✓ should handle errors (4 ms)
    findByPersonality
      ✓ should find all conversations with personality (5 ms)
      ✓ should return empty array for unknown personality (3 ms)
      ✓ should handle errors (3 ms)
    delete
      ✓ should delete conversation and all indexes (2 ms)
      ✓ should handle deleting non-existent conversation (3 ms)
      ✓ should handle errors (3 ms)
    cleanupExpired
      ✓ should cleanup ended conversations before expiry date (4 ms)
      ✓ should cleanup conversations past TTL (3 ms)
      ✓ should handle errors (9 ms)
    getStats
      ✓ should return repository statistics (2 ms)
    clear
      ✓ should clear all data (3 ms)

PASS tests/unit/domain/ai/AIRequest.test.js
  AIRequest
    constructor
      ✓ should require AIRequestId (22 ms)
      ✓ should initialize with AIRequestId (3 ms)
    create
      ✓ should create new AI request (9 ms)
      ✓ should emit AIRequestCreated event (3 ms)
      ✓ should accept referenced content (2 ms)
      ✓ should use default model if not provided (3 ms)
      ✓ should validate UserId (4 ms)
      ✓ should validate PersonalityId (2 ms)
      ✓ should validate AIContent (3 ms)
      ✓ should validate AIModel (2 ms)
      ✓ should validate content compatibility with model (2 ms)
    markSent
      ✓ should mark request as sent (4 ms)
      ✓ should emit AIRequestSent event (8 ms)
      ✓ should allow sending from retrying status (2 ms)
      ✓ should reject if already sent (3 ms)
      ✓ should reject if completed (5 ms)
    recordResponse
      ✓ should record successful response (3 ms)
      ✓ should emit AIResponseReceived event (2 ms)
      ✓ should validate response content (3 ms)
      ✓ should require sent status (3 ms)
    recordFailure
      ✓ should record request failure (4 ms)
      ✓ should emit AIRequestFailed event (3 ms)
      ✓ should mark as non-retryable (2 ms)
      ✓ should reject if already completed (6 ms)
      ✓ should reject if already failed (5 ms)
    scheduleRetry
      ✓ should schedule retry (3 ms)
      ✓ should emit AIRequestRetried event (3 ms)
      ✓ should require failed status (3 ms)
      ✓ should enforce maximum retry attempts (4 ms)
    recordRateLimit
      ✓ should record rate limit (5 ms)
      ✓ should emit AIRequestRateLimited event (4 ms)
    canRetry
      ✓ should return true for retryable failure (2 ms)
      ✓ should return false for non-retryable failure (2 ms)
      ✓ should return false after max attempts (3 ms)
      ✓ should return false for non-failed status (7 ms)
    getResponseTime
      ✓ should return response time in milliseconds (2 ms)
      ✓ should return null if not sent (2 ms)
      ✓ should return null if not completed (1 ms)
    event sourcing
      ✓ should rebuild state from events (3 ms)
    toJSON
      ✓ should serialize to JSON (4 ms)
      ✓ should handle null values (2 ms)

PASS tests/unit/domain/conversation/Conversation.test.js
  Conversation
    constructor
      ✓ should require ConversationId (22 ms)
      ✓ should initialize with ConversationId (3 ms)
    start
      ✓ should start new conversation with message and personality (4 ms)
      ✓ should emit ConversationStarted event (6 ms)
      ✓ should start without personality (2 ms)
      ✓ should use DM settings for DM conversations (2 ms)
      ✓ should validate ConversationId (3 ms)
      ✓ should validate Message (2 ms)
      ✓ should validate PersonalityId (2 ms)
    addMessage
      ✓ should add message to conversation (2 ms)
      ✓ should emit MessageAdded event (3 ms)
      ✓ should reject invalid message (3 ms)
      ✓ should reject adding to ended conversation (4 ms)
      ✓ should end conversation if timed out (7 ms)
    assignPersonality
      ✓ should assign new personality (2 ms)
      ✓ should emit PersonalityAssigned event (3 ms)
      ✓ should not emit event if same personality (3 ms)
      ✓ should reject invalid PersonalityId (3 ms)
      ✓ should reject if conversation ended (3 ms)
    updateSettings
      ✓ should update settings (2 ms)
      ✓ should emit ConversationSettingsUpdated event (3 ms)
      ✓ should not emit event if settings unchanged (3 ms)
      ✓ should reject invalid settings (3 ms)
      ✓ should reject if conversation ended (3 ms)
    end
      ✓ should end conversation (7 ms)
      ✓ should emit ConversationEnded event (4 ms)
      ✓ should not emit event if already ended (2 ms)
      ✓ should mark as timeout if timed out (2 ms)
    isTimedOut
      ✓ should return false for active conversation (3 ms)
      ✓ should return true after timeout period (2 ms)
      ✓ should return false for ended conversation (2 ms)
    shouldAutoRespond
      ✓ should return false immediately after user message (4 ms)
      ✓ should return true after auto-response delay (2 ms)
      ✓ should return false if auto-response disabled (2 ms)
      ✓ should return false after personality message (2 ms)
      ✓ should return false for ended conversation (3 ms)
    getLastMessage
      ✓ should return last message (3 ms)
      ✓ should return null for empty conversation (3 ms)
    getRecentMessages
      ✓ should return recent messages with limit (4 ms)
      ✓ should return all messages if less than limit (2 ms)
    event sourcing
      ✓ should rebuild state from events (2 ms)
    toJSON
      ✓ should serialize conversation to JSON (3 ms)

PASS tests/unit/commands/handlers/purgbot.test.js
  PurgBot Command
    ✓ should have the correct metadata (31 ms)
    ✓ should reject use outside of DM channels (23 ms)
    ✓ should reject invalid category (10 ms)
    ✓ should purge system messages by default (19 ms)
    ✓ should purge all bot messages with "all" category (13 ms)
    ✓ should explicitly purge system messages with "system" category (16 ms)
    ✓ should handle the case when no messages are found to delete (11 ms)
    ✓ should handle message deletion failures (12 ms)
    ✓ should handle fetch errors gracefully (16 ms)

PASS tests/unit/domain/authentication/UserAuth.test.js
  UserAuth
    constructor
      ✓ should require UserId (25 ms)
      ✓ should initialize with UserId (2 ms)
    authenticate
      ✓ should create authenticated user (3 ms)
      ✓ should emit UserAuthenticated event (3 ms)
      ✓ should validate UserId (2 ms)
      ✓ should validate Token (2 ms)
    refreshToken
      ✓ should refresh token (2 ms)
      ✓ should emit UserTokenRefreshed event (3 ms)
      ✓ should reject if user blacklisted (3 ms)
      ✓ should reject invalid token (8 ms)
      ✓ should reject expired token (3 ms)
    expireToken
      ✓ should expire token (2 ms)
      ✓ should emit UserTokenExpired event (2 ms)
      ✓ should require existing token (4 ms)
    verifyNsfw
      ✓ should verify NSFW access (3 ms)
      ✓ should emit UserNsfwVerified event (2 ms)
      ✓ should accept custom verification time (3 ms)
      ✓ should not emit event if already verified (2 ms)
      ✓ should reject if user blacklisted (3 ms)
    clearNsfwVerification
      ✓ should clear NSFW verification (3 ms)
      ✓ should emit UserNsfwVerificationCleared event (6 ms)
      ✓ should not emit event if already unverified (2 ms)
    blacklist
      ✓ should blacklist user (3 ms)
      ✓ should emit UserBlacklisted event (3 ms)
      ✓ should require reason (4 ms)
      ✓ should reject if already blacklisted (2 ms)
    unblacklist
      ✓ should remove from blacklist (2 ms)
      ✓ should emit UserUnblacklisted event (3 ms)
      ✓ should reject if not blacklisted (4 ms)
    isAuthenticated
      ✓ should return true for valid authentication (3 ms)
      ✓ should return false for expired token (2 ms)
      ✓ should return false for blacklisted user (6 ms)
      ✓ should return false for user without token (4 ms)
      ✓ should accept custom current time (2 ms)
    canAccessNsfw
      ✓ should allow NSFW in DMs without verification (2 ms)
      ✓ should require verification for NSFW channels (2 ms)
      ✓ should return false if not authenticated (2 ms)
      ✓ should return false if NSFW verification is stale (2 ms)
    getRateLimit
      ✓ should return default rate limit (3 ms)
      ✓ should return 0 for blacklisted users (2 ms)
    event sourcing
      ✓ should rebuild state from events (2 ms)
    toJSON
      ✓ should serialize to JSON (2 ms)
      ✓ should handle null token (2 ms)

PASS tests/unit/core/authentication/AuthManager.test.js
  AuthManager
    Constructor
      ✓ should initialize with provided configuration (6 ms)
      ✓ should create all sub-modules (4 ms)
      ✓ should use environment variables when config not provided (5 ms)
    initialize
      ✓ should initialize all components and load data (5 ms)
      ✓ should clean up expired tokens on startup (4 ms)
      ✓ should schedule periodic cleanup (5 ms)
      ✓ should handle initialization errors (28 ms)
    getAuthorizationUrl
      ✓ should delegate to UserTokenManager (4 ms)
    exchangeCodeForToken
      ✓ should exchange code and store token (5 ms)
      ✓ should handle exchange failure (3 ms)
      ✓ should handle exchange errors (3 ms)
    deleteUserToken
      ✓ should delete token and save (4 ms)
      ✓ should handle delete failure (4 ms)
    storeNsfwVerification
      ✓ should store verification and save (7 ms)
      ✓ should handle save errors (3 ms)
    getAIClient
      ✓ should get authenticated client for user with token (4 ms)
      ✓ should get bypass client for webhook (3 ms)
      ✓ should get default client when no token (4 ms)
      ✓ should handle errors and return default client (3 ms)
    validation methods
      ✓ should validate personality access (4 ms)
      ✓ should get user auth status (4 ms)
      ✓ should get auth help message (8 ms)
    status checks
      ✓ should check if user has valid token (4 ms)
      ✓ should check if user is NSFW verified (4 ms)
      ✓ should get token info (4 ms)
      ✓ should get user token (3 ms)
      ✓ should get token age (3 ms)
    shutdown
      ✓ should clear interval and save data (4 ms)
      ✓ should handle shutdown when not initialized (4 ms)
    performScheduledCleanup
      ✓ should perform cleanup and save if tokens removed (3 ms)
      ✓ should handle cleanup errors (9 ms)
    cleanupExpiredTokens
      ✓ should cleanup and save tokens (4 ms)
      ✓ should not save if no tokens cleaned (4 ms)
    getStatistics
      ✓ should return system statistics (3 ms)

PASS tests/unit/domain/personality/Alias.test.js
  Alias
    constructor
      ✓ should create valid alias (4 ms)
      ✓ should preserve original case (2 ms)
      ✓ should reject empty string (15 ms)
      ✓ should reject null (3 ms)
      ✓ should reject undefined (2 ms)
      ✓ should reject non-string values (6 ms)
    length validation
      ✓ should accept single character alias (2 ms)
      ✓ should accept 50 character alias (2 ms)
      ✓ should reject alias longer than 50 characters (3 ms)
    whitespace handling
      ✓ should reject leading spaces (2 ms)
      ✓ should reject trailing spaces (2 ms)
      ✓ should reject both leading and trailing spaces (2 ms)
      ✓ should accept spaces within the alias (1 ms)
      ✓ should reject whitespace-only string (1 ms)
    case handling
      ✓ should store lowercase for matching (1 ms)
      ✓ should preserve original case (2 ms)
      ✓ should handle mixed case (2 ms)
    toJSON
      ✓ should serialize to JSON with both values (7 ms)
      ✓ should serialize correctly when original is all lowercase (1 ms)
    fromString
      ✓ should create Alias from string (1 ms)
      ✓ should apply same validation rules (3 ms)
    value object equality
      ✓ should be equal for same value regardless of case (3 ms)
      ✓ should not be equal for different values (2 ms)
      ✓ should handle null/undefined gracefully (2 ms)
      ✓ should handle non-Alias objects (2 ms)
    real-world aliases
      ✓ should accept common personality aliases (2 ms)
      ✓ should handle emoji aliases (2 ms)
      ✓ should handle unicode aliases (2 ms)

PASS tests/unit/webhook/threadHandler.test.js
  threadHandler
    sendDirectThreadMessage
      ✓ should validate channel is a thread (35 ms)
      ✓ should handle null channel (3 ms)
      ✓ should fetch webhooks from parent channel (9 ms)
      ✓ should create webhook if none exists (4 ms)
      ✓ should use existing webhook if found (3 ms)
      ✓ should process media in content (3 ms)
      ✓ should handle media processing errors gracefully (3 ms)
      ✓ should split long messages into chunks (8 ms)
      ✓ should add delay between chunks (3 ms)
      ✓ should try thread_id parameter first (4 ms)
      ✓ should fallback to webhook.thread() method if thread_id fails (2 ms)
      ✓ should fallback to channel.send() if all webhook methods fail (4 ms)
      ✓ should include files and embeds in last chunk only (3 ms)
      ✓ should skip duplicate messages (2 ms)
      ✓ should handle missing parent channel (3 ms)
      ✓ should handle webhook creation failure (3 ms)
      ✓ should propagate error if first chunk fails after all fallbacks (2 ms)
      ✓ should continue with remaining chunks if non-first chunk fails (4 ms)

PASS tests/unit/auth.test.js
  auth
    Core Authentication
      getAuthorizationUrl
        ✓ should generate correct authorization URL (6 ms)
      exchangeCodeForToken
        ✓ should exchange code for token successfully (4 ms)
        ✓ should handle exchange errors (20 ms)
      getUserToken
        ✓ should return stored token for user (3 ms)
        ✓ should return null for unknown user (9 ms)
      deleteUserToken
        ✓ should remove user token (3 ms)
        ✓ should handle deleting non-existent token (3 ms)
    Token Expiration
      Token validity checks
        ✓ should validate non-expired tokens (4 ms)
        ✓ should invalidate expired tokens (4 ms)
      Token cleanup
        ✓ should clean up expired tokens on check (3 ms)
        ✓ should clean up multiple expired tokens (4 ms)
    Authentication Enforcement
      ✓ should require authentication for non-owner users (3 ms)
      ✓ should allow owner to bypass authentication (4 ms)
      ✓ should enforce authentication for personality operations (3 ms)
    NSFW Verification
      storeNsfwVerification
        ✓ should store NSFW verification status (8 ms)
        ✓ should handle file write errors (5 ms)
      isNsfwVerified
        ✓ should check NSFW verification status (4 ms)
        ✓ should return false for unverified users (3 ms)
        ✓ should respect verification expiry (3 ms)
        ✓ should return false for user with false verification (3 ms)
    File operations
      ✓ should create data directory on init (4 ms)
      ✓ should handle file read errors gracefully (2 ms)
    InitAuth operations
      ✓ should setup cleanup interval (18 ms)

PASS tests/unit/webhook/messageUtils.test.js
  messageUtils
    getStandardizedUsername
      ✓ should return Bot for null personality (3 ms)
      ✓ should return Bot for undefined personality (8 ms)
      ✓ should prioritize displayName when available (3 ms)
      ✓ should trim whitespace from displayName (2 ms)
      ✓ should handle empty displayName (2 ms)
      ✓ should add bot suffix when available (1 ms)
      ✓ should handle bot tag without suffix (1 ms)
      ✓ should remove discriminator from suffix (1 ms)
      ✓ should truncate long names to fit 32 character limit (1 ms)
      ✓ should truncate long names with suffix properly (2 ms)
      ✓ should handle very long suffix gracefully (2 ms)
      ✓ should extract name from fullName when displayName missing (2 ms)
      ✓ should capitalize extracted name (2 ms)
      ✓ should use fullName without hyphens when short enough (7 ms)
      ✓ should handle fullName without hyphens that needs truncation (1 ms)
      ✓ should handle missing global client (2 ms)
      ✓ should handle missing user in client (1 ms)
      ✓ should handle missing tag in user (3 ms)
      ✓ should handle errors gracefully (2 ms)
      ✓ should return Bot with suffix when personality is empty (2 ms)
      ✓ should handle personality with only empty strings (1 ms)
      ✓ should properly format bot suffix spacing (2 ms)
    generateMessageTrackingId
      ✓ should generate unique IDs (2 ms)
      ✓ should include personality name in ID (2 ms)
      ✓ should include channel ID in ID (1 ms)
      ✓ should handle null personality (2 ms)
      ✓ should handle missing fullName (3 ms)
      ✓ should include timestamp (2 ms)
    prepareMessageData
      ✓ should create basic message data (2 ms)
      ✓ should add threadId for thread messages (2 ms)
      ✓ should handle legacy embed format (5 ms)
      ✓ should pass through other options (2 ms)
      ✓ should not include embed property in final data (3 ms)
      ✓ should handle null avatar URL (2 ms)
      ✓ should handle empty additional options (1 ms)
    createVirtualResult
      ✓ should create virtual result with personality (2 ms)
      ✓ should handle null personality (2 ms)
      ✓ should generate unique virtual IDs (2 ms)
      ✓ should use getStandardizedUsername for author name (1 ms)
    sendMessageChunk
      ✓ should send message via webhook (4 ms)
      ✓ should resolve avatar URL from personality (3 ms)
      ✓ should log chunk information (2 ms)
      ✓ should retry without thread_id if thread error occurs (2 ms)
      ✓ should send error message for invalid form body (24 ms)
      ✓ should throw original error if error message also fails (4 ms)
      ✓ should throw error for non-form body errors (2 ms)
      ✓ should handle missing username in error retry (3 ms)
    Console output utilities
      ✓ minimizeConsoleOutput should return empty object (1 ms)
      ✓ restoreConsoleOutput should be a no-op (2 ms)

PASS tests/unit/bot.features.test.js
  Bot Features
    Mention Handling
      ✓ should match standard mentions without spaces (3 ms)
      ✓ should match @mentions with spaces (4 ms)
      ✓ should find both mentions in a message with multiple @mentions (3 ms)
      ✓ should match @mentions at the end of messages (2 ms)
      ✓ should match @mentions at the very end of the message with no space (2 ms)
      ✓ should match @mentions at the end of messages with punctuation (2 ms)
      ✓ should match @mentions followed by punctuation (3 ms)
      ✓ should match multi-word @mentions at the end with punctuation (3 ms)
      ✓ should match @mentions with parentheses (8 ms)
      ✓ should match @mentions with multiple words (2 ms)
      ✓ should handle @mentions with apostrophes and special characters (2 ms)
      ✓ should capture the full multi-word mention when part of it could be a valid mention too (2 ms)
      ✓ should simulate the improved implementation logic that prioritizes longest matches (3 ms)
      @Mention Removal
        ✓ should remove a standard @mention from message content (3 ms)
        ✓ should remove a multi-word @mention from message content (2 ms)
        ✓ should preserve other @mentions when removing the triggering one (2 ms)
        ✓ should not modify content when triggeringMention is null (2 ms)
        ✓ should handle special regex characters in mentions (1 ms)
        ✓ should handle multiple instances of the same mention (2 ms)
        ✓ should handle mentions at the beginning of content (3 ms)
        ✓ should handle mentions at the end of content (6 ms)
        ✓ should handle mentions with apostrophes and special characters (2 ms)
        ✓ should handle empty content gracefully (2 ms)
        ✓ should only remove exact matches for the triggering mention (2 ms)
      Selective @Mention Removal
        ✓ should remove a mention from the beginning of a message (3 ms)
        ✓ should remove a mention from the end of a message (3 ms)
        ✓ should NOT remove a mention from the middle of a message (2 ms)
        ✓ should handle a multi-word mention at the beginning of a message (2 ms)
        ✓ should handle a multi-word mention at the end of a message (1 ms)
        ✓ should NOT remove a multi-word mention from the middle of a message (1 ms)
        ✓ should handle mentions with special characters at beginning or end only (2 ms)
        ✓ should handle both beginning and end mentions in the same message (3 ms)
        ✓ should preserve other mentions when removing from beginning/end (6 ms)
        ✓ should work with punctuation after the mention (2 ms)
        ✓ should preserve punctuation when removing a mention at the end (2 ms)
        ✓ should handle unusual spacing properly (1 ms)
        ✓ should handle message consisting of only the mention (2 ms)
    Deduplication
      ✓ should generate unique signatures for different message replies (3 ms)
      ✓ should detect duplicate messages based on time window (2 ms)
      ✓ should track processed messages using Set (3 ms)
      ✓ should patch Message.prototype.reply to prevent duplicates (3 ms)
      ✓ should prevent duplicate replies to the same message (3 ms)
      ✓ should track replies per message ID (3 ms)
    Error Filtering
      ✓ should filter webhook messages containing error patterns (7 ms)
      ✓ should filter messages with the ERROR_MESSAGE_PREFIX marker (2 ms)
      ✓ should handle errors during message deletion (2 ms)
      ✓ should pass through normal webhook messages (2 ms)
      ✓ should pass through non-webhook messages (3 ms)
      ✓ should check for multiple error patterns (5 ms)
      ✓ should pass through events other than messageCreate (2 ms)
      ✓ should prevent duplicate replies to the same message (3 ms)
      ✓ should track replies per message ID (2 ms)
    Embed Handling
      ✓ should detect incomplete embed with raw display name (4 ms)
      ✓ should detect incomplete embed with "Not set" display name (9 ms)
      ✓ should detect incomplete embed with missing thumbnail (2 ms)
      ✓ should not detect complete embed with proper display name and thumbnail (2 ms)
      ✓ should ignore non-personality embeds (2 ms)
      ✓ should handle embeds with zeevat pattern in display name (3 ms)
      ✓ should detect display names containing Hebrew word connectors (-ani-, -ha-, -ve-) (2 ms)
      ✓ should detect any display name with kebab-case ID format (1 ms)
      ✓ should not detect proper capitalized display names with hyphens (2 ms)
      ✓ should detect embeds with fields other than Display Name missing (1 ms)
      ✓ should handle embed with no fields array (1 ms)
      ✓ should handle empty fields array (1 ms)
      ✓ should handle properly formatted display name but missing thumbnail (3 ms)
      ✓ should handle null or empty thumbnail URL (3 ms)
      ✓ should detect embeds with uppercase internal IDs (1 ms)
      ✓ should handle completely empty or malformed embeds (5 ms)
      ✓ should attempt to delete incomplete embeds (2 ms)

PASS tests/unit/commands/handlers/activate.test.js
  Activate Command Handler
    ✓ should have the correct metadata (10 ms)
    ✓ should activate a personality with a simple name (11 ms)
    ✓ should activate a personality by alias (13 ms)
    ✓ should activate a personality with a multi-word name (9 ms)
    ✓ should handle the case where the user has insufficient permissions (7 ms)
    ✓ should handle the case where no personality name is provided (14 ms)
    ✓ should handle the case where the personality is not found (10 ms)
    ✓ should not allow activation in DM channels (8 ms)
    ✓ should not allow activation in non-NSFW channels (14 ms)
    ✓ should handle activation errors properly (9 ms)

PASS tests/unit/commands/handlers/deactivate.test.js
  Deactivate Command Handler
    ✓ should have the correct metadata (9 ms)
    ✓ should not allow deactivation in DM channels (17 ms)
    ✓ should check for permission to manage messages (8 ms)
    ✓ should successfully deactivate a personality (8 ms)
    ✓ should handle errors from deactivatePersonality (14 ms)
    ✓ should handle unexpected errors (8 ms)

PASS tests/unit/adapters/discord/DiscordWebhookAdapter.test.js
  DiscordWebhookAdapter
    sendMessage
      ✓ should send message through webhook (7 ms)
      ✓ should use cached webhook if available (3 ms)
      ✓ should create webhook if none exists (11 ms)
      ✓ should handle attachments (3 ms)
      ✓ should handle replies with reference (4 ms)
      ✓ should truncate long content (2 ms)
      ✓ should format username correctly (3 ms)
      ✓ should truncate long usernames (3 ms)
      ✓ should handle send errors (18 ms)
    editMessage
      ✓ should edit message through webhook (3 ms)
      ✓ should fetch webhook if not cached (2 ms)
      ✓ should throw error if no webhook found (3 ms)
      ✓ should handle edit errors (9 ms)
    deleteMessage
      ✓ should delete message through webhook (2 ms)
      ✓ should fetch webhook if not cached (2 ms)
      ✓ should throw error if no webhook found (3 ms)
      ✓ should handle delete errors (2 ms)
    supportsWebhooks
      ✓ should return true for guild text channel (2 ms)
      ✓ should return true for guild voice channel (2 ms)
      ✓ should return true for guild news channel (2 ms)
      ✓ should return true for guild stage voice channel (3 ms)
      ✓ should return false for DM channel (1 ms)
      ✓ should return false for thread channel (1 ms)
      ✓ should return false on error (2 ms)
    cache management
      ✓ should clear cache for specific channel (2 ms)
      ✓ should clear entire cache (8 ms)
    _getOrCreateWebhook
      ✓ should find existing webhook by name and owner (2 ms)
      ✓ should handle channel not found (15 ms)

PASS tests/unit/utils/media/imageHandler.test.js
  imageHandler
    hasImageExtension
      ✓ should return true for URLs with image extensions (6 ms)
      ✓ should return true for filenames with image extensions (2 ms)
      ✓ should return false for URLs with non-image extensions (3 ms)
      ✓ should return false for URLs without extensions (2 ms)
    isImageUrl
      ✓ should return true for valid image URLs (4 ms)
      ✓ should return false for invalid URLs (3 ms)
      ✓ should return false when the server returns an error status (3 ms)
      ✓ should check content-type if available (2 ms)
    extractImageUrls
      ✓ should extract image URLs from content (9 ms)
      ✓ should return an empty array for content without image URLs (3 ms)
      ✓ should handle empty or non-string content (2 ms)
    downloadImageFile
      ✓ should download and process an image file (3 ms)
      ✓ should handle download errors (17 ms)
      ✓ should generate a filename if none can be extracted from URL (3 ms)
    processImageUrls
      ✓ should extract and process image URLs from content (4 ms)
      ✓ should return original content when no image URLs are found (3 ms)
      ✓ should handle download errors and return original content (2 ms)
      ✓ should only process the first image URL if multiple are present (4 ms)

PASS tests/unit/core/notifications/GitHubReleaseClient.test.js
  GitHubReleaseClient
    getReleaseByTag
      ✓ should fetch release data from GitHub (6 ms)
      ✓ should add v prefix if not present (3 ms)
      ✓ should cache release data (2 ms)
      ✓ should refetch after cache expires (3 ms)
      ✓ should return null for 404 responses (2 ms)
      ✓ should throw error for other HTTP errors (21 ms)
      ✓ should handle network errors (17 ms)
    getReleasesBetween
      ✓ should return empty array on error (4 ms)
    formatReleaseNotes
      ✓ should format release notes for Discord (2 ms)
      ✓ should truncate long release notes (3 ms)
      ✓ should handle missing release notes (2 ms)
      ✓ should handle null release (2 ms)
      ✓ should respect includeFullNotes parameter (3 ms)
      ✓ should fetch releases between two versions (4 ms)
      ✓ should handle version tags with and without v prefix (2 ms)
      ✓ should skip draft and prerelease versions (2 ms)
      ✓ should handle API errors gracefully (3 ms)
      ✓ should fetch single release if end version not found in list (9 ms)
      ✓ should return empty array if direct fetch also fails (2 ms)
    parseReleaseChanges
      ✓ should parse release notes into categories (3 ms)
      ✓ should handle various section headers (3 ms)
      ✓ should handle missing sections (3 ms)
      ✓ should handle null or empty release (3 ms)
      ✓ should handle bullet points with different markers (1 ms)
      ✓ should categorize Changed section as other, not breaking (2 ms)
    clearCache
      ✓ should clear the release cache (2 ms)

PASS tests/unit/core/conversation/MessageHistory.test.js
  MessageHistory
    getPersonalityFromMessage
      ✓ should return personality from conversation tracker if found (20 ms)
      ✓ should fallback to webhook username lookup if not in tracker (3 ms)
      ✓ should return null if no personality found (3 ms)
    _getPersonalityFromWebhookUsername
      webhook username with pipe character
        ✓ should extract base name before pipe and match personality (4 ms)
        ✓ should handle webhook username with multiple pipes (5 ms)
        ✓ should trim whitespace around extracted base name (4 ms)
        ✓ should match using webhook pattern regex (4 ms)
      exact matching
        ✓ should find exact match with full webhook username (4 ms)
        ✓ should find exact match with extracted base name (5 ms)
      case-insensitive matching
        ✓ should match case-insensitively with full username (4 ms)
        ✓ should match case-insensitively with base name (46 ms)
        ✓ should handle Hebrew characters in webhook username (4 ms)
      error handling
        ✓ should handle getAllPersonalities returning null (4 ms)
        ✓ should handle getAllPersonalities returning non-array (4 ms)
        ✓ should handle personalities with missing displayName (4 ms)
        ✓ should handle null personality entries (5 ms)
        ✓ should handle personality module throwing error (4 ms)
      no matches found
        ✓ should return null when no personalities match (3 ms)
        ✓ should return null for empty webhook username (1 ms)
        ✓ should return null when no personalities exist (1 ms)
      special characters in personality names
        ✓ should escape special regex characters in display name (1 ms)
        ✓ should handle display names with parentheses (1 ms)
      priority of matching strategies
        ✓ should prefer exact match over case-insensitive match (1 ms)
        ✓ should prefer base name match over pattern match (1 ms)

PASS tests/unit/aiService.reference.test.js
  AI Service Reference Message Handling
    sanitizeApiText
      ✓ should handle empty input (1 ms)
      ✓ should pass through long text (sanitization disabled) (1 ms)
      ✓ should minimally sanitize problematic characters (1 ms)
    formatApiMessages with referenced messages
      ✓ should properly format text-only referenced messages from users (4 ms)
      ✓ should properly format text-only referenced messages from the bot (3 ms)
      ✓ should handle problematic content in referenced messages (3 ms)
      ✓ should handle image references (11 ms)
      ✓ should handle audio references (3 ms)
      ✓ should handle references to the same personality (2 ms)
      ✓ should handle references to different personalities (3 ms)
      ✓ should handle user self-references with first person format (2 ms)
      ✓ should handle user self-references with audio (scenario 3.2) (3 ms)
      ✓ should handle user self-references with audio (scenario 5.2) (4 ms)
      ✓ should handle user self-references using user IDs (3 ms)
      ✓ should not treat as self-reference when user IDs differ (1 ms)
      ✓ should fall back to username comparison when user IDs are not available (1 ms)
      ✓ should use personalityDisplayName when displayName is not available (2 ms)
      ✓ should handle DM personality format references correctly (8 ms)
      ✓ should not include reference when replying to same personality recently (2 ms)

PASS tests/unit/domain/authentication/Token.test.js
  Token
    constructor
      ✓ should create token with value and expiration (3 ms)
      ✓ should require value (18 ms)
      ✓ should require value to be string (4 ms)
      ✓ should require expiration date (4 ms)
      ✓ should require expiration to be Date (3 ms)
      ✓ should require future expiration (2 ms)
      ✓ should reject expiration at current time (2 ms)
    isExpired
      ✓ should return false for valid token (2 ms)
      ✓ should return true for expired token (9 ms)
      ✓ should handle exact expiration time (2 ms)
      ✓ should accept custom current time (2 ms)
    timeUntilExpiration
      ✓ should return remaining time (2 ms)
      ✓ should return 0 for expired token (2 ms)
      ✓ should accept custom current time (2 ms)
    shouldRefresh
      ✓ should return false when plenty of time remains (4 ms)
      ✓ should return true when approaching expiration (2 ms)
      ✓ should use custom threshold (2 ms)
      ✓ should return true for expired token (2 ms)
      ✓ should accept custom current time (2 ms)
    extend
      ✓ should create new token with extended expiration (2 ms)
      ✓ should maintain immutability (9 ms)
    toString
      ✓ should mask token value (2 ms)
      ✓ should handle short tokens (2 ms)
    toJSON
      ✓ should serialize to JSON (2 ms)
    fromJSON
      ✓ should deserialize from JSON (1 ms)
      ✓ should handle date string conversion (3 ms)
    createWithLifetime
      ✓ should create token with lifetime (3 ms)
      ✓ should handle zero lifetime (2 ms)
      ✓ should handle negative lifetime (2 ms)
    immutability
      ✓ should not be affected by JSON modifications (2 ms)
      ✓ should share date reference (current implementation) (1 ms)

PASS tests/unit/utils/embedBuilders.test.js
  embedBuilders
    createPersonalityAddedEmbed
      ✓ should create basic personality added embed (5 ms)
      ✓ should handle personality without display name (3 ms)
      ✓ should handle personality without alias (5 ms)
      ✓ should handle personality with same display name as full name (4 ms)
      ✓ should add valid avatar URL as thumbnail (4 ms)
      ✓ should not add invalid avatar URL (3 ms)
    createPersonalityListEmbed
      ✓ should handle invalid user ID (11 ms)
      ✓ should handle non-array return from listPersonalitiesForUser (3 ms)
      ✓ should create empty list embed (4 ms)
      ✓ should create single page personality list (5 ms)
      ✓ should include aliases in personality list (4 ms)
      ✓ should handle pagination (4 ms)
      ✓ should handle invalid page numbers (4 ms)
      ✓ should handle personalityAliases as object instead of Map (5 ms)
      ✓ should handle invalid personality objects (4 ms)
      ✓ should handle error in personality processing (8 ms)
    createListEmbed
      ✓ should create basic list embed (6 ms)
      ✓ should handle personalities without displayName (3 ms)
      ✓ should show navigation for multi-page lists (4 ms)
      ✓ should handle error during creation (3 ms)
    createPersonalityInfoEmbed
      ✓ should create basic personality info embed (7 ms)
      ✓ should handle personality without aliases (3 ms)
      ✓ should handle personality without display name (3 ms)
    createStatusEmbed
      ✓ should create status embed with all fields (6 ms)
      ✓ should handle default verification status (4 ms)
    createHelpEmbed
      ✓ should create help embed for regular user (9 ms)
      ✓ should include admin commands for admin user (5 ms)
      ✓ should include bot prefix in commands (3 ms)
    formatUptime
      ✓ should format milliseconds to uptime string (3 ms)
      ✓ should handle zero values (3 ms)
      ✓ should handle partial values (5 ms)
      ✓ should handle large values (4 ms)

PASS tests/unit/domain/personality/PersonalityProfile.test.js
  PersonalityProfile
    constructor
      external mode (legacy/API)
        ✓ should create empty external profile (5 ms)
        ✓ should create external profile with display fields (2 ms)
        ✓ should explicitly create external mode profile (2 ms)
      local mode (self-managed)
        ✓ should create local profile with external API data (2 ms)
        ✓ should auto-detect local mode from user_prompt (2 ms)
        ✓ should handle voice config in local mode (1 ms)
      parameter-based construction (legacy)
        ✓ should create external profile with name only (1 ms)
        ✓ should create local profile with prompt (4 ms)
      validation
        ✓ should validate display name type (28 ms)
        ✓ should validate avatar URL type (2 ms)
        ✓ should validate error message type (4 ms)
        ✓ should validate prompt type (3 ms)
    withDisplayName
      ✓ should create new profile with updated display name (2 ms)
      ✓ should preserve other fields (1 ms)
    withAvatarUrl
      ✓ should create new profile with updated avatar URL (1 ms)
    withErrorMessage
      ✓ should create new profile with updated error message (2 ms)
    isComplete
      ✓ should return true when all fields are present (1 ms)
      ✓ should return false when missing display name (1 ms)
      ✓ should return false when missing avatar URL (3 ms)
      ✓ should return false when missing error message (2 ms)
      ✓ should return false for empty profile (1 ms)
    toJSON
      ✓ should serialize external mode profile (2 ms)
      ✓ should serialize local mode profile (6 ms)
      ✓ should serialize minimal external profile (2 ms)
    createEmpty
      ✓ should create profile with all null fields (3 ms)
    fromJSON
      ✓ should create profile from JSON data (2 ms)
      ✓ should handle null data (2 ms)
      ✓ should handle undefined data (2 ms)
      ✓ should handle partial data (1 ms)
    value object equality
      ✓ should be equal for same values (2 ms)
      ✓ should not be equal for different display names (1 ms)
      ✓ should not be equal for different avatar URLs (1 ms)
      ✓ should be equal for all null values (3 ms)
    fromApiResponse
      ✓ should create external profile from API response (2 ms)
      ✓ should handle alternative field names (1 ms)
    fromBackupData
      ✓ should create local profile from backup data (6 ms)
    needsApiRefresh
      ✓ should return false for local mode (2 ms)
      ✓ should return true for external mode with no lastFetched (2 ms)
      ✓ should return true for stale external profile (3 ms)
      ✓ should return false for fresh external profile (1 ms)
      ✓ should respect custom stale threshold (1 ms)
    isLocallyManaged
      ✓ should return true for local mode (1 ms)
      ✓ should return false for external mode (1 ms)

PASS tests/unit/healthCheck.test.js
  healthCheck
    getUptime
      ✓ should calculate uptime correctly (5 ms)
      ✓ should return 0 immediately after start (2 ms)
      ✓ should handle large uptimes (4 ms)
    formatUptime
      ✓ should format uptime with all units (4 ms)
      ✓ should format zero uptime (2 ms)
      ✓ should format uptime with only seconds (3 ms)
      ✓ should format uptime with multiple days (3 ms)
      ✓ should handle edge cases correctly (4 ms)
    getMemoryUsage
      ✓ should return formatted memory usage (3 ms)
      ✓ should handle small memory values (3 ms)
      ✓ should calculate memory usage percentage correctly (8 ms)
    getSystemInfo
      ✓ should return system information (3 ms)
      ✓ should handle different CPU counts (2 ms)
      ✓ should handle different memory values (3 ms)
    createHealthServer
      ✓ should create HTTP server on specified port (3 ms)
      ✓ should respond to /health endpoint with 200 (6 ms)
      ✓ should respond to /health/ endpoint (with trailing slash) (4 ms)
      ✓ should return 404 for non-health endpoints (3 ms)
      ✓ should return 200 for degraded status (3 ms)
      ✓ should handle errors in health check generation (7 ms)
      ✓ should log health check requests (7 ms)
      ✓ should handle server errors (3 ms)
      ✓ should use default port when not specified (6 ms)
      ✓ should check Discord status correctly when connected (3 ms)
      ✓ should check Discord status correctly when not ready (4 ms)
      ✓ should handle missing Discord client (4 ms)
      ✓ should handle missing ping value (6 ms)
      ✓ should handle missing uptime value (4 ms)
      ✓ should check AI status (4 ms)
      ✓ should return overall ok status when all components are healthy (12 ms)
      ✓ should return degraded status when one component is unhealthy (3 ms)

PASS tests/unit/application/commands/utility/HelpCommand.test.js
  HelpCommand
    Command Creation
      ✓ should create command with correct metadata (4 ms)
    General Help
      ✓ should display all commands grouped by category (5 ms)
      ✓ should hide admin commands for non-admin users (4 ms)
      ✓ should show admin commands for admin users (4 ms)
      ✓ should hide owner commands for non-owner users (2 ms)
      ✓ should show owner commands for owner (2 ms)
      ✓ should provide text fallback when embeds not supported (2 ms)
    Specific Command Help
      ✓ should show detailed help for a specific command (10 ms)
      ✓ should work with command option instead of args (3 ms)
      ✓ should show unknown command message for non-existent command (3 ms)
      ✓ should show admin restriction message for admin commands (3 ms)
      ✓ should show command-specific detailed help (4 ms)
      ✓ should show choices for command options (2 ms)
      ✓ should work with command aliases (1 ms)
    Error Handling
      ✓ should handle registry errors gracefully (2 ms)
    Helper Functions
      getCategoryForCommand
        ✓ should categorize personality commands correctly (2 ms)
        ✓ should categorize conversation commands correctly (1 ms)
        ✓ should categorize authentication commands correctly (1 ms)
        ✓ should categorize admin commands correctly (2 ms)
        ✓ should default to Utility for other commands (3 ms)
      getCommandSpecificHelp
        ✓ should provide auth command specific help (2 ms)
        ✓ should provide debug command specific help (7 ms)
        ✓ should provide add command specific help (2 ms)
        ✓ should return empty string for commands without specific help (3 ms)

PASS tests/unit/core/authentication/AuthPersistence.test.js
  AuthPersistence
    Constructor
      ✓ should initialize with custom data directory (4 ms)
      ✓ should use default data directory when none provided (2 ms)
    ensureDataDir
      ✓ should create directory if it does not exist (3 ms)
      ✓ should handle directory creation errors (21 ms)
    loadUserTokens
      ✓ should load tokens from file (4 ms)
      ✓ should return empty object when file does not exist (3 ms)
      ✓ should handle JSON parse errors (2 ms)
      ✓ should handle read errors (2 ms)
    saveUserTokens
      ✓ should save tokens to file (2 ms)
      ✓ should handle write errors (2 ms)
      ✓ should handle empty tokens object (2 ms)
    loadNsfwVerifications
      ✓ should load verifications from file (8 ms)
      ✓ should return empty object when file does not exist (3 ms)
      ✓ should handle JSON parse errors (2 ms)
    saveNsfwVerifications
      ✓ should save verifications to file (3 ms)
      ✓ should handle write errors (3 ms)
    getFileStats
      ✓ should return file statistics (2 ms)
      ✓ should handle non-existent files (2 ms)
      ✓ should handle stat errors gracefully (2 ms)
    createBackup
      ✓ should create backup of authentication data (3 ms)
      ✓ should handle missing files during backup (2 ms)
    deleteAllData
      ✓ should delete all data when confirmed (4 ms)
      ✓ should not delete without confirmation (3 ms)
      ✓ should handle file not existing during deletion (1 ms)
    Data integrity
      ✓ should preserve data structure when saving and loading tokens (2 ms)

PASS tests/unit/middleware.test.js
  Middleware System
    MiddlewareManager
      use
        ✓ should add middleware function to pipeline (2 ms)
        ✓ should throw error for non-function middleware (27 ms)
      execute
        ✓ should execute middleware in sequence (4 ms)
        ✓ should stop pipeline on early return (2 ms)
        ✓ should stop pipeline when middleware returns false (2 ms)
        ✓ should handle middleware errors gracefully (9 ms)
        ✓ should make a copy of context to avoid mutation (2 ms)
      validationMiddleware
        ✓ should skip validation when not required (2 ms)
        ✓ should validate command with named parameters (2 ms)
        ✓ should return early on validation failure (4 ms)
        ✓ should handle commands without validation rules (3 ms)
      convertArgsToNamedParams
        ✓ should convert array args to named params (3 ms)
        ✓ should handle missing optional parameters (3 ms)
        ✓ should handle extra arguments (3 ms)
        ✓ should handle complex commands with multiple required params (3 ms)
        ✓ should return raw args for unknown commands (3 ms)
    createLoggingMiddleware
      ✓ should log command execution (4 ms)
    createPermissionMiddleware
      ✓ should allow command when permission check passes (4 ms)
      ✓ should return early when permission check fails (2 ms)
    createRateLimitMiddleware
      ✓ should allow requests within rate limit (11 ms)
      ✓ should block requests exceeding rate limit (3 ms)
      ✓ should reset rate limit after time window (3 ms)
      ✓ should track rate limits per user and command (4 ms)
      ✓ should use default values when not specified (2 ms)

PASS tests/unit/utils/errorTracker.test.js
  errorTracker
    trackError
      ✓ should track a basic error with default context (24 ms)
      ✓ should track a critical error with custom context (4 ms)
      ✓ should track frequent errors and increase log level (4 ms)
      ✓ should cleanup old errors after cache lifetime (3 ms)
      ✓ should handle errors with all error categories (7 ms)
      ✓ should cleanup multiple old errors when triggered (5 ms)
    createEnhancedWebhookClient
      ✓ should wrap webhook client methods with error tracking (3 ms)
      ✓ should track errors when webhook methods fail (12 ms)
      ✓ should truncate long message content in error metadata (3 ms)
      ✓ should handle non-object arguments correctly (3 ms)
    createEnhancedError
      ✓ should create an error with enhanced metadata (10 ms)
      ✓ should track enhanced errors as non-critical by default (2 ms)
    ErrorCategory
      ✓ should export all expected error categories (2 ms)
    edge cases
      ✓ should handle errors without stack traces (2 ms)
      ✓ should handle errors with empty messages (2 ms)
      ✓ should handle very long operation names in error ID generation (2 ms)
      ✓ should handle concurrent error tracking (6 ms)
      ✓ should handle null and undefined in context metadata (7 ms)
      ✓ should handle errors with undefined properties (2 ms)

PASS tests/unit/application/services/ComparisonTester.test.js
  ComparisonTester
    compare
      ✓ should return match when both operations return same result (7 ms)
      ✓ should detect mismatch when results differ (3 ms)
      ✓ should handle errors in both operations (18 ms)
      ✓ should detect mismatch when only one operation errors (3 ms)
      ✓ should respect timeout option (3 ms)
      ✓ should log discrepancies when configured (4 ms)
      ✓ should throw on mismatch when configured (19 ms)
    compareMultiple
      ✓ should compare multiple operations in parallel (3 ms)
      ✓ should handle failures in individual comparisons (2 ms)
    _deepCompare
      ✓ should handle nested objects (2 ms)
      ✓ should handle arrays (3 ms)
      ✓ should ignore specified fields (3 ms)
      ✓ should skip timestamp fields when compareTimestamps is false (3 ms)
      ✓ should use custom comparators (3 ms)
      ✓ should detect missing keys (5 ms)
    getStatistics
      ✓ should calculate statistics correctly (5 ms)
      ✓ should handle empty statistics (2 ms)
    getDiscrepancies
      ✓ should return all discrepancies (11 ms)
    clear
      ✓ should clear all results and discrepancies (4 ms)
    singleton behavior
      ✓ should return same instance (3 ms)
      ✓ should reset instance (1 ms)

PASS tests/unit/utils/media/mediaHandler.test.js
  Media Handler
    processMediaUrls
      ✓ should return original content when input is invalid (5 ms)
      ✓ should prioritize audio over image processing (3 ms)
      ✓ should process images if no audio found (3 ms)
      ✓ should return original content when no media found by handlers (3 ms)
      ✓ should handle errors gracefully (14 ms)
    prepareAttachmentOptions
      ✓ should return empty object for empty attachments (3 ms)
      ✓ should convert attachments to Discord.js format (2 ms)
    processMediaForWebhook
      ✓ should call processMediaUrls with the same parameters (2 ms)
    detectMedia
      ✓ should return original content when no media found (4 ms)
      [Audio: url] pattern detection
        ✓ should detect audio URL in content (4 ms)
        ✓ should remove audio URL from message content (2 ms)
        ✓ should add default prompt when audio URL with no text (2 ms)
      [Image: url] pattern detection
        ✓ should detect image URL in content (3 ms)
        ✓ should not detect image if audio already found (3 ms)
        ✓ should add default prompt when image URL with no text (3 ms)
      Message attachments
        ✓ should detect audio attachment (3 ms)
        ✓ should detect audio by file extension when contentType missing (8 ms)
        ✓ should detect image attachment (4 ms)
        ✓ should prioritize audio over image attachments (4 ms)
      Embed media detection
        ✓ should detect audio URL in embed description (2 ms)
        ✓ should detect audio URL in embed fields (2 ms)
        ✓ should detect image in embed (2 ms)
        ✓ should detect thumbnail in embed when no image (2 ms)
        ✓ should prioritize audio over images in embeds (3 ms)
      Multimodal content handling
        ✓ should preserve existing multimodal array with text (4 ms)
        ✓ should handle empty multimodal array (2 ms)
        ✓ should copy text elements from multimodal array (2 ms)
        ✓ should add default prompt when no text in multimodal array (2 ms)
      Edge cases
        ✓ should handle null/undefined message content (2 ms)
        ✓ should skip warning when audio found before image (normal flow) (4 ms)
        ✓ should handle malformed audio URL patterns (7 ms)
        ✓ should handle referenced media options (always false) (2 ms)
        ✓ should handle empty attachments collection (2 ms)
        ✓ should handle empty embeds array (2 ms)
        ✓ should skip embeds with no relevant media fields (3 ms)

PASS tests/unit/bot.nested.reference.test.js
  Nested Reference Handling
    ✓ should handle nested references without modifying message content (4 ms)
    ✓ should handle nested references when original message is empty (9 ms)
    ✓ should handle missing nested referenced message gracefully (4 ms)
    ✓ should handle nested reference fetch errors gracefully (2 ms)
    ✓ should not add synthetic link if referenced message has no reference (2 ms)
    ✓ should work with DM channels using @me in the link (2 ms)

PASS tests/unit/deduplicationMonitor.test.js
  Deduplication Monitor
    trackDedupe
      ✓ should track message deduplication (5 ms)
      ✓ should track operation deduplication (2 ms)
      ✓ should handle unknown types (1 ms)
      ✓ should accumulate multiple dedupes (10 ms)
      ✓ should track by channel (3 ms)
      ✓ should track by hour (1 ms)
      ✓ should log each event in development mode (2 ms)
      ✓ should log periodically in production mode (2 ms)
      ✓ should force log when requested (2 ms)
    getDedupStats
      ✓ should return current statistics (4 ms)
      ✓ should calculate runtime in minutes (3 ms)
      ✓ should calculate dedupes per minute (2 ms)
      ✓ should handle zero runtime (1 ms)
    logStats
      ✓ should log basic statistics (1 ms)
      ✓ should log top channels in production (10 ms)
      ✓ should handle no channel stats in production (3 ms)
    saveStats
      ✓ should save statistics to file (2 ms)
      ✓ should handle interval callback execution (3 ms)
    startMonitoring
      ✓ should start periodic logging (2 ms)
      ✓ should register SIGINT handler (3 ms)
      ✓ should save stats on SIGINT (4 ms)
      ✓ should periodically log stats (2 ms)
      ✓ should call interval callback periodically (2 ms)
    resetStats
      ✓ should reset all statistics (3 ms)
      ✓ should update start time on reset (1 ms)
    production vs development behavior
      ✓ should detect production mode from NODE_ENV (3 ms)

PASS tests/unit/webhook/dmHandler.test.js
  dmHandler
    sendFormattedMessageInDM
      ✓ should format message with personality display name (5 ms)
      ✓ should use fullName when displayName is missing (4 ms)
      ✓ should handle personality with no hyphen in fullName (2 ms)
      ✓ should fallback to Bot when no name available (2 ms)
      ✓ should process media URLs in content (10 ms)
      ✓ should handle media processing errors gracefully (3 ms)
      ✓ should handle multimodal content array (2 ms)
      ✓ should send image when no audio in multimodal content (3 ms)
      ✓ should handle empty multimodal text content (2 ms)
      ✓ should handle referenced media markers (3 ms)
      ✓ should handle audio reference markers (4 ms)
      ✓ should split long messages into chunks (3 ms)
      ✓ should add delay between chunks (2 ms)
      ✓ should include embeds in last chunk only (2 ms)
      ✓ should handle media attachments in last chunk (2 ms)
      ✓ should add delay between media messages (2 ms)
      ✓ should handle errors when sending multimodal audio (9 ms)
      ✓ should handle errors when sending multimodal image (2 ms)
      ✓ should return structured result with all message IDs (3 ms)
      ✓ should handle channel send errors (18 ms)
      ✓ should handle invalid reference media markers (3 ms)
      ✓ should handle reference markers with colons in URL (5 ms)

PASS tests/unit/commandProcessor.test.js
  Command Processor
    processCommand
      ✓ should process a valid command successfully (7 ms)
      ✓ should handle middleware validation errors (2 ms)
      ✓ should handle middleware early returns without error (2 ms)
      ✓ should handle generic errors from middleware (1 ms)
      ✓ should handle exceptions during processing (1 ms)
      ✓ should pass additional options to middleware context (2 ms)
      ✓ should use validated args from middleware if available (3 ms)
      ✓ should handle DM messages without guild (3 ms)
    registerCommandHandler
      ✓ should register a valid command handler (7 ms)
      ✓ should throw error for missing command name (24 ms)
      ✓ should throw error for non-string command name (2 ms)
      ✓ should throw error for non-function handler (2 ms)
      ✓ should register permission middleware for commands with permissions (2 ms)
    createDirectSend
      ✓ should create a function that sends messages (2 ms)
      ✓ should handle send errors gracefully (2 ms)
      ✓ should handle embed objects (2 ms)
    handleUnknownCommand
      ✓ should send unknown command message (4 ms)
      ✓ should handle send errors (2 ms)
    createHelpText
      ✓ should create basic help text (2 ms)
      ✓ should include usage if provided (2 ms)
      ✓ should include description if provided (1 ms)
      ✓ should include examples if provided (8 ms)
      ✓ should create complete help text with all options (2 ms)
      ✓ should handle empty examples array (1 ms)
    middleware integration
      ✓ should export middlewareManager (2 ms)
      ✓ should handle middleware setup errors gracefully (2 ms)

PASS tests/unit/domain/conversation/Message.test.js
  Message
    constructor
      ✓ should create message with all required fields (10 ms)
      ✓ should create user message without personalityId (2 ms)
      ✓ should default isFromPersonality to false (2 ms)
      ✓ should default optional properties (3 ms)
    validation
      ✓ should require id (20 ms)
      ✓ should require id to be string (4 ms)
      ✓ should require content (3 ms)
      ✓ should require content to be string (3 ms)
      ✓ should require authorId (4 ms)
      ✓ should require authorId to be string (9 ms)
      ✓ should require timestamp (2 ms)
      ✓ should require timestamp to be Date (2 ms)
      ✓ should require channelId (4 ms)
      ✓ should require channelId to be string (3 ms)
    isFromUser
      ✓ should return true for user messages (2 ms)
      ✓ should return false for personality messages (2 ms)
    isDM
      ✓ should return true for DM messages (2 ms)
      ✓ should return false for guild messages (2 ms)
    isReply
      ✓ should return true for reply messages (2 ms)
      ✓ should return false for forwarded messages (2 ms)
      ✓ should return false for messages without reference (7 ms)
    hasAttachments
      ✓ should return true when message has attachments (1 ms)
      ✓ should return false when message has no attachments (1 ms)
    hasImages
      ✓ should return true when message has image attachments (1 ms)
      ✓ should return false when message has non-image attachments (2 ms)
    hasAudio
      ✓ should return true when message has audio attachments (3 ms)
      ✓ should return false when message has non-audio attachments (2 ms)
    getMentionedUsers
      ✓ should return mentioned user IDs (2 ms)
      ✓ should return empty array when no mentions (2 ms)
    getAge
      ✓ should return age in milliseconds (2 ms)
      ✓ should handle old messages (1 ms)
    isExpired
      ✓ should return false for fresh messages (2 ms)
      ✓ should return true for expired messages (3 ms)
      ✓ should handle exact timeout boundary (7 ms)
    toJSON
      ✓ should serialize to JSON (2 ms)
      ✓ should handle null personalityId (1 ms)
    fromJSON
      ✓ should deserialize from JSON (4 ms)
      ✓ should handle timestamp string conversion (3 ms)
    immutability
      ✓ should not be affected by JSON modifications (2 ms)

PASS tests/unit/core/notifications/UserPreferencesPersistence.test.js
  UserPreferencesPersistence
    load
      ✓ should load preferences from file (4 ms)
      ✓ should start fresh if file does not exist (4 ms)
      ✓ should throw error for other file read errors (19 ms)
    getUserPreferences
      ✓ should return default preferences for new user (9 ms)
      ✓ should return stored preferences for existing user (4 ms)
      ✓ should merge defaults with partial stored preferences (3 ms)
    updateUserPreferences
      ✓ should update preferences and trigger save (3 ms)
      ✓ should preserve createdAt when updating existing user (2 ms)
    save (debounced)
      ✓ should debounce multiple save calls (3 ms)
      ✓ should save preferences to file (3 ms)
    forceSave
      ✓ should save immediately without debouncing (3 ms)
      ✓ should cancel pending debounced save (2 ms)
    setOptOut
      ✓ should set opt-out status (2 ms)
      ✓ should allow opting back in (8 ms)
    setNotificationLevel
      ✓ should set valid notification levels (5 ms)
      ✓ should reject invalid notification levels (10 ms)
    recordNotification
      ✓ should record last notified version (4 ms)
    getUsersToNotify
      ✓ should return users for major changes (3 ms)
      ✓ should return users for minor changes (2 ms)
      ✓ should return users for patch changes (2 ms)
      ✓ should handle users with default notification level (1 ms)
    getStatistics
      ✓ should return correct statistics (3 ms)
      ✓ should handle empty preferences (3 ms)
    hasAnyUserBeenNotified
      ✓ should return false when no users have been notified (2 ms)
      ✓ should return true when at least one user has been notified (6 ms)
      ✓ should return false for empty preferences (1 ms)

PASS tests/unit/application/commands/utility/PurgbotCommand.test.js
  PurgbotCommand
    metadata
      ✓ should have correct command metadata (4 ms)
    DM restriction
      ✓ should reject non-DM channels (4 ms)
    category validation
      ✓ should accept system category (4 ms)
      ✓ should accept all category (3 ms)
      ✓ should default to system category (3 ms)
      ✓ should reject invalid category (2 ms)
      ✓ should work with options instead of args (9 ms)
    isPersonalityMessage
      ✓ should identify personality messages (1 ms)
      ✓ should identify non-personality messages (2 ms)
      ✓ should handle messages without content (2 ms)
    filterMessagesByCategory
      ✓ should filter system messages only (2 ms)
      ✓ should filter all bot messages (3 ms)
      ✓ should exclude command message (3 ms)
      ✓ should exclude user messages (2 ms)
    message purging
      ✓ should purge system messages successfully (3 ms)
      ✓ should purge all bot messages when requested (2 ms)
      ✓ should handle no messages to delete (3 ms)
      ✓ should handle delete failures gracefully (3 ms)
      ✓ should schedule self-destruct of status message (9 ms)
      ✓ should handle self-destruct failures gracefully (2 ms)
    platform handling
      ✓ should show not implemented for non-Discord platforms (1 ms)
    error handling
      ✓ should handle fetch errors gracefully (2 ms)
      ✓ should handle missing channel gracefully (4 ms)
      ✓ should handle unexpected errors (3 ms)
    text-only fallback
      ✓ should handle text-only response when embeds not supported (2 ms)
    factory function
      ✓ should create command with default dependencies (3 ms)
      ✓ should create command with custom dependencies (2 ms)

PASS tests/unit/utils/media/audioHandler.test.js
  audioHandler
    hasAudioExtension
      ✓ should return true for valid audio extensions (3 ms)
      ✓ should return true for URLs with audio extensions (3 ms)
      ✓ should return false for non-audio extensions (3 ms)
      ✓ should return false for empty or invalid input (2 ms)
      ✓ should return false for invalid URLs with audio extensions (1 ms)
    isAudioUrl
      ✓ should return true for URLs with audio extensions when trustExtensions is true (3 ms)
      ✓ should validate URL by fetching when trustExtensions is false (15 ms)
      ✓ should return false for invalid URL format (2 ms)
      ✓ should return false when server returns non-OK status (3 ms)
      ✓ should handle octet-stream content type (5 ms)
      ✓ should return true for audio extension even with fetch error when trustExtensions is true (2 ms)
      ✓ should use injected timers for timeout (2 ms)
    extractAudioUrls
      ✓ should extract audio URLs from text (3 ms)
      ✓ should handle URLs with query parameters (2 ms)
      ✓ should categorize Discord CDN URLs (1 ms)
      ✓ should categorize files domain URLs (2 ms)
      ✓ should return empty array for no audio URLs (7 ms)
      ✓ should handle empty or invalid input (2 ms)
    downloadAudioFile
      ✓ should download audio file successfully (3 ms)
      ✓ should generate filename when URL has no extension (2 ms)
      ✓ should use appropriate extension based on content type (5 ms)
      ✓ should handle download errors (18 ms)
      ✓ should handle network errors (12 ms)
      ✓ should clean filename from query parameters (4 ms)
      ✓ should use injected timers for timeout (2 ms)
    createDiscordAttachment
      ✓ should create a Discord attachment from an audio file (2 ms)
      ✓ should convert ArrayBuffer to Buffer correctly (10 ms)
    processAudioUrls
      ✓ should process audio URLs and return updated content with attachments (6 ms)
      ✓ should return original content and empty attachments if no audio URLs found (3 ms)
      ✓ should handle download errors gracefully (3 ms)
      ✓ should process only the first audio URL (4 ms)
      ✓ should handle invalid input gracefully (2 ms)

PASS tests/unit/application/eventHandlers/PersonalityEventLogger.test.js
  PersonalityEventLogger
    Constructor
      ✓ should create an instance (2 ms)
    handlePersonalityCreated
      ✓ should log personality creation with correct information (4 ms)
      ✓ should handle personality creation with minimal data (2 ms)
      ✓ should handle personality creation with special characters in name (8 ms)
      ✓ should complete successfully and return undefined (2 ms)
    handlePersonalityProfileUpdated
      ✓ should log personality profile update with correct information (3 ms)
      ✓ should handle profile update with long personality name (2 ms)
      ✓ should handle profile update with minimal event data (2 ms)
      ✓ should complete successfully and return undefined (1 ms)
    handlePersonalityRemoved
      ✓ should log personality removal with correct information (1 ms)
      ✓ should handle personality removal with empty payload (1 ms)
      ✓ should handle personality removal with null payload (2 ms)
      ✓ should complete successfully and return undefined (1 ms)
    handlePersonalityAliasAdded
      ✓ should log alias addition with correct information (2 ms)
      ✓ should handle alias addition with special characters (1 ms)
      ✓ should handle alias addition with long names (2 ms)
      ✓ should handle alias addition with empty string alias (6 ms)
      ✓ should complete successfully and return undefined (2 ms)
    handlePersonalityAliasRemoved
      ✓ should log alias removal with correct information (2 ms)
      ✓ should handle alias removal with unicode characters (3 ms)
      ✓ should handle alias removal with minimal data (2 ms)
      ✓ should handle alias removal with undefined payload values (2 ms)
      ✓ should complete successfully and return undefined (1 ms)
    Event Handler Integration
      ✓ should handle all event types consistently (2 ms)
      ✓ should handle concurrent event processing (3 ms)
      ✓ should maintain consistent logging format across all handlers (2 ms)
    Error Handling and Edge Cases
      ✓ should handle events with missing aggregateId (2 ms)
      ✓ should handle events with null aggregateId (2 ms)
      ✓ should handle events with missing payload properties (2 ms)
      ✓ should handle events with missing nested properties gracefully (29 ms)

PASS tests/unit/commands/handlers/alias.test.js
  Alias Command Handler
    ✓ should have the correct metadata (10 ms)
    ✓ should show the correct usage when not enough arguments are provided (10 ms)
    ✓ should set an alias for an existing personality (14 ms)
    ✓ should show error when personality is not found (10 ms)
    ✓ should handle avatar thumbnails when available (9 ms)
    ✓ should handle personalities without avatars (13 ms)
    ✓ should handle errors from the setPersonalityAlias function (9 ms)
    ✓ should handle unexpected errors (8 ms)

PASS tests/unit/core/api/ProfileInfoFetcher.test.js
  ProfileInfoFetcher (core/api)
    Basic functionality
      ✓ should fetch profile info successfully (8 ms)
      ✓ should use cache on second call (8 ms)
      ✓ should handle API errors (4 ms)
    Rate limiting behavior
      ✓ should use rate limiter for requests (2 ms)
      ✓ should handle rate limit retries (2 ms)
    Error handling
      ✓ should handle client errors gracefully (3 ms)
      ✓ should handle rate limiter errors (3 ms)
    Concurrent requests
      ✓ should handle multiple concurrent requests (5 ms)
      ✓ should deduplicate identical concurrent requests (4 ms)

PASS tests/unit/utils/embedUtils.test.js
  embedUtils
    parseEmbedsToText
      ✓ should return empty string for null or empty embeds (4 ms)
      ✓ should parse embed with title only (2 ms)
      ✓ should parse embed with description only (1 ms)
      ✓ should parse embed with fields (8 ms)
      ✓ should parse embed with image (2 ms)
      ✓ should parse embed with thumbnail (2 ms)
      ✓ should parse embed with footer (1 ms)
      ✓ should parse complex embed with all fields (2 ms)
      ✓ should handle multiple embeds (2 ms)
      ✓ should handle embeds with missing properties gracefully (2 ms)
    extractMediaFromEmbeds
      ✓ should return default object for null or empty embeds (2 ms)
      ✓ should extract audio URL from embed description (1 ms)
      ✓ should extract audio URLs with different extensions (3 ms)
      ✓ should extract audio URL with query parameters (2 ms)
      ✓ should extract audio URL from embed fields (7 ms)
      ✓ should extract image URL from embed image (1 ms)
      ✓ should extract image URL from embed thumbnail (1 ms)
      ✓ should prioritize audio over images by default (2 ms)
      ✓ should only extract image when not prioritizing audio (2 ms)
      ✓ should extract image when no audio present and not prioritizing audio (2 ms)
      ✓ should handle multiple embeds and return first match (1 ms)
      ✓ should prefer image over thumbnail (2 ms)
      ✓ should handle malformed URLs gracefully (1 ms)
    detectPersonalityInEmbed
      ✓ should return null for null or undefined embed (2 ms)
      ✓ should return null for embed without description (1 ms)
      ✓ should return null for non-string description (2 ms)
      ✓ should detect personality with simple format (3 ms)
      ✓ should detect personality with display name format (3 ms)
      ✓ should handle names with special characters (2 ms)
      ✓ should not detect personality without proper format (5 ms)
      ✓ should handle complex display names with multiple pipes (2 ms)
      ✓ should handle empty name gracefully (2 ms)
    extractDiscordLinksFromEmbeds
      ✓ should return empty array for null or empty embeds (2 ms)
      ✓ should extract link from embed description (3 ms)
      ✓ should extract link from embed title (2 ms)
      ✓ should extract link from embed fields (1 ms)
      ✓ should extract link from embed footer (1 ms)
      ✓ should handle multiple links and remove duplicates (2 ms)
      ✓ should handle PTB and Canary Discord URLs (1 ms)
      ✓ should handle discordapp.com URLs (2 ms)
      ✓ should not extract non-Discord links (1 ms)
      ✓ should handle embeds with missing properties gracefully (1 ms)

2025-06-19 03:39:35 [31merror[39m: [CommandIntegrationAdapter] New system error: Test error
2025-06-19 03:39:35 [31merror[39m: [CommandIntegrationAdapter] Error processing command: Test error
PASS tests/unit/adapters/CommandIntegrationAdapter.test.js
  CommandIntegrationAdapter
    initialization
      ✓ should initialize command integration on first use (14 ms)
      ✓ should not initialize twice (2 ms)
      ✓ should handle concurrent initialization (4 ms)
    command routing
      ✓ should route to legacy system when feature flag is disabled (4 ms)
      ✓ should route to new system when feature flag is enabled (3 ms)
      ✓ should check personality category flag (3 ms)
      ✓ should check conversation category flag (4 ms)
      ✓ should check authentication category flag (4 ms)
      ✓ should check utility category flag (8 ms)
      ✓ should use legacy for commands not in new system (3 ms)
      ✓ should handle command-specific feature flags (3 ms)
    error handling
      ✓ should return error response on exception (19 ms)
      ✓ should fall back to legacy on error if flag enabled (3 ms)
    slash command registration
      ✓ should skip registration if feature flag disabled (3 ms)
      ✓ should register slash commands if enabled (2 ms)
    command list
      ✓ should return new commands marked as new (3 ms)

PASS tests/unit/domain/personality/PersonalityId.test.js
  PersonalityId
    constructor
      ✓ should create valid PersonalityId (2 ms)
      ✓ should trim whitespace (1 ms)
      ✓ should reject empty string (12 ms)
      ✓ should reject null (2 ms)
      ✓ should reject undefined (2 ms)
      ✓ should reject non-string values (2 ms)
    length validation
      ✓ should reject IDs shorter than 2 characters (2 ms)
      ✓ should reject IDs longer than 100 characters (8 ms)
      ✓ should accept IDs at boundary lengths (1 ms)
    character validation
      ✓ should accept alphanumeric characters (1 ms)
      ✓ should accept spaces (1 ms)
      ✓ should accept hyphens (2 ms)
      ✓ should accept underscores (1 ms)
      ✓ should accept periods (1 ms)
      ✓ should reject special characters (5 ms)
    reserved names
      ✓ should reject reserved name: system (2 ms)
      ✓ should reject reserved name case-insensitive: SYSTEM (1 ms)
      ✓ should reject reserved name: bot (1 ms)
      ✓ should reject reserved name case-insensitive: BOT (2 ms)
      ✓ should reject reserved name: admin (7 ms)
      ✓ should reject reserved name case-insensitive: ADMIN (3 ms)
      ✓ should reject reserved name: owner (2 ms)
      ✓ should reject reserved name case-insensitive: OWNER (1 ms)
      ✓ should reject reserved name: moderator (2 ms)
      ✓ should reject reserved name case-insensitive: MODERATOR (2 ms)
      ✓ should reject reserved name: mod (1 ms)
      ✓ should reject reserved name case-insensitive: MOD (1 ms)
      ✓ should reject reserved name: help (1 ms)
      ✓ should reject reserved name case-insensitive: HELP (3 ms)
      ✓ should accept names containing reserved words (2 ms)
    toJSON
      ✓ should return string value (1 ms)
    fromString
      ✓ should create PersonalityId from string (2 ms)
      ✓ should apply same validation rules (6 ms)
    value object equality
      ✓ should be equal for same values (1 ms)
      ✓ should not be equal for different values (2 ms)

PASS tests/unit/utils/avatarManager.test.js
  Avatar Manager
    validateAvatarUrl
      ✓ should return false for empty URL (3 ms)
      ✓ should return false for null URL (2 ms)
      ✓ should return false for invalid URL format (8 ms)
      ✓ should return true for Discord CDN URLs without validation (2 ms)
      ✓ should validate non-Discord URLs (2 ms)
      ✓ should track errors for invalid images (2 ms)
      ✓ should trust URLs with image extensions on error (2 ms)
    getValidAvatarUrl
      ✓ should return null for empty URL (2 ms)
      ✓ should return URL if valid (1 ms)
      ✓ should return null if invalid (2 ms)
    warmupAvatarUrl
      ✓ should return null for empty URL (4 ms)
      ✓ should return cached URL without fetching (2 ms)
      ✓ should skip warmup for Discord CDN URLs (1 ms)
      ✓ should skip warmup for known domains with image extensions (2 ms)
      ✓ should fetch and validate URL (2 ms)
      ✓ should handle non-OK response with image extension (8 ms)
      ✓ should handle timeout errors gracefully (3 ms)
      ✓ should retry on failure when URL becomes invalid (2 ms)
      ✓ should return null after retries exhausted (2 ms)
    preloadPersonalityAvatar
      ✓ should handle null personality (2 ms)
      ✓ should fetch avatar URL if not set (3 ms)
      ✓ should handle fetch errors (3 ms)
      ✓ should warmup existing avatar URL (2 ms)
      ✓ should set avatar to null on warmup failure (2 ms)
    cache management
      ✓ should clear avatar cache (2 ms)
      ✓ should check if avatar is cached (2 ms)

PASS tests/unit/auth.expiration.test.js
  Auth Token Expiration
    Token validity checks
      ✓ should correctly determine if a token is valid using proper API (20 ms)
    Token cleanup
      ✓ should clean up expired tokens on initialization (18 ms)
    Token age calculation
      ✓ should calculate token age correctly (15 ms)
      ✓ should return null for non-existent user (13 ms)
    Token expiration info
      ✓ should calculate token expiration info correctly (12 ms)
      ✓ should migrate old tokens to have expiration info (18 ms)
    Token storage
      ✓ should store new tokens with correct expiration date (13 ms)
    Error handling
      ✓ should handle file system errors gracefully (12 ms)

PASS tests/unit/adapters/discord/DiscordMessageAdapter.test.js
  DiscordMessageAdapter
    toDomainMessage
      ✓ should map basic Discord message to domain Message (4 ms)
      ✓ should handle messages without personality (2 ms)
      ✓ should extract embed content (2 ms)
      ✓ should handle embeds without regular content (3 ms)
      ✓ should extract forwarded message content (2 ms)
      ✓ should handle multiple forwarded messages (7 ms)
    toConversationId
      ✓ should create ConversationId for guild message (2 ms)
      ✓ should create ConversationId for DM (3 ms)
    extractMetadata
      ✓ should extract complete metadata from Discord message (4 ms)
      ✓ should handle DM metadata (2 ms)
      ✓ should extract forwarded message references (3 ms)
    isForwardedMessage
      ✓ should detect forwarded messages by reference type (3 ms)
      ✓ should detect forwarded messages by message snapshots (4 ms)
      ✓ should return false for regular replies (3 ms)
      ✓ should return false for messages without references (3 ms)
    extractAIContext
      ✓ should extract AI processing context (4 ms)
      ✓ should handle DM context (4 ms)
      ✓ should detect forwarded messages in AI context (4 ms)
      ✓ should distinguish between replies and forwards (12 ms)
    shouldProcess
      ✓ should skip bot messages by default (4 ms)
      ✓ should allow webhook messages when configured (4 ms)
      ✓ should skip system messages (4 ms)
      ✓ should skip empty messages without attachments (4 ms)
      ✓ should process messages with attachments even if empty (4 ms)
      ✓ should apply custom filters (5 ms)

PASS tests/unit/application/commands/CommandAbstraction.test.js
  CommandAbstraction
    Command
      ✓ should create a valid command (3 ms)
      ✓ should require name (39 ms)
      ✓ should require description (3 ms)
      ✓ should require execute function (3 ms)
      ✓ should convert to Discord slash command format (2 ms)
      ✓ should convert to text command format (2 ms)
      ✓ should handle command options with choices (1 ms)
    CommandOption
      ✓ should create option with defaults (2 ms)
      ✓ should accept all option properties (1 ms)
    CommandContext
      ✓ should create Discord text command context (2 ms)
      ✓ should create Discord slash command context (3 ms)
      ✓ should handle DM detection for Discord (7 ms)
      ✓ should handle DM detection for Revolt (2 ms)
      ✓ should handle reply methods (2 ms)
      ✓ should fallback to message.reply (2 ms)
      ✓ should fallback to channel.send (4 ms)
      ✓ should handle slash command replies (2 ms)
      ✓ should handle deferred slash command replies (2 ms)
    CommandRegistry
      ✓ should register commands (2 ms)
      ✓ should register command aliases (2 ms)
      ✓ should require Command instance (2 ms)
      ✓ should get all commands (2 ms)
      ✓ should get commands by category (4 ms)
      ✓ should export as Discord slash commands (2 ms)
      ✓ should export as text commands (2 ms)
      ✓ should clear all commands (6 ms)
    Singleton management
      ✓ should return same registry instance (2 ms)
      ✓ should reset registry (3 ms)

PASS tests/unit/routes/health.test.js
  Health Route
    route configuration
      ✓ should export routes array (6 ms)
      ✓ should define GET /health route (3 ms)
      ✓ should define GET /health/ route (2 ms)
    health check handler
      ✓ should return healthy status with 200 code (4 ms)
      ✓ should return critical status with 503 code when Discord disconnected (8 ms)
      ✓ should handle missing Discord client gracefully (3 ms)
      ✓ should include detailed uptime in response (3 ms)
      ✓ should include detailed memory usage in response (2 ms)
      ✓ should include detailed system information in response (4 ms)
      ✓ should include detailed Discord connection information (3 ms)
      ✓ should include AI service status information (3 ms)
      ✓ should handle handler errors gracefully (3 ms)
      ✓ should include timestamp in response (3 ms)
    route path variations
      ✓ should handle /health/ with trailing slash (5 ms)
    Discord status mapping
      ✓ should map Discord status 0 to READY (9 ms)
      ✓ should map Discord status 1 to CONNECTING (2 ms)
      ✓ should map Discord status 2 to RECONNECTING (4 ms)
      ✓ should map Discord status 3 to IDLE (4 ms)
      ✓ should map Discord status 4 to NEARLY (2 ms)
      ✓ should map Discord status 5 to DISCONNECTED (2 ms)

PASS tests/unit/utils/avatarStorage.test.js
  Avatar Storage - Simple Tests
    Basic functionality
      ✓ should generate safe filenames (37 ms)
      ✓ should calculate checksums consistently (9 ms)
    Timer injection
      ✓ should use injected timer functions (18 ms)
    Content type handling
      ✓ should accept application/octet-stream for valid image extensions (9 ms)
      ✓ should reject application/octet-stream for non-image extensions (10 ms)
      ✓ should handle missing content-type header (15 ms)
    Configuration
      ✓ should accept configuration updates (8 ms)
      ✓ should reset internal state (8 ms)

PASS tests/unit/commands/index.test.js
  Command System
    Command Registry
      ✓ should register commands correctly (14 ms)
      ✓ should handle missing commands gracefully (2 ms)
    processCommand
      ✓ should process valid commands (2 ms)
      ✓ should handle unknown commands (3 ms)
      ✓ should process commands by alias (3 ms)
    Permission checks
      ✓ should verify permission-based commands are registered with correct metadata (3 ms)

PASS tests/unit/profileInfoFetcher.test.js
  profileInfoFetcher (Legacy Wrapper)
    module structure
      ✓ should export expected functions (3 ms)
      ✓ should export testing utilities (2 ms)
    getProfileAvatarUrl - URL processing logic
      ✓ should return avatar field when available and valid (3 ms)
      ✓ should return avatar_url field when avatar not available (3 ms)
      ✓ should prioritize avatar over avatar_url when both present (8 ms)
      ✓ should validate avatar URL format and reject invalid URLs (4 ms)
      ✓ should validate avatar_url format and reject invalid URLs (3 ms)
      ✓ should return null when no avatar fields present (3 ms)
      ✓ should return null when profile fetch fails (2 ms)
      ✓ should handle errors gracefully and log them (3 ms)
    getProfileDisplayName - fallback logic
      ✓ should return profile name when available (3 ms)
      ✓ should return fallback (profileName) when profile fetch fails (2 ms)
      ✓ should return null when name field missing (indicating failure) (2 ms)
    logging behavior
      ✓ should log info when getting avatar URL (3 ms)
      ✓ should log info when getting display name (2 ms)
    testing utilities
      ✓ should expose clearCache function that works (6 ms)
      ✓ should expose getCache function that returns cache object (1 ms)
      ✓ should expose setFetchImplementation function (2 ms)
      ✓ should expose getRateLimiter function (4 ms)
      ✓ should expose getFetcher function that returns core fetcher (3 ms)
      ✓ should expose resetFetcher function that works (2 ms)

PASS tests/unit/core/personality/PersonalityManager.lazyLoading.test.js
  PersonalityManager - Lazy Loading
    Error message lazy loading
      ✓ should refresh stale personality data (18 ms)
      ✓ should refresh personality data when lastUpdated is missing (6 ms)
      ✓ should refresh personality data when errorMessage is missing (7 ms)
      ✓ should not refresh if errorMessage already exists and data is fresh (2 ms)
      ✓ should handle refresh errors gracefully (14 ms)
      ✓ should update all fields during refresh (7 ms)

PASS tests/unit/core/conversation/ConversationTracker.test.js
  ConversationTracker
    recordConversation
      ✓ should record a conversation with single message ID (4 ms)
      ✓ should record a conversation with multiple message IDs (2 ms)
    getActivePersonality
      ✓ should return personality for active conversation with auto-response enabled (8 ms)
      ✓ should return null for guild channel without auto-response (3 ms)
      ✓ should return personality for DM channel regardless of auto-response (3 ms)
      ✓ should return null for mention-only conversation in guild channel (3 ms)
      ✓ should return null for stale conversation (2 ms)
      ✓ should use extended timeout for DM conversations (2 ms)
    getConversationByMessageId
      ✓ should find conversation by message ID (2 ms)
      ✓ should support legacy lastMessageId (2 ms)
      ✓ should return null for unknown message ID (3 ms)
    clearConversation
      ✓ should clear an existing conversation (7 ms)
      ✓ should handle legacy conversations with lastMessageId (3 ms)
      ✓ should return false for non-existent conversation (2 ms)
    getAllConversations and getAllMessageMappings
      ✓ should return all conversations as plain object (2 ms)
      ✓ should return all message mappings as plain object (3 ms)
    loadFromData
      ✓ should load conversations and message mappings from data (3 ms)
      ✓ should handle null data gracefully (2 ms)
    cleanup interval
      ✓ should clean up stale conversations periodically (3 ms)
      ✓ should clean up orphaned message mappings (2 ms)
      ✓ should use DM timeout for DM conversations (3 ms)
    stopCleanup
      ✓ should stop the cleanup interval (2 ms)

PASS tests/unit/application/routers/PersonalityRouter.test.js
  PersonalityRouter
    getPersonality
      ✓ should use DDD system and convert to legacy format (4 ms)
      ✓ should return null when personality not found (3 ms)
      ✓ should handle errors from DDD system (17 ms)
    getAllPersonalities
      ✓ should use DDD system and convert to legacy format (7 ms)
      ✓ should handle empty list (2 ms)
    registerPersonality
      ✓ should use DDD system for registration (2 ms)
      ✓ should handle registration errors (2 ms)
    removePersonality
      ✓ should use DDD system for removal (4 ms)
      ✓ should handle removal errors (2 ms)
    addAlias
      ✓ should use DDD system for alias addition (3 ms)
      ✓ should handle alias addition errors (2 ms)
    getRoutingStatistics
      ✓ should return accurate statistics (2 ms)
    initialization
      ✓ should auto-initialize DDD system when personalityService not set (2 ms)
      ✓ should not reinitialize if personalityService already set (2 ms)
    singleton behavior
      ✓ should return same instance (2 ms)
      ✓ should reset instance (7 ms)

PASS tests/unit/application/commands/utility/DebugCommand.test.js
  DebugCommand
    metadata
      ✓ should have correct command metadata (5 ms)
    permission check
      ✓ should reject non-admin users (10 ms)
    help display
      ✓ should show help when no subcommand provided (3 ms)
    clearwebhooks subcommand
      ✓ should clear webhook cache (3 ms)
      ✓ should work with options instead of args (2 ms)
    unverify subcommand
      ✓ should clear NSFW verification when verified (2 ms)
      ✓ should handle when user was not verified (2 ms)
    clearconversation subcommand
      ✓ should clear conversation history (2 ms)
      ✓ should handle conversation clear errors (2 ms)
    clearauth subcommand
      ✓ should clean up authentication tokens (2 ms)
      ✓ should handle auth cleanup errors (3 ms)
    clearmessages subcommand
      ✓ should clear message tracking (1 ms)
      ✓ should handle message tracker errors (7 ms)
    stats subcommand
      ✓ should show debug statistics (3 ms)
      ✓ should handle stats gathering errors (1 ms)
      ✓ should handle missing size property (2 ms)
    invalid subcommand
      ✓ should show error for unknown subcommand (2 ms)
    error handling
      ✓ should handle unexpected errors gracefully (22 ms)
    factory function
      ✓ should create command with default dependencies (2 ms)
      ✓ should create command with custom dependencies (2 ms)

PASS tests/unit/webhook.reply.auth.test.js
  Webhook Reply Authentication
    ✓ webhook replies pass correct user ID to AI service (3 ms)
    ✓ Different users replying to same webhook use their own auth tokens (4 ms)

PASS tests/unit/routes/avatars.test.js
  Avatar Routes
    GET /avatars/:filename
      ✓ should serve PNG image successfully (4 ms)
      ✓ should serve JPEG image with correct content type (12 ms)
      ✓ should serve GIF image with correct content type (2 ms)
      ✓ should serve WebP image with correct content type (3 ms)
      ✓ should return 400 for invalid filename format (2 ms)
      ✓ should return 400 for unsupported file extension (4 ms)
      ✓ should block directory traversal attempts (4 ms)
      ✓ should return 404 when file does not exist (2 ms)
      ✓ should handle file access errors (3 ms)
      ✓ should handle stream errors (9 ms)
      ✓ should handle URLs with query parameters (3 ms)
      ✓ should handle encoded filenames (2 ms)
      ✓ should validate filename length (3 ms)
    Route Registration
      ✓ should export routes array with GET handler (2 ms)
      ✓ should have correct route path for prefix matching (2 ms)
    Content Type Detection
      ✓ should serve .png files with image/png (4 ms)
      ✓ should serve .jpg files with image/jpeg (2 ms)
      ✓ should serve .jpeg files with image/jpeg (2 ms)
      ✓ should serve .gif files with image/gif (2 ms)
      ✓ should serve .webp files with image/webp (3 ms)
    Caching Headers
      ✓ should set appropriate cache headers for avatars (9 ms)

PASS tests/unit/application/commands/CommandIntegration.test.js
  CommandIntegration
    initialize
      ✓ should initialize with default services (9 ms)
      ✓ should initialize with custom services (3 ms)
      ✓ should register commands during initialization (3 ms)
      ✓ should create platform adapters (2 ms)
      ✓ should warn if already initialized (10 ms)
      ✓ should handle initialization errors (24 ms)
    getAdapter
      ✓ should get Discord adapter (3 ms)
      ✓ should get Revolt adapter (4 ms)
      ✓ should handle case-insensitive platform names (4 ms)
      ✓ should throw for unknown platform (4 ms)
      ✓ should throw if not initialized (3 ms)
    handleDiscordTextCommand
      ✓ should delegate to Discord adapter (5 ms)
    handleDiscordSlashCommand
      ✓ should delegate to Discord adapter (2 ms)
    handleRevoltTextCommand
      ✓ should delegate to Revolt adapter (7 ms)
    registerDiscordSlashCommands
      ✓ should delegate to Discord adapter (3 ms)
    hasCommand
      ✓ should return true for existing command (3 ms)
      ✓ should return true for command alias (2 ms)
      ✓ should return false for non-existent command (2 ms)
    getAllCommands
      ✓ should return all registered commands (3 ms)
    reset
      ✓ should reset all state (3 ms)
    singleton management
      ✓ should return same instance (3 ms)
      ✓ should reset singleton (3 ms)

PASS tests/unit/routes/webhooks.test.js
  Webhooks Route
    route configuration
      ✓ should export routes array (2 ms)
      ✓ should define POST /webhook/github route (3 ms)
    GitHub webhook handler
      ✓ should reject requests without webhook secret configured (6 ms)
      ✓ should reject requests without GitHub signature (3 ms)
      ✓ should reject requests with invalid signature (3 ms)
      ✓ should accept valid release webhook (3 ms)
      ✓ should ignore non-release events (9 ms)
      ✓ should accept prerelease releases (no filtering implemented) (4 ms)
      ✓ should ignore non-published release actions (2 ms)
      ✓ should verify signature correctly (4 ms)
      ✓ should handle malformed JSON gracefully (5 ms)
      ✓ should handle missing request body (3 ms)
      ✓ should handle context with notification manager (3 ms)
      ✓ should handle notification manager errors (3 ms)
    signature verification
      ✓ should handle signature without sha256 prefix (6 ms)
      ✓ should use timing-safe comparison for signatures (3 ms)

PASS tests/unit/domain/personality/PersonalityEvents.test.js
  PersonalityEvents
    PersonalityCreated
      ✓ should create event with valid payload (4 ms)
      ✓ should reject missing personalityId (16 ms)
      ✓ should reject missing ownerId (3 ms)
      ✓ should reject missing createdAt (2 ms)
      ✓ should serialize to JSON correctly (2 ms)
    PersonalityProfileUpdated
      ✓ should create event with valid payload (2 ms)
      ✓ should reject missing profile (10 ms)
      ✓ should reject missing updatedAt (2 ms)
      ✓ should accept empty profile object (1 ms)
    PersonalityRemoved
      ✓ should create event with valid payload (2 ms)
      ✓ should reject missing removedBy (2 ms)
      ✓ should reject missing removedAt (3 ms)
    PersonalityAliasAdded
      ✓ should create event with valid payload (3 ms)
      ✓ should reject missing alias (2 ms)
      ✓ should reject missing addedBy (1 ms)
      ✓ should reject missing addedAt (1 ms)
      ✓ should accept alias object with value and original (3 ms)
    PersonalityAliasRemoved
      ✓ should create event with valid payload (2 ms)
      ✓ should reject missing alias (7 ms)
      ✓ should reject missing removedBy (2 ms)
      ✓ should reject missing removedAt (2 ms)
    Event inheritance
      ✓ should all extend DomainEvent (3 ms)
      ✓ should have correct event types (3 ms)

PASS tests/unit/bot.dm.chunk.reply.test.js
  Bot - DM Chunk Reply Handling
    ✓ should properly detect personality name in previous messages (4 ms)
    ✓ should properly extract personality name from matched prefix (16 ms)

PASS tests/unit/application/eventHandlers/EventHandlerRegistry.test.js
  EventHandlerRegistry
    Constructor
      ✓ should initialize with dependencies (11 ms)
    Handler Registration
      ✓ should register all event handlers (3 ms)
      ✓ should register PersonalityCreated event handlers (3 ms)
      ✓ should register PersonalityProfileUpdated event handlers (3 ms)
      ✓ should register PersonalityRemoved event handlers (2 ms)
      ✓ should register PersonalityAliasAdded event handlers (3 ms)
      ✓ should register PersonalityAliasRemoved event handlers (3 ms)
    Handler Unregistration
      ✓ should unregister all event handlers (4 ms)
      ✓ should handle unregistration when no handlers are registered (8 ms)
    End-to-End Handler Flow
      ✓ should properly register and unregister handlers (5 ms)
      ✓ should handle multiple registration calls gracefully (3 ms)
    Error Handling
      ✓ should handle errors in event handler creation (18 ms)
      ✓ should handle errors in event subscription (4 ms)
      ✓ should handle errors during unregistration (5 ms)
    Handler Dependencies
      ✓ should pass correct dependencies to PersonalityCacheInvalidator (4 ms)
      ✓ should create PersonalityEventLogger without dependencies (2 ms)

PASS tests/unit/monitoring/deduplicationMonitor.test.js
  Deduplication Monitor
    trackDedupe
      ✓ should track message deduplication (5 ms)
      ✓ should track operation deduplication (2 ms)
      ✓ should handle unknown types (10 ms)
      ✓ should accumulate multiple dedupes (3 ms)
      ✓ should track by channel (2 ms)
      ✓ should track by hour (2 ms)
      ✓ should log each event in development mode (2 ms)
      ✓ should log periodically in production mode (2 ms)
      ✓ should force log when requested (2 ms)
    getDedupStats
      ✓ should return current statistics (4 ms)
      ✓ should calculate runtime in minutes (2 ms)
      ✓ should calculate dedupes per minute (2 ms)
      ✓ should handle zero runtime (2 ms)
    logStats
      ✓ should log basic statistics (7 ms)
      ✓ should log top channels in production (3 ms)
      ✓ should handle no channel stats in production (2 ms)
    saveStats
      ✓ should save statistics to file (4 ms)
      ✓ should handle interval callback execution (3 ms)
    startMonitoring
      ✓ should start periodic logging (2 ms)
      ✓ should register SIGINT handler (3 ms)
      ✓ should save stats on SIGINT (2 ms)
      ✓ should periodically log stats (4 ms)
      ✓ should call interval callback periodically (2 ms)
    resetStats
      ✓ should reset all statistics (4 ms)
      ✓ should update start time on reset (2 ms)
    production vs development behavior
      ✓ should detect production mode from NODE_ENV (7 ms)

PASS tests/unit/core/notifications/VersionTracker.test.js
  VersionTracker
    getCurrentVersion
      ✓ should read version from package.json (5 ms)
      ✓ should throw error if package.json cannot be read (20 ms)
    getLastNotifiedVersion
      ✓ should return version from saved file (3 ms)
      ✓ should return null if file does not exist (2 ms)
      ✓ should return null on other errors (2 ms)
    saveNotifiedVersion
      ✓ should save version to file (3 ms)
      ✓ should throw error if save fails (3 ms)
    parseVersion
      ✓ should parse valid version strings (2 ms)
      ✓ should handle incomplete versions (2 ms)
      ✓ should handle invalid parts (8 ms)
    compareVersions
      ✓ should correctly compare versions (4 ms)
    checkForNewVersion
      ✓ should return hasNewVersion: true on first run (2 ms)
      ✓ should detect major version on first run for x.0.0 versions (3 ms)
      ✓ should detect major version change (2 ms)
      ✓ should detect minor version change (3 ms)
      ✓ should detect patch version change (2 ms)
      ✓ should detect no change when versions are equal (4 ms)
      ✓ should detect no change when current version is older (2 ms)
    getVersionDiff
      ✓ should calculate version differences (2 ms)
    clearSavedVersion
      ✓ should delete the version file (2 ms)
      ✓ should handle file not found silently (2 ms)
      ✓ should log error for other failures (2 ms)

PASS tests/unit/aiService.embedMedia.test.js
  AIService - Embed Media Extraction
    ✓ should include embed thumbnail as image attachment when referenced (4 ms)
    ✓ should include embed image as image attachment when referenced (3 ms)
    ✓ should prioritize audio over image from embeds (2 ms)
    ✓ should fall back to text extraction if media URLs not provided (1 ms)
    ✓ should clean embed references from text when media is included (3 ms)

PASS tests/unit/aiErrorHandler.personality.test.js
  AI Error Handler - Personality-Specific Messages
    Personality error messages
      ✓ should use personality error message when available (3 ms)
      ✓ should append error marker if personality message does not have one (2 ms)
      ✓ should handle personality error messages with different spoiler patterns (2 ms)
      ✓ should fall back to default messages when personality has no error message (1 ms)
      ✓ should fall back to default messages when personality is not found (3 ms)
      ✓ should handle errors when fetching personality data (2 ms)
      ✓ should generate unique reference IDs for each error (2 ms)
    Error type detection with personality messages
      ✓ should use personality message for attribute errors (11 ms)
      ✓ should use personality message for empty responses (3 ms)
      ✓ should use personality message with existing error marker for empty responses (2 ms)
      ✓ should use personality message for rate limit errors (1 ms)

PASS tests/unit/application/commands/utility/StatusCommand.test.js
  StatusCommand
    metadata
      ✓ should have correct command metadata (3 ms)
    formatUptime
      ✓ should format seconds correctly (2 ms)
      ✓ should format minutes correctly (2 ms)
      ✓ should format hours correctly (2 ms)
      ✓ should format days correctly (11 ms)
      ✓ should handle zero uptime (1 ms)
    execute with embed support
      ✓ should show basic status for unauthenticated user (3 ms)
      ✓ should show additional info for authenticated user (3 ms)
      ✓ should show active channel personality (3 ms)
      ✓ should show activated channels count for authenticated users (2 ms)
      ✓ should handle auto-response enabled (3 ms)
      ✓ should handle missing personality list (2 ms)
      ✓ should handle single activated channel (2 ms)
    execute without embed support
      ✓ should fall back to text response (4 ms)
      ✓ should show authenticated info in text response (2 ms)
      ✓ should show channel activation in text response (1 ms)
    error handling
      ✓ should handle errors gracefully (8 ms)
      ✓ should handle missing methods gracefully (3 ms)
      ✓ should handle missing conversation manager methods (3 ms)
    factory function
      ✓ should create command with default dependencies (2 ms)
      ✓ should create command with custom dependencies (1 ms)

PASS tests/unit/utils/avatarStorage.comprehensive.test.js
  Avatar Storage - Comprehensive Tests
    Initialization
      ✓ should create directories and initialize empty metadata (4 ms)
      ✓ should load existing metadata (2 ms)
      ✓ should handle empty metadata file gracefully (12 ms)
      ✓ should handle invalid JSON in metadata file (3 ms)
    Avatar Download
      ✓ should download and save avatar successfully (6 ms)
      ✓ should return cached avatar on second request (4 ms)
      ✓ should handle download errors gracefully (4 ms)
      ✓ should handle invalid URLs (3 ms)
      ✓ should reject files that are too large (11 ms)
      ✓ should handle different image types (19 ms)
    Checksum Operations
      ✓ should calculate consistent checksums (5 ms)
      ✓ should detect when avatar needs update (5 ms)
    Cleanup Operations
      ✓ should delete avatar file and metadata (6 ms)
    Timer Injection
      ✓ should use injected timer functions (6 ms)
    Edge Cases
      ✓ should handle null URLs (4 ms)
      ✓ should handle missing metadata gracefully (4 ms)
      ✓ should re-download if local file is missing (6 ms)

PASS tests/unit/domain/personality/PersonalityConfiguration.test.js
  PersonalityConfiguration
    constructor
      ✓ should create valid configuration (5 ms)
      ✓ should use default maxWordCount (3 ms)
      ✓ should reject missing name (127 ms)
      ✓ should reject empty name (4 ms)
      ✓ should reject non-string name (5 ms)
      ✓ should reject missing prompt (4 ms)
      ✓ should reject empty prompt (3 ms)
      ✓ should reject non-string prompt (4 ms)
      ✓ should reject missing modelPath (5 ms)
      ✓ should reject empty modelPath (5 ms)
      ✓ should reject non-string modelPath (4 ms)
      ✓ should reject zero maxWordCount (5 ms)
      ✓ should reject negative maxWordCount (5 ms)
      ✓ should reject non-number maxWordCount (5 ms)
    withUpdates
      ✓ should create new configuration with updated prompt (2 ms)
      ✓ should create new configuration with updated modelPath (3 ms)
      ✓ should create new configuration with updated maxWordCount (13 ms)
      ✓ should create new configuration with multiple updates (2 ms)
      ✓ should not change name even if provided (3 ms)
      ✓ should handle empty updates object (2 ms)
    toJSON
      ✓ should serialize to JSON (1 ms)
    fromJSON
      ✓ should create from JSON (2 ms)
      ✓ should apply validation when creating from JSON (2 ms)
    value object immutability
      ✓ should be frozen after construction (2 ms)
    value object equality
      ✓ should be equal for same values (2 ms)
      ✓ should not be equal for different names (1 ms)
      ✓ should not be equal for different prompts (3 ms)
      ✓ should not be equal for different modelPaths (3 ms)
      ✓ should not be equal for different maxWordCounts (2 ms)

PASS tests/unit/adapters/ai/AIServiceAdapterFactory.test.js
  AIServiceAdapterFactory
    create
      ✓ should create generic adapter by default (3 ms)
      ✓ should create generic adapter without API key (2 ms)
      ✓ should throw error if baseUrl missing for generic provider (22 ms)
      ✓ should pass through custom options (3 ms)
    OpenAI-compatible provider
      ✓ should create OpenAI-compatible adapter (3 ms)
      ✓ should throw error if baseUrl or apiKey missing (2 ms)
      ✓ should transform requests in OpenAI format (10 ms)
      ✓ should transform OpenAI responses (3 ms)
    Anthropic-compatible provider
      ✓ should create Anthropic-compatible adapter (1 ms)
      ✓ should use custom version if provided (2 ms)
      ✓ should transform requests in Anthropic format (2 ms)
      ✓ should transform Anthropic responses (2 ms)
    createFromEnv
      ✓ should create adapter from environment variables (3 ms)
      ✓ should throw error if AI_SERVICE_URL not set (2 ms)
      ✓ should use defaults for missing optional env vars (1 ms)

PASS tests/unit/webhook/messageThrottler.test.js
  messageThrottler
    createPersonalityChannelKey
      ✓ should create consistent key format (11 ms)
      ✓ should handle special characters in names (2 ms)
    pending message management
      ✓ should register pending messages (3 ms)
      ✓ should track multiple personality-channel combinations (2 ms)
      ✓ should clear pending messages (5 ms)
      ✓ should not error when clearing non-existent pending message (3 ms)
      ✓ should schedule timeout for pending messages (2 ms)
      ✓ should cancel timeout when message is cleared (2 ms)
      ✓ should handle registering same personality-channel again (3 ms)
    message delay calculation
      ✓ should return 0 delay for first message in channel (2 ms)
      ✓ should calculate delay based on last message time (8 ms)
      ✓ should return 0 if enough time has passed (2 ms)
      ✓ should track multiple channels independently (2 ms)
      ✓ should update channel last message time (2 ms)
    edge cases
      ✓ should handle rapid pending message operations (2 ms)
      ✓ should handle concurrent registrations (5 ms)
      ✓ should log timeout for uncleared messages (2 ms)

PASS tests/unit/commands/handlers/notifications.test.js
  notifications command
    command metadata
      ✓ should have correct command properties (2 ms)
    execute - no subcommand (status)
      ✓ should show status when no subcommand provided (3 ms)
    execute - status subcommand
      ✓ should show opted out status (1 ms)
      ✓ should handle errors gracefully (3 ms)
    execute - off subcommand
      ✓ should opt user out (11 ms)
      ✓ should handle opt-out errors (2 ms)
    execute - on subcommand
      ✓ should opt user in (2 ms)
    execute - level subcommand
      ✓ should set notification level (4 ms)
      ✓ should require level parameter (2 ms)
      ✓ should validate level parameter (2 ms)
      ✓ should handle level setting errors (2 ms)
    execute - invalid subcommand
      ✓ should show error for invalid subcommand (1 ms)

PASS tests/unit/webhook/errorUtils.test.js
  errorUtils
    isErrorContent
      ✓ should return false for null content (2 ms)
      ✓ should return false for undefined content (2 ms)
      ✓ should return false for non-string content (1 ms)
      ✓ should detect standard error messages from constants (2 ms)
      ✓ should detect connection unstable combination (11 ms)
      ✓ should be case sensitive for exact matches (1 ms)
      ✓ should not detect partial matches of error phrases in normal content (3 ms)
      ✓ should detect HARD_BLOCKED_RESPONSE marker (2 ms)
      ✓ should handle empty strings (2 ms)
      ✓ should handle strings with only whitespace (2 ms)
    markErrorContent
      ✓ should return empty string for null content (2 ms)
      ✓ should return empty string for undefined content (1 ms)
      ✓ should add prefix to error content (1 ms)
      ✓ should not add prefix to normal content (2 ms)
      ✓ should not double-prefix already prefixed content (1 ms)
      ✓ should handle connection unstable errors (1 ms)
      ✓ should handle empty string (2 ms)
      ✓ should preserve original content when not an error (8 ms)
    isErrorWebhookMessage
      ✓ should return false for null options (3 ms)
      ✓ should return false for undefined options (1 ms)
      ✓ should return false for options without content (1 ms)
      ✓ should allow all thread messages regardless of content (1 ms)
      ✓ should allow thread messages with thread_id (2 ms)
      ✓ should detect error indicators in content (1 ms)
      ✓ should detect error formatting patterns (2 ms)
      ✓ should detect various error types (3 ms)
      ✓ should detect rate limiting and timeout errors (2 ms)
      ✓ should not detect normal messages as errors (1 ms)
      ✓ should handle case insensitive error detection (2 ms)
      ✓ should not flag messages with error words in different context (1 ms)
      ✓ should handle empty content (1 ms)
      ✓ should handle whitespace content (2 ms)
      ✓ should prioritize thread check over error detection (8 ms)

PASS tests/unit/handlers/errorHandler.test.js
  errorHandler
    patchClientForErrorFiltering
      ✓ should patch the client to filter error messages (2 ms)
      ✓ should filter webhook messages with error patterns (2 ms)
      ✓ should pass through non-error messages (2 ms)
      ✓ should pass through non-webhook messages (2 ms)
    hasErrorPatterns
      ✓ should detect messages with error patterns (2 ms)
      ✓ should not detect messages without error patterns (3 ms)
      ✓ should handle null or empty messages gracefully (1 ms)
    filterWebhookMessage
      ✓ should filter and delete webhook messages with error patterns (1 ms)
      ✓ should not filter non-webhook messages (2 ms)
      ✓ should not filter webhook messages without error patterns (9 ms)
      ✓ should handle non-deletable messages gracefully (2 ms)
      ✓ should handle delete failures gracefully (1 ms)
    startQueueCleaner
      ✓ should start the queue cleaner interval (4 ms)
      ✓ should clean error messages from accessible channels (3 ms)
      ✓ should handle inaccessible channels gracefully (6 ms)
      ✓ should skip recently checked channels (3 ms)
      ✓ should handle delete failures in queue cleaner (3 ms)
      ✓ should handle general errors in queue cleaner (2 ms)
      ✓ should perform maintenance cleanup occasionally (3 ms)
      ✓ should handle errors in the interval callback gracefully (3 ms)
      ✓ should handle edge cases with channel permissions (3 ms)

PASS tests/unit/domain/authentication/NsfwStatus.test.js
  NsfwStatus
    constructor
      ✓ should create unverified status by default (3 ms)
      ✓ should create verified status with date (2 ms)
      ✓ should coerce verified to boolean (3 ms)
    validation
      ✓ should require verification date when verified (17 ms)
      ✓ should require verifiedAt to be Date (3 ms)
      ✓ should not allow verification date without being verified (7 ms)
      ✓ should allow unverified without date (2 ms)
    markVerified
      ✓ should create new verified status (3 ms)
      ✓ should use current time by default (3 ms)
      ✓ should accept custom verification time (2 ms)
      ✓ should preserve immutability (2 ms)
    clearVerification
      ✓ should create new unverified status (2 ms)
      ✓ should work on already unverified status (2 ms)
    isStale
      ✓ should return true for unverified status (2 ms)
      ✓ should return false for fresh verification (3 ms)
      ✓ should return true for stale verification (2 ms)
      ✓ should use custom max age (7 ms)
      ✓ should accept custom current time (2 ms)
      ✓ should handle exact staleness boundary (2 ms)
    toJSON
      ✓ should serialize verified status (3 ms)
      ✓ should serialize unverified status (4 ms)
    fromJSON
      ✓ should deserialize verified status (2 ms)
      ✓ should deserialize unverified status (3 ms)
      ✓ should handle date string conversion (3 ms)
    createUnverified
      ✓ should create unverified status (3 ms)
    createVerified
      ✓ should create verified status with current time (3 ms)
      ✓ should accept custom verification time (2 ms)
    immutability
      ✓ should not be affected by JSON modifications (2 ms)
      ✓ should share date reference (current implementation) (2 ms)

PASS tests/unit/domain/ai/AIContent.test.js
  AIContent
    constructor
      ✓ should initialize with empty array (3 ms)
      ✓ should initialize with provided items (3 ms)
      ✓ should validate items is array (16 ms)
      ✓ should validate each item (2 ms)
    validateItem
      ✓ should validate text items (2 ms)
      ✓ should validate image items (1 ms)
      ✓ should validate audio items (1 ms)
      ✓ should reject null items (8 ms)
      ✓ should reject items without type (3 ms)
      ✓ should reject text without text property (2 ms)
      ✓ should reject image without url (2 ms)
      ✓ should reject audio without url (2 ms)
    fromText
      ✓ should create content from text (3 ms)
      ✓ should validate text is string (2 ms)
      ✓ should validate text is not empty (3 ms)
    addText
      ✓ should add text to content (2 ms)
      ✓ should return new instance (2 ms)
    addImage
      ✓ should add image to content (2 ms)
      ✓ should return new instance (1 ms)
    addAudio
      ✓ should add audio to content (2 ms)
      ✓ should return new instance (7 ms)
    hasMedia
      ✓ should return false for text only (2 ms)
      ✓ should return true for image content (1 ms)
      ✓ should return true for audio content (2 ms)
    hasAudio
      ✓ should return false for text only (1 ms)
      ✓ should return false for image content (2 ms)
      ✓ should return true for audio content (1 ms)
    getText
      ✓ should extract text content (2 ms)
      ✓ should return empty string for no text (1 ms)
    isEmpty
      ✓ should return true for empty content (2 ms)
      ✓ should return false for non-empty content (3 ms)
    toJSON
      ✓ should return items array (2 ms)
    equals
      ✓ should compare content by items (1 ms)
      ✓ should handle complex content comparison (2 ms)
      ✓ should handle null comparison (1 ms)
    immutability
      ✓ should not allow items modification (2 ms)
      ✓ should not allow item mutation (9 ms)

PASS tests/unit/domain/personality/Personality.test.js
  Personality
    constructor
      ✓ should require PersonalityId (21 ms)
      ✓ should initialize with PersonalityId (2 ms)
    create
      ✓ should create new personality with all required parameters (3 ms)
      ✓ should emit PersonalityCreated event (7 ms)
      ✓ should validate PersonalityId (2 ms)
      ✓ should validate UserId (2 ms)
      ✓ should validate PersonalityProfile (2 ms)
      ✓ should validate AIModel (2 ms)
    updateProfile
      ✓ should update profile fields (2 ms)
      ✓ should emit PersonalityProfileUpdated event (3 ms)
      ✓ should update model if provided (3 ms)
      ✓ should reject removed personality (2 ms)
    remove
      ✓ should mark personality as removed (2 ms)
      ✓ should emit PersonalityRemoved event (2 ms)
      ✓ should reject if already removed (9 ms)
    aliases
      ✓ should add alias (2 ms)
      ✓ should reject duplicate alias (3 ms)
      ✓ should remove alias (2 ms)
      ✓ should reject removing non-existent alias (2 ms)
    isOwnedBy
      ✓ should return true for owner (3 ms)
      ✓ should return false for different user (2 ms)
      ✓ should return false for non-UserId (2 ms)
    getDisplayName
      ✓ should return display name from profile (2 ms)
      ✓ should fall back to personality ID if no display name (1 ms)
    needsProfileRefresh
      ✓ should return false for fresh profile (2 ms)
      ✓ should return true if profile is stale (3 ms)
      ✓ should use custom threshold (1 ms)
    event sourcing
      ✓ should rebuild state from events (8 ms)
    toJSON
      ✓ should serialize personality to JSON (2 ms)

PASS tests/unit/commands/handlers/auth.test.js
  Auth Command
    ✓ should have the correct metadata (5 ms)
    auth start subcommand
      ✓ should send authorization URL via DM when possible (3 ms)
      ✓ should send auth URL directly in DM channels (3 ms)
      ✓ should fall back to channel message if DM fails (3 ms)
      ✓ should handle auth URL generation errors (10 ms)
    auth code subcommand
      ✓ should show usage if no code is provided (3 ms)
      ✓ should reject auth code submission in public channels (2 ms)
      ✓ should process auth code when submitted via DM (4 ms)
      ✓ should handle spoiler-tagged codes properly (3 ms)
      ✓ should handle failed code exchange (2 ms)
      ✓ should handle token storage errors (2 ms)
    auth status subcommand
      ✓ should show authorized status for users with token (2 ms)
      ✓ should show unauthorized status for users without token (2 ms)
      ✓ should show token age and expiration info when available (3 ms)
      ✓ should show expiration warning when token is about to expire (9 ms)
    auth revoke subcommand
      ✓ should revoke user authorization (2 ms)
      ✓ should handle failed revocation (3 ms)
    auth cleanup subcommand
      ✓ should reject cleanup for non-admin users (3 ms)
      ✓ should allow cleanup for admin users (2 ms)
      ✓ should handle case when no expired tokens are found (2 ms)
      ✓ should handle cleanup errors (2 ms)
    general auth command behavior
      ✓ should show help when no subcommand is provided (2 ms)
      ✓ should handle unknown subcommands (2 ms)
      ✓ should handle webhook proxy systems (3 ms)

PASS tests/unit/utils/aiErrorHandler.test.js
  AI Error Handler
    isErrorResponse
      uncovered error patterns
        ✓ should detect ValueError patterns (10 ms)
        ✓ should detect KeyError patterns (3 ms)
        ✓ should detect IndexError patterns (2 ms)
        ✓ should detect ModuleNotFoundError patterns (2 ms)
        ✓ should detect ImportError patterns (1 ms)
        ✓ should detect standalone Error: at line start (2 ms)
        ✓ should detect Error: after newline (1 ms)
        ✓ should detect Traceback with line references (2 ms)
        ✓ should detect Exception with raised keyword (1 ms)
        ✓ should detect Exception with caught keyword (2 ms)
        ✓ should detect Exception with thrown keyword (1 ms)
        ✓ should detect Exception with threw keyword (3 ms)
    analyzeErrorAndGenerateMessage
      specific error types
        ✓ should handle ValueError content (8 ms)
        ✓ should handle KeyError content (2 ms)
        ✓ should handle IndexError content (2 ms)
        ✓ should handle API server error (500) (2 ms)
        ✓ should handle rate limit error (3 ms)
        ✓ should handle timeout error (3 ms)
        ✓ should handle exception with traceback (2 ms)
        ✓ should handle generic error (3 ms)
      non-string content
        ✓ should handle object content (2 ms)
        ✓ should handle null content (2 ms)
        ✓ should handle undefined content (3 ms)
      context handling
        ✓ should handle missing userId in context (3 ms)
    handleApiError
      ✓ should handle 404 errors (6 ms)
      ✓ should handle 429 rate limit errors (1 ms)
      ✓ should handle 500 server errors (1 ms)
      ✓ should handle 502 bad gateway errors (1 ms)
      ✓ should handle 503 service unavailable errors (2 ms)
      ✓ should handle generic errors (2 ms)

PASS tests/unit/referenceHandler.embed.test.js
  processMessageLinks - Embed Media Extraction
    ✓ should extract image URL from embed in linked message (5 ms)
    ✓ should prioritize audio from embeds over images (4 ms)
    ✓ should not extract media from embeds for personality messages (9 ms)

PASS tests/unit/application/commands/utility/NotificationsCommand.test.js
  NotificationsCommand
    metadata
      ✓ should have correct command metadata (3 ms)
    getLevelDescription
      ✓ should return correct descriptions for each level (2 ms)
    status subcommand
      ✓ should show status when no subcommand provided (3 ms)
      ✓ should show status for opted out user (2 ms)
      ✓ should show text fallback when embed not supported (3 ms)
      ✓ should handle status errors gracefully (10 ms)
    opt out subcommand
      ✓ should opt user out with embed response (2 ms)
      ✓ should opt user out with text response (2 ms)
      ✓ should handle opt out errors (3 ms)
    opt in subcommand
      ✓ should opt user in with embed response (3 ms)
      ✓ should opt user in with text response (2 ms)
      ✓ should handle opt in errors (2 ms)
    level subcommand
      ✓ should set notification level with embed response (2 ms)
      ✓ should set notification level with text response (2 ms)
      ✓ should handle missing level argument (3 ms)
      ✓ should handle invalid level argument (3 ms)
      ✓ should handle level setting errors (3 ms)
    invalid subcommand
      ✓ should show error for invalid subcommand (2 ms)
    options support
      ✓ should support action option for slash commands (7 ms)
      ✓ should support level option for slash commands (3 ms)
    error handling
      ✓ should handle unexpected errors (3 ms)
    factory function
      ✓ should create command with default dependencies (2 ms)
      ✓ should create command with custom dependencies (2 ms)

PASS tests/unit/httpServer.test.js
  HTTP Server
    createHTTPServer
      ✓ should create server and register default routes (8 ms)
      ✓ should create server with custom port (3 ms)
      ✓ should create server with context (3 ms)
    registerRoute
      ✓ should register a GET route (12 ms)
      ✓ should register a POST route (2 ms)
      ✓ should handle case-insensitive methods (4 ms)
    request handling
      ✓ should handle registered routes (5 ms)
      ✓ should handle routes with query parameters via prefix matching (3 ms)
      ✓ should return 404 for unregistered routes (3 ms)
      ✓ should return 404 for unsupported methods (routes are method-specific) (4 ms)
      ✓ should handle POST requests with body parsing (3 ms)
      ✓ should handle errors gracefully (10 ms)
      ✓ should set CORS headers on responses (3 ms)
      ✓ should handle OPTIONS preflight requests (4 ms)
    server lifecycle
      ✓ should create HTTP server instance (5 ms)

PASS tests/unit/utils/webhookCache.lru.test.js
  webhookCache LRU behavior
    LRU eviction
      ✓ should evict least recently used webhooks when cache is full (16 ms)
      ✓ should respect TTL and evict expired webhooks (17 ms)
      ✓ should handle thread webhooks in LRU cache (9 ms)
    cache statistics
      ✓ should track cache size correctly (9 ms)
    event listener cleanup
      ✓ should clean up webhooks when channel is deleted (16 ms)

PASS tests/unit/handlers/messageTrackerHandler.test.js
  messageTrackerHandler
    trackMessageInChannel
      ✓ should track a message in the channel (4 ms)
      ✓ should not track empty messages (2 ms)
    hasSimilarRecentMessage
      ✓ should return false if no similar messages exist (3 ms)
      ✓ should return true if a similar message exists and was handled (2 ms)
      ✓ should return false if a similar message exists but was not handled (2 ms)
    markMessageAsHandled
      ✓ should mark a message as handled (11 ms)
      ✓ should handle non-existent messages gracefully (3 ms)
    delayedProcessing
      ✓ should process message after delay if not a duplicate (4 ms)
      ✓ should not process message if a similar message was already handled (2 ms)
      ✓ should not process if message no longer exists after delay (3 ms)

PASS tests/unit/utils/urlValidator.test.js
  urlValidator
    isValidUrlFormat
      ✓ should return true for valid URLs (3 ms)
      ✓ should return false for invalid URLs (2 ms)
      ✓ should return true for javascript URLs (2 ms)
      ✓ should log warnings for invalid URLs (3 ms)
    isTrustedDomain
      ✓ should return true for URLs from trusted domains (3 ms)
      ✓ should return false for URLs not from trusted domains (2 ms)
      ✓ should return false for invalid URLs (2 ms)
      ✓ should return false if trusted domains list is invalid (2 ms)
    hasImageExtension
      ✓ should return true for URLs with image extensions (2 ms)
      ✓ should return false for URLs without image extensions (7 ms)
      ✓ should return false for invalid URLs (3 ms)
    isImageUrl
      ✓ should return false for invalid URL format (3 ms)
      ✓ should trust URLs with image extensions when trustExtensions is true (2 ms)
      ✓ should not trust URLs with image extensions when trustExtensions is false (4 ms)
      ✓ should trust URLs from default trusted domains (4 ms)
      ✓ should use custom trusted domains when provided (4 ms)
      ✓ should validate untrusted URLs by fetching (2 ms)
      ✓ should handle timeout properly (3 ms)
      ✓ should return false for non-OK HTTP responses (3 ms)
      ✓ should return false for URLs without content-type header (8 ms)
      ✓ should return false for non-image content types (3 ms)
      ✓ should accept application/octet-stream content type (2 ms)
      ✓ should return false for empty response body (5 ms)
      ✓ should handle read errors gracefully (4 ms)
      ✓ should trust image extensions on fetch errors (3 ms)
      ✓ should return false on fetch errors for non-image extensions (3 ms)
      ✓ should clear timeout on successful fetch (4 ms)

PASS tests/unit/domain/authentication/AuthContext.test.js
  AuthContext
    constructor
      ✓ should create context with all properties (3 ms)
      ✓ should default optional properties (1 ms)
      ✓ should coerce boolean properties (1 ms)
    validation
      ✓ should require valid channel type (16 ms)
      ✓ should accept valid channel types (2 ms)
      ✓ should require channel ID (2 ms)
      ✓ should require channel ID to be string (2 ms)
    isDM
      ✓ should return true for DM context (3 ms)
      ✓ should return false for guild context (7 ms)
      ✓ should return false for thread context (2 ms)
    isGuildChannel
      ✓ should return true for guild context (1 ms)
      ✓ should return false for DM context (1 ms)
      ✓ should return false for thread context (1 ms)
    isThread
      ✓ should return true for thread context (2 ms)
      ✓ should return false for DM context (2 ms)
      ✓ should return false for guild context (1 ms)
    requiresNsfwVerification
      ✓ should return false for DMs (2 ms)
      ✓ should return false for non-NSFW guild channels (2 ms)
      ✓ should return true for NSFW guild channels (1 ms)
      ✓ should return true for threads in NSFW channels (1 ms)
      ✓ should return false for threads in non-NSFW channels (1 ms)
    allowsProxy
      ✓ should return false for DMs (1 ms)
      ✓ should return true for guild channels (2 ms)
      ✓ should return true for threads (2 ms)
    toJSON
      ✓ should serialize to JSON (1 ms)
    createForDM
      ✓ should create DM context (1 ms)
    createForGuild
      ✓ should create guild context with defaults (2 ms)
      ✓ should create NSFW guild context (1 ms)
    createForThread
      ✓ should create thread context with defaults (1 ms)
      ✓ should inherit parent NSFW status (2 ms)
    immutability
      ✓ should not be affected by JSON modifications (2 ms)

PASS tests/unit/core/authentication/PersonalityAuthValidator.test.js
  PersonalityAuthValidator
    Constructor
      ✓ should initialize with provided dependencies (2 ms)
    requiresAuth
      ✓ should always return true (all personalities require auth) (1 ms)
      ✓ should return true even for personalities marked as not requiring auth (1 ms)
      ✓ should return true for undefined personality (2 ms)
      ✓ should return true for personality without requiresAuth property (1 ms)
    isOwner
      ✓ should return true for the owner (2 ms)
      ✓ should return false for non-owners (2 ms)
      ✓ should handle null/undefined userId (2 ms)
    validateAccess
      ✓ should authorize users with valid tokens (4 ms)
      ✓ should reject users without valid tokens (1 ms)
      ✓ should require auth even for owner (2 ms)
      ✓ should check NSFW verification when required (2 ms)
      ✓ should handle proxy systems (2 ms)
      ✓ should handle missing userId (7 ms)
      ✓ should require auth even for personalities marked as not requiring auth (2 ms)
      ✓ should use provided userId over message author id (1 ms)
    getUserAuthStatus
      ✓ should return complete auth status for a user (2 ms)
      ✓ should identify owner status (1 ms)
    getAuthHelpMessage
      ✓ should generate help message for auth failures (2 ms)
      ✓ should generate help message for NSFW failures (2 ms)
      ✓ should include warnings in help message (2 ms)
      ✓ should handle empty validation result (1 ms)

PASS tests/unit/utils/personalityAuth.test.js
  Personality Authentication Module
    checkPersonalityAuth
      ✓ should return isAllowed true when validation passes (5 ms)
      ✓ should return isAllowed false with error message when validation fails (2 ms)
      ✓ should handle auth manager not initialized (25 ms)
      ✓ should handle validation errors gracefully (4 ms)
    requiresAuth
      ✓ should return true when personality requires auth (2 ms)
      ✓ should return false when personality does not require auth (2 ms)
      ✓ should return false when auth manager not initialized (1 ms)
    requiresNsfwVerification
      ✓ should return true for NSFW channels (2 ms)
      ✓ should return false for non-NSFW channels (2 ms)
      ✓ should return false when auth manager not initialized (3 ms)
    getUserAuthStatus
      ✓ should return user auth status from auth manager (3 ms)
      ✓ should return default status when auth manager not initialized (2 ms)
    sendAuthError
      ✓ should send ephemeral reply with error message (2 ms)
      ✓ should handle reply errors gracefully (1 ms)

PASS tests/unit/domain/ai/AIRequestRepository.test.js
  AIRequestRepository
    interface methods
      ✓ should define save method (3 ms)
      ✓ should define findById method (1 ms)
      ✓ should define findByUser method (2 ms)
      ✓ should define findByPersonality method (1 ms)
      ✓ should define findPending method (1 ms)
      ✓ should define findRetryable method (2 ms)
      ✓ should define getStatistics method (1 ms)
      ✓ should define cleanup method (7 ms)
    unimplemented methods
      ✓ should throw error for save (20 ms)
      ✓ should throw error for findById (2 ms)
      ✓ should throw error for findByUser (2 ms)
      ✓ should throw error for findByPersonality (3 ms)
      ✓ should throw error for findPending (3 ms)
      ✓ should throw error for findRetryable (2 ms)
      ✓ should throw error for getStatistics (3 ms)
      ✓ should throw error for cleanup (2 ms)
    mock implementation
      ✓ should allow implementation of interface (4 ms)
      ✓ should handle retryable requests (11 ms)
    interface contract
      ✓ should be extendable (1 ms)
      ✓ should maintain method signatures (2 ms)

PASS tests/examples/mock-system-example.test.js
  Consolidated Mock System Examples
    Using Presets
      ✓ should work with command test preset (6 ms)
      ✓ should work with webhook test preset (3 ms)
    Manual Mock Creation
      ✓ should create Discord mocks manually (2 ms)
      ✓ should create API mocks manually (2 ms)
      ✓ should create module mocks manually (2 ms)
    Advanced Mock Usage
      ✓ should handle custom API responses (2 ms)
      ✓ should handle AI service responses (59 ms)
      ✓ should integrate multiple mock systems (2 ms)
    Mock State Management
      ✓ should maintain state across mock interactions (3 ms)

PASS tests/unit/utils/threadHandler.test.js
  Thread Handler Module
    detectThread
      ✓ should detect native threads (4 ms)
      ✓ should force thread detection for thread types (3 ms)
      ✓ should handle forum channels (1 ms)
      ✓ should handle numeric channel types (1 ms)
      ✓ should detect non-threads (2 ms)
    isForumChannel
      ✓ should detect direct forum channels (2 ms)
      ✓ should detect numeric forum types (2 ms)
      ✓ should detect forum threads by parent (1 ms)
      ✓ should return false for non-forum channels (2 ms)
    buildThreadWebhookOptions
      ✓ should build basic options for non-threads (2 ms)
      ✓ should add thread options for threads (2 ms)
      ✓ should add forum options for forum channels (7 ms)
      ✓ should handle missing thread ID (2 ms)
    sendThreadMessage
      ✓ should succeed with direct thread message (5 ms)
      ✓ should fallback to webhook message on thread failure (3 ms)
      ✓ should fallback to direct send on all webhook failures (4 ms)
      ✓ should throw if all methods fail (18 ms)
    getThreadInfo
      ✓ should gather all thread information (2 ms)
      ✓ should handle missing parent (2 ms)

PASS tests/unit/application/commands/CommandAdapter.test.js
  CommandAdapter
    DiscordCommandAdapter
      handleTextCommand
        ✓ should handle valid text command (5 ms)
        ✓ should return null for unknown command (2 ms)
        ✓ should handle command execution errors (21 ms)
      handleSlashCommand
        ✓ should handle valid slash command (3 ms)
        ✓ should handle unknown slash command (3 ms)
        ✓ should handle deferred interactions (4 ms)
        ✓ should handle slash command errors (3 ms)
        ✓ should edit reply for errors on deferred interactions (2 ms)
      registerSlashCommands
        ✓ should register commands to specific guild (9 ms)
        ✓ should register commands globally (2 ms)
        ✓ should handle registration errors (4 ms)
      createHelpEmbed
        ✓ should create help embed with commands grouped by category (3 ms)
    RevoltCommandAdapter
      handleTextCommand
        ✓ should handle valid text command (2 ms)
        ✓ should return null for unknown command (3 ms)
        ✓ should handle command execution errors (4 ms)
      createHelpMessage
        ✓ should create help message with commands grouped by category (3 ms)
    CommandAdapterFactory
      ✓ should create Discord adapter (1 ms)
      ✓ should create Revolt adapter (2 ms)
      ✓ should handle case-insensitive platform names (2 ms)
      ✓ should throw for unsupported platform (16 ms)

PASS tests/unit/bot.test.js
  Bot Core Functionality
    Bot Initialization
      ✓ should initialize Discord client with correct intents and partials (6 ms)
      ✓ should set global client reference (3 ms)
      ✓ should patch client for error filtering (8 ms)
      ✓ should login with Discord token (4 ms)
      ✓ should handle missing Discord token (4 ms)
    Event Handlers
      ✓ should register ready event handler (3 ms)
      ✓ should handle ready event correctly (6 ms)
      ✓ should register error event handler (3 ms)
      ✓ should handle error event correctly (3 ms)
      ✓ should register messageCreate event handler (3 ms)
      ✓ should handle messageCreate event correctly (5 ms)
      ✓ should register messageDelete event handler (4 ms)
      ✓ should handle messageDelete event for user messages (8 ms)
      ✓ should ignore messageDelete for partial messages (5 ms)
      ✓ should ignore messageDelete for messages without author (3 ms)
      ✓ should ignore messageDelete for bot messages (3 ms)
    Module Exports
      ✓ should export initBot function (2 ms)
      ✓ should export client instance (4 ms)

PASS tests/unit/application/services/FeatureFlags.test.js
  FeatureFlags
    initialization
      ✓ should initialize with default flags (4 ms)
      ✓ should accept config overrides (2 ms)
      ✓ should load from environment variables (3 ms)
    isEnabled
      ✓ should return correct flag state (2 ms)
      ✓ should warn and return false for unknown flags (3 ms)
    enable
      ✓ should enable a flag (3 ms)
      ✓ should throw for unknown flags (17 ms)
    disable
      ✓ should disable a flag (2 ms)
      ✓ should throw for unknown flags (2 ms)
    toggle
      ✓ should toggle a flag state (8 ms)
      ✓ should throw for unknown flags (3 ms)
    getAllFlags
      ✓ should return all flags and their states (2 ms)
    getFlagsByPrefix
      ✓ should return flags matching prefix (2 ms)
      ✓ should return empty object for non-matching prefix (2 ms)
    setFlags
      ✓ should set multiple flags at once (2 ms)
      ✓ should throw for unknown flags (3 ms)
      ✓ should throw for non-boolean values (3 ms)
    reset
      ✓ should reset all flags to defaults (2 ms)
    createScopedChecker
      ✓ should create a scoped checker function (2 ms)
    singleton behavior
      ✓ should return same instance from getFeatureFlags (2 ms)
      ✓ should maintain state across getInstance calls (2 ms)
      ✓ should reset singleton with resetFeatureFlags (7 ms)
    environment variable parsing
      ✓ should handle various boolean representations (3 ms)
      ✓ should ignore non-matching environment variables (1 ms)

PASS tests/unit/utils/pluralkitMessageStore.test.js
  PluralKitMessageStore
    store
      ✓ should store message data with timestamp (4 ms)
      ✓ should handle missing fields gracefully (3 ms)
    markAsDeleted
      ✓ should move message from pending to deleted (3 ms)
      ✓ should handle non-existent message gracefully (4 ms)
      ✓ should add deletedAt timestamp (3 ms)
    findDeletedMessage
      ✓ should find recently deleted message by content and channel (3 ms)
      ✓ should not find message with wrong content (3 ms)
      ✓ should not find message with wrong channel (4 ms)
      ✓ should not find expired deleted message (2 ms)
      ✓ should remove message after finding to prevent reuse (4 ms)
    findByContent (legacy)
      ✓ should delegate to findDeletedMessage (3 ms)
    remove
      ✓ should remove a pending message (3 ms)
      ✓ should handle removing non-existent message (5 ms)
    cleanup
      ✓ should remove expired pending messages (4 ms)
      ✓ should remove expired deleted messages (3 ms)
      ✓ should not log when nothing is cleaned (8 ms)
      ✓ should run cleanup periodically (2 ms)
    size
      ✓ should return counts of pending and deleted messages (4 ms)
    clear
      ✓ should clear all data and stop intervals (3 ms)
    edge cases
      ✓ should handle multiple messages with same content in different channels (3 ms)
      ✓ should handle rapid store and delete (4 ms)

PASS tests/unit/utils/contentSimilarity.test.js
  contentSimilarity
    calculateSimilarity
      ✓ should return 0 for null or undefined inputs (4 ms)
      ✓ should return 0 for non-string inputs (2 ms)
      ✓ should return 1 for identical strings (2 ms)
      ✓ should be case-insensitive for longer strings (2 ms)
      ✓ should trim whitespace (2 ms)
      ✓ should return 0 for empty strings after normalization (11 ms)
      ✓ should handle very short strings with special logic (2 ms)
      ✓ should calculate Levenshtein distance for longer strings (2 ms)
      ✓ should handle completely different strings (1 ms)
      ✓ should handle strings with common prefixes (2 ms)
      ✓ should handle strings with common suffixes (2 ms)
      ✓ should handle strings with transpositions (3 ms)
      ✓ should handle strings with insertions (2 ms)
      ✓ should handle strings with deletions (2 ms)
      ✓ should handle repeated characters (2 ms)
      ✓ should handle special characters (1 ms)
      ✓ should handle unicode characters (1 ms)
    areContentsSimilar
      ✓ should use default threshold of 0.8 (8 ms)
      ✓ should respect custom threshold (3 ms)
      ✓ should log debug information (2 ms)
      ✓ should handle edge cases (2 ms)
      ✓ should work with typical proxy message variations (2 ms)
      ✓ should differentiate between actually different messages (2 ms)
    getProxyDelayTime
      ✓ should return a consistent delay time (2 ms)
      ✓ should return the same value on multiple calls (2 ms)
      ✓ should return a reasonable delay for proxy systems (2 ms)

PASS tests/unit/core/personality/PersonalityValidator.test.js
  PersonalityValidator
    validatePersonalityData
      ✓ should validate valid personality data (2 ms)
      ✓ should reject invalid personality data (3 ms)
      ✓ should require fullName (2 ms)
      ✓ should require addedBy (1 ms)
      ✓ should validate optional field types (2 ms)
    validatePersonalityName
      ✓ should validate valid names (2 ms)
      ✓ should reject empty or invalid names (2 ms)
      ✓ should reject names with leading/trailing spaces (1 ms)
      ✓ should reject names that are too short or too long (11 ms)
      ✓ should reject names with invalid characters (2 ms)
    validateAlias
      ✓ should validate valid aliases (1 ms)
      ✓ should reject invalid aliases (3 ms)
    validateUserId
      ✓ should validate valid Discord user IDs (1 ms)
      ✓ should reject invalid user IDs (2 ms)
    isReservedName
      ✓ should identify reserved names (3 ms)
      ✓ should be case-insensitive (3 ms)
      ✓ should not flag non-reserved names (1 ms)
    validateRegistration
      ✓ should validate valid registration (2 ms)
      ✓ should reject if name already exists (2 ms)
      ✓ should reject reserved names (2 ms)
      ✓ should reject if fullName mismatch (1 ms)
    validateRemoval
      ✓ should allow owner to remove their personality (1 ms)
      ✓ should prevent non-owner from removing personality (8 ms)
      ✓ should reject if personality not found (2 ms)
      ✓ should allow bot owner to remove any personality (1 ms)
    sanitizePersonalityData
      ✓ should trim string fields (2 ms)
      ✓ should ensure arrays are arrays (2 ms)
      ✓ should remove unexpected fields (2 ms)

PASS tests/unit/utils/webhookCache.test.js
  webhookCache
    getOrCreateWebhook
      ✓ should create a new webhook if none exists (8 ms)
      ✓ should use existing webhook if one exists (2 ms)
      ✓ should use dynamic webhook name from global client (2 ms)
      ✓ should throw error when webhook has no token (19 ms)
      ✓ should throw error when webhook has no id (2 ms)
      ✓ should handle missing permissions gracefully (2 ms)
      ✓ should return cached webhook on subsequent calls (2 ms)
      thread handling
        ✓ should handle threads by using parent channel webhook (3 ms)
        ✓ should throw error if thread has no parent channel (10 ms)
        ✓ should use cached thread webhook on subsequent calls (2 ms)
        ✓ should validate parent webhook token for threads (8 ms)
    clearWebhookCache
      ✓ should clear webhook for specific channel (3 ms)
      ✓ should clear thread webhook cache (3 ms)
      ✓ should handle clearing non-existent webhook gracefully (2 ms)
    clearAllWebhookCaches
      ✓ should clear all cached webhooks (2 ms)
    utility functions
      ✓ getCacheSize should return correct size (2 ms)
      ✓ hasWebhook should correctly identify cached webhooks (2 ms)
      ✓ getActiveWebhooks should return the active webhooks set (2 ms)

PASS tests/unit/bot.referenced.media.test.js
  Referenced Message Media Tests
    ✓ should properly format a text message referencing a message with an image (5 ms)
    ✓ should properly format a text message referencing a message with audio (12 ms)
    ✓ should properly format a multimodal message with image referencing a message with audio (5 ms)
    ✓ should properly format a multimodal message with audio referencing a message with image (4 ms)
    ✓ should correctly process a full AI request with referenced media (4 ms)

PASS tests/unit/core/api/ProfileInfoClient.test.js
  ProfileInfoClient
    constructor
      ✓ should use default values when no options provided (4 ms)
      ✓ should use provided options (2 ms)
    fetch
      ✓ should fetch data successfully (4 ms)
      ✓ should merge custom headers with defaults (12 ms)
      ✓ should handle non-ok response (3 ms)
      ✓ should handle timeout (3 ms)
      ✓ should handle abort error with type property (3 ms)
      ✓ should handle network errors (4 ms)
      ✓ should handle JSON parsing errors (2 ms)
      ✓ should clear timeout even on error (2 ms)
      ✓ should log debug messages (3 ms)
    validateProfileData
      ✓ should return false for null data (2 ms)
      ✓ should return false for undefined data (3 ms)
      ✓ should return true and warn for missing name field (3 ms)
      ✓ should return true and warn for missing id field (8 ms)
      ✓ should return true for valid data with both fields (2 ms)
      ✓ should return true for data with extra fields (2 ms)
      ✓ should warn for both missing fields (2 ms)

PASS tests/unit/application/commands/utility/VolumeTestCommand.test.js
  VolumeTestCommand
    Command Creation
      ✓ should create command with correct metadata (3 ms)
    Execute - Authorization
      ✓ should reject if bot owner ID is not configured (3 ms)
      ✓ should reject non-owner users (2 ms)
    Execute - Volume Testing
      ✓ should test volume successfully for local environment (5 ms)
      ✓ should test volume for Railway environment (3 ms)
      ✓ should handle multiple test writes for persistence check (8 ms)
      ✓ should provide text fallback when embeds not supported (3 ms)
      ✓ should handle many files gracefully (3 ms)
    Error Handling
      ✓ should handle file system errors gracefully (2 ms)
      ✓ should handle read errors gracefully (3 ms)

PASS tests/unit/domain/personality/PersonalityRepository.test.js
  PersonalityRepository
    interface methods
      ✓ should define save method (2 ms)
      ✓ should define findById method (1 ms)
      ✓ should define findByOwner method (2 ms)
      ✓ should define findAll method (1 ms)
      ✓ should define exists method (1 ms)
      ✓ should define delete method (1 ms)
      ✓ should define nextId method (2 ms)
    unimplemented methods
      ✓ should throw error for save (19 ms)
      ✓ should throw error for findById (3 ms)
      ✓ should throw error for findByOwner (7 ms)
      ✓ should throw error for findAll (2 ms)
      ✓ should throw error for exists (2 ms)
      ✓ should throw error for delete (2 ms)
      ✓ should throw error for nextId (2 ms)
    mock implementation
      ✓ should allow implementation of interface (4 ms)
    interface contract
      ✓ should be extendable (2 ms)
      ✓ should maintain method signatures (2 ms)

PASS tests/unit/utils/LRUCache.test.js
  LRUCache
    constructor
      ✓ should create cache with default options (2 ms)
      ✓ should create cache with custom options (3 ms)
      ✓ should throw error for invalid maxSize (21 ms)
    basic operations
      ✓ should set and get values (2 ms)
      ✓ should check if key exists (8 ms)
      ✓ should delete keys (2 ms)
      ✓ should clear all entries (2 ms)
      ✓ should support method chaining (1 ms)
    LRU eviction
      ✓ should evict least recently used item when full (3 ms)
      ✓ should update LRU order on get (3 ms)
      ✓ should update LRU order on has (5 ms)
      ✓ should update existing keys without eviction (4 ms)
    TTL expiration
      ✓ should expire entries after TTL (3 ms)
      ✓ should cleanup expired entries (8 ms)
      ✓ should call onEvict for expired entries (3 ms)
    iteration methods
      ✓ should iterate over keys (2 ms)
      ✓ should iterate over values (2 ms)
      ✓ should iterate over entries (3 ms)
    statistics
      ✓ should return cache stats (2 ms)
    edge cases
      ✓ should handle cache of size 1 (2 ms)
      ✓ should handle various key types (4 ms)
      ✓ should call onEvict when clearing cache (3 ms)

PASS tests/unit/utils/messageFormatter.test.js
  messageFormatter
    splitByCharacterLimit
      ✓ should return content as is when under limit (2 ms)
      ✓ should handle empty or null content (1 ms)
      ✓ should split long text at word boundaries (2 ms)
      ✓ should handle text without spaces (3 ms)
      ✓ should trim whitespace between chunks (2 ms)
    processSentence
      ✓ should add sentence to current chunk when within limit (2 ms)
      ✓ should start new chunk when sentence would exceed limit (1 ms)
      ✓ should split very long sentences (1 ms)
      ✓ should handle empty current chunk (6 ms)
    processLine
      ✓ should add line to current chunk with newline (2 ms)
      ✓ should start new chunk when line would exceed limit (2 ms)
      ✓ should split very long lines by sentences (2 ms)
      ✓ should handle empty current chunk (2 ms)
    processParagraph
      ✓ should add paragraph to current chunk with double newline (2 ms)
      ✓ should start new chunk when paragraph would exceed limit (1 ms)
      ✓ should split very long paragraphs by lines (2 ms)
      ✓ should handle empty current chunk (1 ms)
    splitMessage
      ✓ should return content as is when under limit (2 ms)
      ✓ should handle empty or null content (2 ms)
      ✓ should split by paragraphs first (2 ms)
      ✓ should handle very long paragraphs (2 ms)
      ✓ should preserve paragraph structure when possible (6 ms)
      ✓ should handle complex content with multiple paragraphs and lines (2 ms)
    markErrorContent
      ✓ should return empty string for falsy content (2 ms)
      ✓ should add error prefix for connection + unstable combination (3 ms)
      ✓ should add error prefix for standard error patterns (2 ms)
      ✓ should not add prefix for normal content (1 ms)
      ✓ should skip marker patterns to avoid duplication (2 ms)
    prepareMessageData
      ✓ should prepare basic message data (2 ms)
      ✓ should handle thread messages (2 ms)
      ✓ should handle options with embed (1 ms)
      ✓ should handle options with files (2 ms)
      ✓ should handle options with attachments (2 ms)
      ✓ should merge files and attachments (2 ms)
      ✓ should preserve original channel for threads (1 ms)

PASS tests/unit/core/personality/PersonalityRegistry.maxWordCount.test.js
  PersonalityRegistry - Max Word Count Tracking
    maxAliasWordCount getter
      ✓ should return 1 by default when no aliases exist (4 ms)
      ✓ should calculate max word count on first access if not set (10 ms)
      ✓ should not recalculate if value already exists (1 ms)
    setAlias with word count tracking
      ✓ should update max word count when adding longer alias (3 ms)
      ✓ should not update max when adding shorter alias (2 ms)
      ✓ should handle aliases with extra spaces correctly (1 ms)
      ✓ should log when new max is set (1 ms)
    removeAlias with word count tracking
      ✓ should recalculate max when removing alias with max word count (2 ms)
      ✓ should not recalculate when removing shorter alias (2 ms)
      ✓ should handle removing non-existent alias gracefully (2 ms)
    remove personality with word count tracking
      ✓ should recalculate max when removing personality with longest alias (2 ms)
      ✓ should not recalculate when removing personality with shorter aliases (1 ms)
    loadFromObjects with word count tracking
      ✓ should calculate max word count when loading data (7 ms)
      ✓ should handle empty aliases gracefully (1 ms)
      ✓ should skip invalid aliases during load (2 ms)
    clear with word count reset
      ✓ should reset max word count when clearing registry (1 ms)
    updateMaxWordCount
      ✓ should correctly identify all multi-word aliases (1 ms)
      ✓ should log when no multi-word aliases exist (3 ms)
    getWordCount
      ✓ should count words correctly (3 ms)
      ✓ should handle extra spaces (1 ms)
      ✓ should handle empty strings (1 ms)

PASS tests/unit/domain/conversation/ConversationRepository.test.js
  ConversationRepository
    interface methods
      ✓ should define save method (2 ms)
      ✓ should define findById method (2 ms)
      ✓ should define findActiveByUser method (2 ms)
      ✓ should define findByMessageId method (1 ms)
      ✓ should define findByPersonality method (2 ms)
      ✓ should define delete method (1 ms)
      ✓ should define cleanupExpired method (2 ms)
    unimplemented methods
      ✓ should throw error for save (19 ms)
      ✓ should throw error for findById (2 ms)
      ✓ should throw error for findActiveByUser (8 ms)
      ✓ should throw error for findByMessageId (2 ms)
      ✓ should throw error for findByPersonality (3 ms)
      ✓ should throw error for delete (2 ms)
      ✓ should throw error for cleanupExpired (2 ms)
    mock implementation
      ✓ should allow implementation of interface (6 ms)
    interface contract
      ✓ should be extendable (1 ms)
      ✓ should maintain method signatures (3 ms)

PASS tests/unit/commands/handlers/debug.test.js
  Debug Command
    ✓ should show usage information when no subcommand is provided (38 ms)
    ✓ should show error for unknown subcommand (2 ms)
    ✓ should handle clearwebhooks subcommand (2 ms)
    ✓ should handle unverify subcommand when user is verified (4 ms)
    ✓ should handle unverify subcommand when user is not verified (3 ms)
    ✓ should handle clearconversation subcommand (2 ms)
    ✓ should handle clearauth subcommand (2 ms)
    ✓ should handle clearmessages subcommand (2 ms)
    ✓ should handle stats subcommand (2 ms)
    ✓ should handle errors in clearconversation (2 ms)
    ✓ should handle errors in clearauth (8 ms)
    ✓ should handle errors in clearmessages (2 ms)
    ✓ should expose correct metadata with administrator permission (2 ms)

PASS tests/unit/bot.message.reference.test.js
  Message Reference Handling
    ✓ should correctly format referenced messages for the API (4 ms)
    ✓ should correctly format referenced messages from bot/assistant (9 ms)
    ✓ should correctly handle referenced messages with image content (2 ms)
    ✓ should handle multimodal content in the user message with references (3 ms)
    ✓ should handle regular user messages without references (3 ms)

PASS tests/unit/domain/authentication/AuthenticationEvents.test.js
  AuthenticationEvents
    UserAuthenticated
      ✓ should create event with required fields (5 ms)
      ✓ should validate required fields (17 ms)
    UserTokenExpired
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (3 ms)
    UserTokenRefreshed
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (9 ms)
      ✓ should allow null oldToken (2 ms)
    UserNsfwVerified
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (3 ms)
    UserNsfwVerificationCleared
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (4 ms)
    UserBlacklisted
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (2 ms)
    UserUnblacklisted
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (3 ms)
    AuthenticationDenied
      ✓ should create event with required fields (8 ms)
      ✓ should validate required fields (3 ms)
    ProxyAuthenticationAttempted
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (2 ms)
    Event immutability
      ✓ should not be affected by payload modifications after creation (2 ms)
    Event metadata
      ✓ should include standard DomainEvent metadata (2 ms)

PASS tests/unit/commands/utils/commandValidator.test.js
  Command Validator
    isAdmin
      ✓ should return false for DM channels (3 ms)
      ✓ should return false for regular users (3 ms)
      ✓ should return true for users with Administrator permission (2 ms)
      ✓ should handle cases with no member object (2 ms)
    canManageMessages
      ✓ should return false for DM channels (2 ms)
      ✓ should return false for regular users (3 ms)
      ✓ should return true for users with ManageMessages permission (2 ms)
      ✓ should handle cases with no member object (2 ms)
    isNsfwChannel
      ✓ should use channelUtils.isChannelNSFW (2 ms)
    createDirectSend
      ✓ should use utils.createDirectSend (2 ms)
      ✓ should return a function that calls message.channel.send (3 ms)
    getPermissionErrorMessage
      ✓ should return admin error for ADMINISTRATOR permission (2 ms)
      ✓ should return mod error for MANAGE_MESSAGES permission (2 ms)
      ✓ should return NSFW error for NSFW_CHANNEL permission (3 ms)
      ✓ should return generic error for unknown permissions (2 ms)

PASS tests/unit/domain/shared/DomainEventBus.test.js
  DomainEventBus
    subscribe
      ✓ should subscribe handler to event type (2 ms)
      ✓ should allow multiple handlers for same event (1 ms)
      ✓ should require handler to be a function (23 ms)
      ✓ should support wildcard subscription (2 ms)
    unsubscribe
      ✓ should remove handler when unsubscribe called (1 ms)
      ✓ should only remove specific handler (6 ms)
      ✓ should handle multiple unsubscribe calls gracefully (1 ms)
    publish
      ✓ should call all handlers for event type (5 ms)
      ✓ should call wildcard handlers for any event (2 ms)
      ✓ should require DomainEvent instance (2 ms)
      ✓ should handle no handlers gracefully (2 ms)
      ✓ should handle async handlers (2 ms)
      ✓ should continue if one handler fails (2 ms)
    middleware
      ✓ should apply middleware before handlers (4 ms)
      ✓ should apply multiple middleware in order (4 ms)
      ✓ should filter event if middleware returns falsy (4 ms)
      ✓ should allow middleware to transform events (3 ms)
      ✓ should require middleware to be a function (1 ms)
    clear
      ✓ should remove all handlers and middleware (7 ms)
    hasHandlers
      ✓ should return false when no handlers (1 ms)
      ✓ should return true when specific handler exists (2 ms)
      ✓ should return true when only wildcard handler exists (2 ms)

PASS tests/unit/domain/authentication/TokenService.test.js
  TokenService
    interface methods
      ✓ should define exchangeToken method (2 ms)
      ✓ should define validateToken method (2 ms)
      ✓ should define refreshToken method (1 ms)
      ✓ should define revokeToken method (2 ms)
    unimplemented methods
      ✓ should throw error for exchangeToken (25 ms)
      ✓ should throw error for validateToken (2 ms)
      ✓ should throw error for refreshToken (3 ms)
      ✓ should throw error for revokeToken (3 ms)
    mock implementation
      ✓ should allow implementation of interface (4 ms)
      ✓ should handle token expiration (2 ms)
    interface contract
      ✓ should be extendable (2 ms)
      ✓ should maintain method signatures (1 ms)

PASS tests/unit/domain/ai/AIModel.test.js
  AIModel
    constructor
      ✓ should create model with name and path (4 ms)
      ✓ should set default capabilities (2 ms)
      ✓ should accept custom capabilities (2 ms)
      ✓ should validate name (16 ms)
      ✓ should validate path (2 ms)
    supports
      ✓ should always support text (2 ms)
      ✓ should check image support (8 ms)
      ✓ should check audio support (2 ms)
      ✓ should return false for unknown types (1 ms)
    isCompatibleWith
      ✓ should accept text content for text-only model (2 ms)
      ✓ should reject image content for text-only model (2 ms)
      ✓ should reject audio content for text-only model (2 ms)
      ✓ should accept all content for multimodal model (1 ms)
      ✓ should handle null content (1 ms)
      ✓ should handle content without items (2 ms)
    getParameters
      ✓ should return model parameters (2 ms)
    toJSON
      ✓ should serialize to JSON (2 ms)
    createDefault
      ✓ should create default Claude model (2 ms)
    equals
      ✓ should compare models by name and path (6 ms)
      ✓ should compare capabilities (1 ms)
      ✓ should handle null comparison (2 ms)
    immutability
      ✓ should not allow name modification (2 ms)
      ✓ should not allow path modification (2 ms)
      ✓ should not allow capabilities modification (2 ms)

PASS tests/unit/utils/contentSanitizer.test.js
  Content Sanitizer
    sanitizeContent
      ✓ should return empty string for null or undefined input (2 ms)
      ✓ should remove null bytes and control characters (5 ms)
      ✓ should preserve newlines and tabs (2 ms)
      ✓ should remove unicode escape sequences (2 ms)
      ✓ should remove non-printable characters (1 ms)
      ✓ should preserve regular unicode characters (1 ms)
      ✓ should handle complex mixed content (2 ms)
      ✓ should log warning on sanitization error (1 ms)
      ✓ should handle very long strings efficiently (2 ms)
    sanitizeApiText
      ✓ should return empty string for null or undefined input (2 ms)
      ✓ should remove control characters but preserve most content (2 ms)
      ✓ should preserve newlines, tabs, and carriage returns (1 ms)
      ✓ should NOT remove unicode escape sequences (1 ms)
      ✓ should preserve all printable and extended characters (1 ms)
      ✓ should handle mixed content appropriately (1 ms)
    needsSanitization
      ✓ should return false for null, undefined, or non-string input (6 ms)
      ✓ should return false for clean content (2 ms)
      ✓ should return true for content with control characters (1 ms)
      ✓ should return true for content with escape sequences (2 ms)
      ✓ should return true for content with non-printable characters (2 ms)
    sanitizeWithInfo
      ✓ should handle null or undefined input (2 ms)
      ✓ should indicate no changes for clean content (2 ms)
      ✓ should provide info about sanitization changes (1 ms)
      ✓ should handle unicode escape sequences (1 ms)
      ✓ should provide accurate count for complex content (2 ms)
    Edge cases
      ✓ should handle strings with only control characters (2 ms)
      ✓ should handle strings with only escape sequences (1 ms)
      ✓ should handle empty strings after sanitization (1 ms)
      ✓ should handle very long escape sequences (2 ms)
      ✓ should preserve space characters (1 ms)

PASS tests/unit/domain/conversation/ConversationId.test.js
  ConversationId
    constructor
      ✓ should create ConversationId with valid userId and channelId (2 ms)
      ✓ should require userId (14 ms)
      ✓ should require userId to be string (2 ms)
      ✓ should require channelId (3 ms)
      ✓ should require channelId to be string (3 ms)
    forDM
      ✓ should create ConversationId for DM (7 ms)
      ✓ should validate userId (2 ms)
    isDM
      ✓ should return true for DM conversations (1 ms)
      ✓ should return false for channel conversations (1 ms)
    toString
      ✓ should return string representation (1 ms)
      ✓ should work for DM conversations (2 ms)
    toJSON
      ✓ should return JSON representation (1 ms)
    equals
      ✓ should return true for equal ConversationIds (2 ms)
      ✓ should return false for different userIds (2 ms)
      ✓ should return false for different channelIds (2 ms)
      ✓ should return false for null or non-ConversationId (2 ms)
      ✓ should handle self-comparison (1 ms)
    fromString
      ✓ should parse valid conversation ID string (7 ms)
      ✓ should parse DM conversation ID (1 ms)
      ✓ should handle channel IDs with colons (2 ms)
      ✓ should throw for invalid string (4 ms)
      ✓ should throw for invalid format (2 ms)
    immutability
      ✓ should be immutable (1 ms)

PASS tests/unit/core/authentication/NsfwVerificationManager.test.js
  NsfwVerificationManager
    Constructor and Initialization
      ✓ should initialize with empty verifications (2 ms)
    storeNsfwVerification
      ✓ should store NSFW verification for a user (8 ms)
      ✓ should update existing verification (8 ms)
    clearVerification
      ✓ should clear verification for a user (2 ms)
      ✓ should return false when clearing non-existent verification (2 ms)
    isNsfwVerified
      ✓ should return true for verified users (2 ms)
      ✓ should return false for users with false verification (2 ms)
      ✓ should return false for non-existent users (1 ms)
      ✓ should return false for users with invalid verification data (1 ms)
    getAllVerifications
      ✓ should return all verifications (2 ms)
      ✓ should return empty object when no verifications (1 ms)
    setAllVerifications
      ✓ should set all verifications at once (1 ms)
      ✓ should handle null/undefined input (1 ms)
      ✓ should replace existing verifications (8 ms)
    getVerificationInfo
      ✓ should return verification info for a user (2 ms)
      ✓ should return null for non-existent user (1 ms)
    requiresNsfwVerification
      ✓ should return false for DM channels (2 ms)
      ✓ should return true for NSFW guild channels (2 ms)
      ✓ should return false for non-NSFW guild channels (2 ms)
    shouldAutoVerify
      ✓ should auto-verify in NSFW channels (1 ms)
      ✓ should not auto-verify in non-NSFW channels (1 ms)
      ✓ should not auto-verify in DM channels (3 ms)
    checkProxySystem
      ✓ should detect PluralKit proxy messages (2 ms)
      ✓ should not detect regular bot messages as proxy (1 ms)
      ✓ should not detect regular user messages as proxy (1 ms)
    verifyAccess
      ✓ should block non-verified users in non-NSFW channels (2 ms)
      ✓ should auto-verify non-verified users in NSFW channels (2 ms)
      ✓ should allow access for already verified users in NSFW channels only (2 ms)
      ✓ should auto-verify proxy users in NSFW channels (2 ms)
      ✓ should allow proxy messages from verified users in NSFW channels (7 ms)

2025-06-19 03:39:46 [31merror[39m: [ResetCommand] Error: PersonalityApplicationService not available
2025-06-19 03:39:46 [31merror[39m: [ResetCommand] Error: ConversationManager not available
2025-06-19 03:39:46 [31merror[39m: [ResetCommand] Error resetting conversation: Database error
2025-06-19 03:39:46 [31merror[39m: [ResetCommand] Error: Database error
PASS tests/unit/application/commands/conversation/ResetCommand.test.js
  ResetCommand
    command metadata
      ✓ should have correct properties (3 ms)
      ✓ should have correct options (10 ms)
    execute
      ✓ should reset conversation successfully (4 ms)
      ✓ should show new system indicator when feature flag enabled (2 ms)
      ✓ should handle missing personality name (4 ms)
      ✓ should handle slash command format (2 ms)
      ✓ should handle personality not found (2 ms)
      ✓ should handle no active conversation (2 ms)
      ✓ should handle missing personality service (23 ms)
      ✓ should handle missing conversation manager (10 ms)
      ✓ should handle errors gracefully (5 ms)

PASS tests/unit/domain/conversation/ConversationSettings.test.js
  ConversationSettings
    constructor
      ✓ should create with default values (3 ms)
      ✓ should create with custom values (7 ms)
      ✓ should accept partial custom values (1 ms)
    validation
      ✓ should validate autoResponseEnabled as boolean (18 ms)
      ✓ should validate autoResponseDelay as non-negative number (3 ms)
      ✓ should validate mentionOnly as boolean (2 ms)
      ✓ should validate timeoutMs as non-negative number (2 ms)
      ✓ should allow zero values for numeric fields (2 ms)
    withAutoResponse
      ✓ should create new settings with updated autoResponseEnabled (2 ms)
      ✓ should preserve immutability (2 ms)
    withAutoResponseDelay
      ✓ should create new settings with updated delay (2 ms)
      ✓ should validate new delay (3 ms)
    withMentionOnly
      ✓ should create new settings with updated mentionOnly (7 ms)
    withTimeout
      ✓ should create new settings with updated timeout (2 ms)
      ✓ should validate new timeout (2 ms)
    toJSON
      ✓ should return JSON representation (2 ms)
    equals
      ✓ should return true for equal settings (2 ms)
      ✓ should return false for different settings (3 ms)
      ✓ should handle self-comparison (2 ms)
    createDefault
      ✓ should create settings with default values (1 ms)
    createForDM
      ✓ should create settings optimized for DM (1 ms)
    immutability
      ✓ should not be affected by JSON modifications (1 ms)

PASS tests/unit/core/authentication/UserTokenManager.test.js
  UserTokenManager
    Constructor
      ✓ should initialize with provided configuration (4 ms)
    getAuthorizationUrl
      ✓ should return correctly formatted authorization URL (2 ms)
    exchangeCodeForToken
      ✓ should successfully exchange code for token (4 ms)
      ✓ should handle failed exchange with error message (2 ms)
      ✓ should handle network errors (3 ms)
    storeUserToken
      ✓ should store token with expiration date (3 ms)
    getUserToken
      ✓ should return token for existing user (3 ms)
      ✓ should return null for non-existent user (6 ms)
    hasValidToken
      ✓ should return true for valid unexpired token (2 ms)
      ✓ should return false for expired token (1 ms)
      ✓ should return false for non-existent user (1 ms)
      ✓ should handle old format tokens without expiresAt (3 ms)
    deleteUserToken
      ✓ should delete existing token (2 ms)
      ✓ should return true for non-existent token (2 ms)
    getTokenAge
      ✓ should calculate token age in days (2 ms)
      ✓ should return null for non-existent user (2 ms)
      ✓ should return null for token without createdAt (2 ms)
    getTokenExpirationInfo
      ✓ should return expiration info for valid token (3 ms)
      ✓ should return null for token without expiresAt (3 ms)
      ✓ should handle expired tokens (2 ms)
    cleanupExpiredTokens
      ✓ should remove expired tokens (3 ms)
      ✓ should handle no expired tokens (2 ms)
    getAllTokens
      ✓ should return all tokens (2 ms)
    setAllTokens
      ✓ should set all tokens and migrate old format (3 ms)
      ✓ should handle null/undefined tokens (3 ms)

PASS tests/unit/domain/personality/PersonalityDataRepository.test.js
  PersonalityDataRepository
    getExtendedProfile
      ✓ should return cached profile if available (5 ms)
      ✓ should load migrated data if available (3 ms)
      ✓ should auto-migrate from backup data when no migrated data exists (5 ms)
      ✓ should return null when no data exists (2 ms)
    hasExtendedData
      ✓ should return true if migrated data exists (2 ms)
      ✓ should return true if backup data exists (11 ms)
      ✓ should return false if no data exists (1 ms)
    getChatHistory
      ✓ should return chat history with filtering options (2 ms)
    clearCache
      ✓ should clear cache for specific personality (2 ms)
      ✓ should clear entire cache when no personality specified (2 ms)

PASS tests/unit/commands/middleware/permissions.test.js
  Permissions Middleware
    ✓ should allow commands with no permissions required (3 ms)
    ✓ should allow when command module is not provided (2 ms)
    ✓ should check ADMINISTRATOR permission correctly (3 ms)
    ✓ should check MANAGE_MESSAGES permission correctly (11 ms)
    ✓ should check NSFW_CHANNEL permission correctly (2 ms)
    ✓ should check multiple permissions correctly (3 ms)
    ✓ should log warnings for unknown permissions (2 ms)

PASS tests/unit/referenceHandler.media.test.js
  processMessageLinks - Media Marker Extraction
    Image marker extraction
      ✓ should extract image URL from [Image: url] marker in linked message (15 ms)
      ✓ should extract multiple image markers but only return the first (2 ms)
    Audio marker extraction
      ✓ should extract audio URL from [Audio: url] marker in linked message (3 ms)
    Mixed media markers
      ✓ should prioritize audio over image when both markers exist (4 ms)
      ✓ should combine direct attachments with media markers (3 ms)
    Edge cases
      ✓ should handle malformed media markers gracefully (3 ms)
      ✓ should not extract media markers from personality messages (2 ms)
      ✓ should avoid duplicate media markers in content (3 ms)

PASS tests/unit/domain/ai/AIEvents.test.js
  AI Events
    AIRequestCreated
      ✓ should create event with payload (7 ms)
      ✓ should set event metadata (3 ms)
      ✓ should throw error when missing required fields (19 ms)
    AIRequestSent
      ✓ should create event with payload (2 ms)
      ✓ should throw error when missing required fields (4 ms)
    AIResponseReceived
      ✓ should create event with payload (2 ms)
      ✓ should throw error when missing required fields (5 ms)
    AIRequestFailed
      ✓ should create event with payload (3 ms)
      ✓ should throw error when missing required fields (2 ms)
    AIRequestRetried
      ✓ should create event with payload (8 ms)
      ✓ should throw error when missing required fields (4 ms)
    AIRequestRateLimited
      ✓ should create event with payload (2 ms)
      ✓ should throw error when missing required fields (2 ms)
    AIContentSanitized
      ✓ should create event with payload (1 ms)
      ✓ should throw error when missing required fields (3 ms)
    AIErrorDetected
      ✓ should create event with payload (2 ms)
      ✓ should throw error when missing required fields (2 ms)
    Event serialization
      ✓ should serialize to JSON (3 ms)
    Event reconstruction
      ✓ should reconstruct from JSON (2 ms)

PASS tests/unit/core/api/ProfileInfoCache.test.js
  ProfileInfoCache
    cache expiration logic
      ✓ should return cached data when not expired (4 ms)
      ✓ should return null and remove expired data (3 ms)
      ✓ should return null for non-existent entries (2 ms)
      ✓ should store data with current timestamp (2 ms)
      ✓ should clear all cached data (4 ms)
      ✓ should report correct cache size (2 ms)
      ✓ should use custom cache duration when provided (2 ms)
      ✓ should use custom log prefix when provided (3 ms)
    LRU eviction
      ✓ should evict least recently used profiles when reaching max size (3 ms)
      ✓ should update LRU order when accessing profiles (9 ms)
    edge cases
      ✓ should handle cache operations with null/undefined data (2 ms)
      ✓ should handle empty string profile names (2 ms)

PASS tests/unit/utils/rateLimiter.test.js
  RateLimiter
    constructor
      ✓ should initialize with default options (4 ms)
      ✓ should initialize with custom options (3 ms)
    enqueue
      ✓ should execute requests immediately when queue is empty (8 ms)
      ✓ should handle request execution errors gracefully (3 ms)
      ✓ should set and clear currentRequestContext during execution (4 ms)
    processQueue
      ✓ should respect minRequestSpacing between requests (3 ms)
      ✓ should handle concurrent requests up to maxConcurrent limit (2 ms)
      ✓ should enter cooldown mode after too many consecutive rate limits (3 ms)
      ✓ should not process requests while in cooldown (2 ms)
      ✓ should add jitter to prevent synchronized requests (5 ms)
    handleRateLimit
      ✓ should implement exponential backoff for rate limits (3 ms)
      ✓ should use retry-after header when provided (2 ms)
      ✓ should return max retries when consecutive rate limits exceed threshold (2 ms)
      ✓ should give up after max retries (10 ms)
      ✓ should implement proper exponential backoff for multiple retries (2 ms)
    recordSuccess
      ✓ should reset consecutive rate limits counter on success (2 ms)
      ✓ should not log when counter is already zero (2 ms)
    getCurrentRequestContext
      ✓ should return null when no request is executing (2 ms)
      ✓ should return context during request execution (2 ms)
    integration scenarios
      ✓ should handle multiple requests with rate limiting and backoff (3 ms)
      ✓ should recover from cooldown and process queued requests (3 ms)

PASS tests/unit/webhook.duplication.test.js
  Webhook Message Duplication Fix
    Webhook identification and handling
      ✓ should correctly identify and ignore our own webhook messages (3 ms)
      ✓ handles webhook messages by personality name (2 ms)

PASS tests/unit/dataStorage.test.js
  dataStorage
    initStorage
      ✓ should create the data directory if it does not exist (3 ms)
      ✓ should handle errors during initialization (17 ms)
    saveData
      ✓ should save data to a file (2 ms)
      ✓ should handle errors during save (3 ms)
    loadData
      ✓ should load data from a file (3 ms)
      ✓ should return null for files that do not exist (3 ms)
      ✓ should handle parse errors (6 ms)
      ✓ should handle other file reading errors (9 ms)
    Integration Test
      ✓ should save and load data correctly (2 ms)

PASS tests/unit/aiRequestManager.deduplication.test.js
  AIRequestManager - Request Deduplication
    createRequestId with message ID
      ✓ should include message ID in request ID when available (11 ms)
      ✓ should create different IDs for same content with different message IDs (3 ms)
      ✓ should still work without message ID (2 ms)
      ✓ should include content hash for better uniqueness (1 ms)
      ✓ should handle multimodal content with message ID (2 ms)
      ✓ should handle reference messages with message ID (2 ms)

PASS tests/unit/domain/conversation/ConversationEvents.test.js
  ConversationEvents
    ConversationStarted
      ✓ should create event with required fields (5 ms)
      ✓ should validate required fields (18 ms)
      ✓ should allow null personalityId (2 ms)
    MessageAdded
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (2 ms)
    PersonalityAssigned
      ✓ should create event with required fields (2 ms)
      ✓ should validate required fields (4 ms)
      ✓ should allow null previousPersonalityId (2 ms)
    ConversationSettingsUpdated
      ✓ should create event with required fields (8 ms)
      ✓ should validate required fields (3 ms)
    ConversationEnded
      ✓ should create event with required fields (5 ms)
      ✓ should validate required fields (3 ms)
      ✓ should accept timeout reason (2 ms)
    Event immutability
      ✓ should not be affected by payload modifications after creation (3 ms)
    Event metadata
      ✓ should include standard DomainEvent metadata (3 ms)

PASS tests/unit/domain/authentication/AuthenticationRepository.test.js
  AuthenticationRepository
    interface methods
      ✓ should define save method (2 ms)
      ✓ should define findByUserId method (2 ms)
      ✓ should define findBlacklisted method (1 ms)
      ✓ should define findExpiredTokens method (1 ms)
      ✓ should define delete method (1 ms)
      ✓ should define countAuthenticated method (1 ms)
    unimplemented methods
      ✓ should throw error for save (22 ms)
      ✓ should throw error for findByUserId (2 ms)
      ✓ should throw error for findBlacklisted (9 ms)
      ✓ should throw error for findExpiredTokens (3 ms)
      ✓ should throw error for delete (2 ms)
      ✓ should throw error for countAuthenticated (2 ms)
    mock implementation
      ✓ should allow implementation of interface (4 ms)
    interface contract
      ✓ should be extendable (2 ms)
      ✓ should maintain method signatures (3 ms)

PASS tests/unit/adapters/index.test.js
  Main Adapters Index
    ✓ should have all expected top-level exports (1 ms)
    namespace exports
      ✓ should export ai namespace (2 ms)
      ✓ should export discord namespace (2 ms)
      ✓ should export persistence namespace (10 ms)
    convenience exports
      ✓ should export AI adapters directly (1 ms)
      ✓ should export Discord adapters directly (1 ms)
      ✓ should export persistence adapters directly (1 ms)

PASS tests/unit/domain/personality/UserId.test.js
  UserId
    constructor
      ✓ should create valid UserId with Discord snowflake (5 ms)
      ✓ should reject whitespace around ID (20 ms)
      ✓ should reject empty string (4 ms)
      ✓ should reject null (4 ms)
      ✓ should reject undefined (5 ms)
      ✓ should reject non-string values (6 ms)
    Discord snowflake validation
      ✓ should accept valid Discord snowflakes (17 ms)
      ✓ should reject IDs with non-numeric characters (7 ms)
      ✓ should accept IDs of any numeric length (4 ms)
      ✓ should accept long numeric IDs (3 ms)
      ✓ should accept boundary lengths (3 ms)
    toJSON
      ✓ should return string value (4 ms)
    fromString
      ✓ should create UserId from string (4 ms)
      ✓ should apply same validation rules (6 ms)
    value object equality
      ✓ should be equal for same values (3 ms)
      ✓ should not be equal for different values (4 ms)
      ✓ should handle null/undefined gracefully (3 ms)
      ✓ should handle non-UserId objects (4 ms)
    real-world Discord IDs
      ✓ should accept real Discord bot IDs (16 ms)
      ✓ should accept early Discord user IDs (3 ms)
      ✓ should accept recent Discord user IDs (3 ms)

PASS tests/unit/core/personality/PersonalityRegistry.test.js
  PersonalityRegistry
    register
      ✓ should register a new personality (106 ms)
      ✓ should not register duplicate personalities (8 ms)
    get
      ✓ should retrieve a registered personality (3 ms)
      ✓ should return null for non-existent personality (2 ms)
    remove
      ✓ should remove a personality and its aliases (5 ms)
      ✓ should return false when removing non-existent personality (4 ms)
    alias management
      ✓ should set an alias for a personality (3 ms)
      ✓ should not set alias for non-existent personality (4 ms)
      ✓ should reassign alias to new personality (3 ms)
      ✓ should get all aliases for a personality (6 ms)
      ✓ should remove an alias (4 ms)
    getByUser
      ✓ should return personalities for a specific user (4 ms)
    data import/export
      ✓ should export data as plain objects (4 ms)
      ✓ should load data from plain objects (5 ms)
      ✓ should skip mismatched entries when loading (5 ms)
      ✓ should skip aliases for non-existent personalities (15 ms)
    clear
      ✓ should clear all data (2 ms)
    getAll
      ✓ should return all personalities as an array (2 ms)

PASS tests/unit/commands.formatUptime.test.js
  Uptime formatting functionality
    ✓ correctly formats 0ms uptime (2 ms)
    ✓ correctly formats 1 second uptime (1 ms)
    ✓ correctly formats 1 minute uptime (1 ms)
    ✓ correctly formats 1 hour uptime (2 ms)
    ✓ correctly formats 1 day uptime (2 ms)
    ✓ correctly formats mixed uptime values (2 ms)

PASS tests/unit/commands/utils/formatUptime.test.js
  Uptime Formatting Utility
    ✓ correctly formats 0ms uptime (3 ms)
    ✓ correctly formats 1 second uptime (1 ms)
    ✓ correctly formats 1 minute uptime (12 ms)
    ✓ correctly formats 1 hour uptime (2 ms)
    ✓ correctly formats 1 day uptime (1 ms)
    ✓ correctly formats mixed uptime values (1 ms)

PASS tests/unit/utils/aiAuth.test.js
  aiAuth
    initAI
      ✓ should log that initialization is handled by auth system (4 ms)
      ✓ should support legacy initAiClient alias (3 ms)
    getAI
      ✓ should return the default AI client from auth manager (2 ms)
      ✓ should return a test client when auth manager is not available in test mode (18 ms)
      ✓ should throw error when auth manager is not available in non-test mode (2 ms)
    getAIForUser
      ✓ should return AI client for user from auth manager (2 ms)
      ✓ should handle webhook context (9 ms)
      ✓ should fall back to default client on error (3 ms)
      ✓ should return test client when auth manager not available in test mode (3 ms)
    getAiClientForUser (legacy)
      ✓ should delegate to getAIForUser with isWebhook from context (2 ms)
      ✓ should default isWebhook to false when no context (2 ms)

PASS tests/unit/messageTracker.test.js
  MessageTracker
    constructor and initialization
      ✓ should initialize with default options (10 ms)
      ✓ should initialize with custom options (1 ms)
      ✓ should set up periodic cleanup when timers are enabled (2 ms)
      ✓ should not set up periodic cleanup when timers are disabled (2 ms)
      ✓ should handle interval.unref when available (3 ms)
      ✓ should handle missing unref gracefully (2 ms)
    track method
      ✓ should track new messages successfully (2 ms)
      ✓ should detect duplicate messages (2 ms)
      ✓ should track messages with custom types (2 ms)
      ✓ should track the same ID with different types separately (1 ms)
    trackOperation method
      ✓ should track new operations successfully (1 ms)
      ✓ should detect duplicate operations within 5 seconds (1 ms)
      ✓ should allow duplicate operations after 5 seconds (9 ms)
      ✓ should schedule cleanup for operations (2 ms)
      ✓ should not schedule cleanup when timers are disabled (2 ms)
    periodic cleanup
      ✓ should clean up old entries during periodic cleanup (3 ms)
      ✓ should not log when no entries are removed (2 ms)
    utility methods
      ✓ should return correct size (4 ms)
      ✓ should clear all tracked messages (3 ms)
    edge cases
      ✓ should handle null or undefined messageId (2 ms)
      ✓ should handle empty string IDs (2 ms)
      ✓ should handle very long signatures (1 ms)

PASS tests/unit/utils/messageDeduplication.test.js
  messageDeduplication
    hashMessage
      ✓ should create consistent hashes for the same input (3 ms)
      ✓ should create different hashes for different content (2 ms)
      ✓ should create different hashes for different usernames (2 ms)
      ✓ should create different hashes for different channels (2 ms)
      ✓ should handle empty or null content (2 ms)
      ✓ should create different hashes for messages with different endings (2 ms)
      ✓ should remove spaces from content when hashing (1 ms)
    isDuplicateMessage
      ✓ should return false for empty content (2 ms)
      ✓ should return false for first occurrence of a message (3 ms)
      ✓ should return true for duplicate message within timeout (8 ms)
      ✓ should return false for same message after timeout (2 ms)
      ✓ should handle multiple different messages (2 ms)
      ✓ should clean up old entries automatically (2 ms)
    utility functions
      ✓ clearCache should remove all entries (3 ms)
      ✓ addToCache should manually add entries (2 ms)
      ✓ addToCache should accept custom timestamp (1 ms)
      ✓ hasHash should check for specific hash (2 ms)
      ✓ getAllHashes should return all cached hashes (1 ms)
      ✓ cleanupOldEntries should be callable directly (1 ms)
    constants
      ✓ should export expected timeout values (1 ms)

PASS tests/unit/application/commands/utility/PingCommand.test.js
  PingCommand
    metadata
      ✓ should have correct command metadata (3 ms)
    execute
      ✓ should respond with pong message (11 ms)
      ✓ should work in DM channels (2 ms)
      ✓ should work in guild channels (2 ms)
      ✓ should handle missing bot config gracefully (2 ms)
      ✓ should handle errors gracefully (3 ms)
      ✓ should handle unexpected errors (3 ms)
    factory function
      ✓ should create command with default dependencies (1 ms)
      ✓ should create command with custom dependencies (2 ms)

PASS tests/unit/domain/shared/index.test.js
  Shared Domain Index
    exports
      ✓ should export all base classes (3 ms)
      ✓ should export event bus components (1 ms)
    functionality
      ✓ should allow creating custom aggregates (10 ms)
      ✓ should allow creating custom value objects (2 ms)
      ✓ should allow creating custom domain events (2 ms)
      ✓ should allow creating event bus instances (1 ms)
      ✓ should allow using singleton event bus (2 ms)
    domain boundary
      ✓ should not export internal implementation details (1 ms)
      ✓ should provide complete public API (2 ms)
    inheritance patterns
      ✓ should allow proper aggregate inheritance with events (1 ms)
      ✓ should allow proper value object inheritance with immutability (2 ms)

PASS tests/unit/commands/utils/commandLoader.test.js
  Command Loader Utility
    ✓ should export a loadCommands function (2 ms)
    ✓ should return a result object with the expected shape (2 ms)

PASS tests/unit/commands/handlers/volumetest.test.js
  VolumeTest Command
    ✓ should have the correct metadata (4 ms)
    ✓ should reject non-bot-owner users (3 ms)
    ✓ should work for bot owner in local environment (4 ms)
    ✓ should work for bot owner in Railway environment (12 ms)
    ✓ should handle file system errors gracefully (4 ms)
    ✓ should show first run message when only one entry exists (2 ms)
    ✓ should handle missing BOT_OWNER_ID environment variable (2 ms)

PASS tests/unit/commandLoader.comprehensive.test.js
  CommandLoader Comprehensive Tests
    processCommand
      ✓ should process a valid command successfully (4 ms)
      ✓ should handle command with no arguments (10 ms)
      ✓ should log when command is not found (3 ms)
      ✓ should handle command system returning undefined (2 ms)
      ✓ should handle errors and send error message (3 ms)
      ✓ should handle errors when error message fails to send (16 ms)
      ✓ should handle commands with many arguments (2 ms)
      ✓ should handle special characters in arguments (3 ms)
      ✓ should handle empty command name (3 ms)
      ✓ should handle null result from command system (4 ms)
      ✓ should handle command system throwing string error (2 ms)
      ✓ should preserve original message reference (2 ms)
    Module exports
      ✓ should only export processCommand function (2 ms)
      ✓ should have processCommand as a function (1 ms)
      ✓ should be an async function (8 ms)

PASS tests/unit/utils.test.js
  utils
    validateAlias
      ✓ should return false for empty or null alias (3 ms)
      ✓ should return false for aliases shorter than 2 characters (2 ms)
      ✓ should return false for aliases with invalid characters (2 ms)
      ✓ should return true for valid aliases (4 ms)
    cleanupTimeout
      ✓ should remove item from Set after timeout (3 ms)
      ✓ should remove item from Map after timeout (7 ms)
      ✓ should not log if item was already removed (2 ms)
      ✓ should return timeout object that can be cleared (3 ms)
    safeToLowerCase
      ✓ should return empty string for falsy values (2 ms)
      ✓ should convert strings to lowercase (3 ms)
      ✓ should handle non-string values by converting to string first (2 ms)
    createDirectSend
      ✓ should send string messages successfully (3 ms)
      ✓ should send object messages successfully (3 ms)
      ✓ should handle send errors gracefully (3 ms)
      ✓ should handle various content types (3 ms)
    getAllAliasesForPersonality
      ✓ should return empty array for invalid inputs (2 ms)
      ✓ should find all aliases for a personality (8 ms)
      ✓ should return empty array if no aliases found (4 ms)
      ✓ should handle empty alias map (3 ms)

PASS tests/unit/domain/shared/AggregateRoot.test.js
  AggregateRoot
    constructor
      ✓ should require an ID (16 ms)
      ✓ should initialize with ID and version 0 (3 ms)
    applyEvent
      ✓ should apply event and increment version (1 ms)
      ✓ should require DomainEvent instance (7 ms)
      ✓ should handle events without handlers gracefully (3 ms)
      ✓ should apply multiple events in sequence (2 ms)
    getUncommittedEvents
      ✓ should return copy of uncommitted events (2 ms)
    markEventsAsCommitted
      ✓ should clear uncommitted events (2 ms)
    loadFromHistory
      ✓ should rebuild aggregate from event history (1 ms)
      ✓ should handle empty history (1 ms)
      ✓ should skip events without handlers (2 ms)
    hasUncommittedChanges
      ✓ should return false for new aggregate (1 ms)
      ✓ should return true after applying events (1 ms)
      ✓ should return false after marking events committed (2 ms)
    validate
      ✓ should be overridable in subclasses (2 ms)
    getId and getVersion
      ✓ should return aggregate ID (2 ms)
      ✓ should return current version (7 ms)

PASS tests/unit/commands/handlers/list.test.js
  List Command
    ✓ should have the correct metadata (12 ms)
    ✓ should handle empty personality list (4 ms)
    ✓ should handle personalities list with default page (3 ms)
    ✓ should handle specific page request (2 ms)
    ✓ should handle non-numeric page argument (2 ms)
    ✓ should return error when page number is out of range (2 ms)
    ✓ should return error when page number is below 1 (2 ms)
    ✓ should handle error in personality lookup (2 ms)
    ✓ should handle null personalities list (3 ms)

PASS tests/unit/core/authentication/AIClientFactory.test.js
  AIClientFactory
    Constructor
      ✓ should initialize with provided configuration (3 ms)
    initialize
      ✓ should create default client on initialization (2 ms)
      ✓ should handle initialization errors (16 ms)
    getDefaultClient
      ✓ should return default client after initialization (1 ms)
      ✓ should throw error if not initialized (7 ms)
    createUserClient
      ✓ should create client with user token (3 ms)
      ✓ should create webhook client with bypass header (9 ms)
      ✓ should create client with both token and webhook bypass (2 ms)
      ✓ should return cached client on subsequent calls (3 ms)
      ✓ should handle errors during client creation (3 ms)
    getClient
      ✓ should return default client when useDefault is true (2 ms)
      ✓ should return default client when no user context provided (2 ms)
      ✓ should create user client when userId provided (2 ms)
    clearUserClient
      ✓ should clear cached clients for a user (2 ms)
    clearAllClients
      ✓ should clear all cached clients (2 ms)
    getCacheStats
      ✓ should return cache statistics (4 ms)

PASS tests/unit/utils/aiRequestManager.test.js
  aiRequestManager
    createRequestId
      ✓ should create ID for string message (2 ms)
      ✓ should handle empty message (2 ms)
      ✓ should handle null message (1 ms)
      ✓ should handle multimodal content with text only (2 ms)
      ✓ should handle multimodal content with image (3 ms)
      ✓ should handle multimodal content with audio (2 ms)
      ✓ should handle reference format (2 ms)
      ✓ should handle reference with media (1 ms)
      ✓ should use default values for missing context (2 ms)
      ✓ should handle complex object gracefully (7 ms)
    pendingRequests management
      ✓ should store and retrieve pending request (4 ms)
      ✓ should return null for non-existent request (2 ms)
      ✓ should remove pending request (1 ms)
      ✓ should clean up timed out requests (2 ms)
      ✓ should track pending requests count (1 ms)
    blackout period management
      ✓ should create blackout key (2 ms)
      ✓ should use defaults for missing context (1 ms)
      ✓ should add to blackout list with default duration (1 ms)
      ✓ should add to blackout list with custom duration (3 ms)
      ✓ should clean up expired blackout periods (1 ms)
      ✓ should track blackout periods count (1 ms)
    prepareRequestHeaders
      ✓ should prepare headers with both userId and channelId (2 ms)
      ✓ should prepare headers with only userId (1 ms)
      ✓ should prepare headers with only channelId (9 ms)
      ✓ should return empty object for no context (2 ms)
    utility functions
      ✓ should clear all pending requests (2 ms)
      ✓ should clear all blackout periods (1 ms)

PASS tests/unit/commands/utils/messageTracker.test.js
  MessageTracker
    isProcessed and markAsProcessed
      ✓ should correctly track processed messages (3 ms)
      ✓ should schedule auto-removal with custom timeout (2 ms)
      ✓ should not schedule removal when timers are disabled (1 ms)
    isRecentCommand
      ✓ first command is never a recent duplicate (7 ms)
      ✓ detects duplicate command within 3 seconds (2 ms)
      ✓ different users can execute same command (1 ms)
      ✓ same user can execute different commands (1 ms)
      ✓ cleans up old entries after 10 seconds (2 ms)
    add command tracking
      ✓ tracks add command message IDs (2 ms)
      ✓ tracks completed add commands (2 ms)
      ✓ removes completed add command for specific user and personality (2 ms)
    embed tracking
      ✓ tracks sending embed status (3 ms)
      ✓ tracks first embed generation (2 ms)
    cleanup intervals
      ✓ sets up cleanup intervals when enabled (2 ms)
      ✓ cleanup removes old processed messages (3 ms)

PASS tests/unit/commands/handlers/status.test.js
  Status Command
    ✓ should have the correct metadata (14 ms)
    ✓ should display bot status for authenticated user (7 ms)
    ✓ should show different fields for non-authenticated user (2 ms)
    ✓ should handle errors properly (4 ms)

PASS tests/unit/domain/conversation/ChannelActivation.test.js
  ChannelActivation
    constructor
      ✓ should create valid channel activation (5 ms)
      ✓ should require valid channelId (14 ms)
    create static method
      ✓ should create valid activation with factory method (5 ms)
      ✓ should require valid PersonalityId (3 ms)
      ✓ should require valid UserId (7 ms)
    deactivate
      ✓ should deactivate active channel (2 ms)
      ✓ should throw error when already deactivated (5 ms)
    isForPersonality
      ✓ should return true for matching personality (2 ms)
      ✓ should return false for different personality (2 ms)
    toJSON
      ✓ should serialize to JSON correctly (2 ms)
      ✓ should serialize deactivated state correctly (2 ms)
    aggregate root behavior
      ✓ should extend AggregateRoot (2 ms)
      ✓ should increment version on state changes (3 ms)

PASS tests/unit/commands/handlers/verify.test.js
  Verify Command
    ✓ should have the correct metadata (5 ms)
    ✓ should inform users that DM verification must be done in a server (12 ms)
    ✓ should inform users they are already verified (3 ms)
    ✓ should verify users who run the command in an NSFW channel (3 ms)
    ✓ should handle errors in storing verification status (2 ms)
    ✓ should verify users who have access to NSFW channels in the server (2 ms)
    ✓ should inform users when they have no access to NSFW channels (2 ms)
    ✓ should handle missing guild information (2 ms)
    ✓ should handle unexpected errors during verification (3 ms)

PASS tests/unit/commands/middleware/deduplication.test.js
  Deduplication Middleware
    ✓ should block already processed messages (3 ms)
    ✓ should mark messages as processed (1 ms)
    ✓ should block recent duplicate commands (11 ms)
    ✓ should allow non-duplicate commands (2 ms)
    ✓ should handle add command special case (1 ms)
    ✓ should handle create command as alias for add (1 ms)
    ✓ should block already processed add commands (2 ms)

PASS tests/unit/commands/middleware/auth.test.js
  Auth Middleware
    ✓ should allow authenticated users (5 ms)
    ✓ should allow auth command for unauthenticated users (3 ms)
    ✓ should allow help command for unauthenticated users (2 ms)
    ✓ should reject unauthenticated users with DM instructions (2 ms)
    ✓ should handle DM failures gracefully (2 ms)
    ✓ should block auth commands from unauthorized webhook proxies (13 ms)
    ✓ should allow commands from webhook proxies with auth bypass (2 ms)
    ✓ should not bypass auth for auth commands from webhooks (2 ms)
    ✓ should log webhook command processing (2 ms)

PASS tests/unit/domain/shared/ValueObject.test.js
  ValueObject
    equals
      ✓ should return true for equal value objects (2 ms)
      ✓ should return false for different value objects (3 ms)
      ✓ should return false when comparing with null (8 ms)
      ✓ should return false when comparing with undefined (1 ms)
      ✓ should return false when comparing with different type (2 ms)
      ✓ should handle complex nested values (1 ms)
    copyWith
      ✓ should create a new instance with updated values (3 ms)
    hashCode
      ✓ should return same hash for equal objects (3 ms)
      ✓ should return different hash for different objects (2 ms)
    validate
      ✓ should be overridable in subclasses (12 ms)
      ✓ should not throw in default implementation (2 ms)
    freeze
      ✓ should make object immutable (2 ms)
      ✓ should prevent property modification (1 ms)
      ✓ should prevent property addition (1 ms)
    default toJSON
      ✓ should use default implementation when not overridden (2 ms)
      ✓ should exclude undefined values (8 ms)
    default copyWith
      ✓ should work with simple constructors (3 ms)
      ✓ should preserve original object (2 ms)

PASS tests/unit/domain/ai/AIService.test.js
  AIService
    interface methods
      ✓ should define sendRequest method (2 ms)
      ✓ should define checkHealth method (1 ms)
      ✓ should define getMetrics method (1 ms)
    unimplemented methods
      ✓ should throw error for sendRequest (19 ms)
      ✓ should throw error for checkHealth (9 ms)
      ✓ should throw error for getMetrics (2 ms)
    mock implementation
      ✓ should allow implementation of interface (3 ms)
      ✓ should track multiple requests (2 ms)
    interface contract
      ✓ should be extendable (1 ms)
      ✓ should maintain method signatures (2 ms)

PASS tests/unit/core/personality/PersonalityRegistry.nullAlias.test.js
  PersonalityRegistry - Null Alias Handling
    getByAlias with null/undefined values
      ✓ should return null when alias is null (2 ms)
      ✓ should return null when alias is undefined (2 ms)
      ✓ should return null when alias is empty string (1 ms)
      ✓ should not throw error when alias is null (2 ms)
      ✓ should handle null alias in multi-word mention scenario (2 ms)
      ✓ should handle the message handler bug scenario (2 ms)
    setAlias with null/undefined values
      ✓ should handle null alias gracefully (2 ms)
      ✓ should handle undefined alias gracefully (10 ms)
      ✓ should handle empty string alias gracefully (2 ms)

PASS tests/unit/authentication.enforcement.test.js
  Authentication Enforcement
    ✓ getAiResponse requires authentication (4 ms)
    ✓ getAiResponse checks for authentication with hasValidToken (4 ms)
    ✓ getAiClientForUser returns default client for unauthenticated users (2 ms)
    ✓ getAiClientForUser returns client for authenticated users (1 ms)

PASS tests/unit/profileInfoFetcher.errorMessage.test.js
  Profile Info Fetcher - Error Messages
    getProfileErrorMessage
      ✓ should return error message when profile has one (3 ms)
      ✓ should return null when profile has no error message (1 ms)
      ✓ should return null when profile is not found (2 ms)
      ✓ should handle errors gracefully (3 ms)
      ✓ should handle empty error messages (10 ms)
      ✓ should log the first 100 characters of error message (2 ms)
      ✓ should pass userId when provided (2 ms)

PASS tests/unit/application/commands/conversation/AutorespondCommand.test.js
  AutorespondCommand
    command metadata
      ✓ should have correct metadata (8 ms)
    status display
      ✓ should show status when no action provided (4 ms)
      ✓ should show disabled status correctly (4 ms)
      ✓ should show status when explicitly requested (2 ms)
      ✓ should use options.action over args (2 ms)
    enable action
      ✓ should enable auto-response (3 ms)
      ✓ should handle enable errors (4 ms)
      ✓ should log successful enable (3 ms)
    disable action
      ✓ should disable auto-response (3 ms)
      ✓ should handle disable errors (2 ms)
      ✓ should log successful disable (2 ms)
    invalid actions
      ✓ should reject invalid action (2 ms)
      ✓ should handle case insensitive actions (2 ms)
    error handling
      ✓ should handle unexpected errors gracefully (9 ms)
    embed formatting
      ✓ should include timestamps in all embeds (4 ms)
      ✓ should include footer with help text in status embed (2 ms)

PASS tests/unit/commands/utils/commandRegistry.test.js
  CommandRegistry
    ✓ should initialize with empty command and alias maps (4 ms)
    ✓ should register a command with its metadata (4 ms)
    ✓ should handle commands without aliases (7 ms)
    ✓ should throw an error for invalid command modules (16 ms)
    ✓ should get a command by name (2 ms)
    ✓ should get a command by alias (3 ms)
    ✓ should return null for non-existent commands (2 ms)
    ✓ should check if a command exists by name (2 ms)
    ✓ should check if a command exists by alias (2 ms)
    ✓ should get all registered commands (2 ms)
    ✓ should get filtered commands (3 ms)

PASS tests/unit/commands/handlers/reset.test.js
  Reset Command
    ✓ should have the correct metadata (3 ms)
    ✓ should require a personality name or alias (2 ms)
    ✓ should reset a conversation by personality name (1 ms)
    ✓ should try to find personality by alias first (12 ms)
    ✓ should handle non-existent personality (3 ms)
    ✓ should handle errors gracefully (3 ms)

PASS tests/unit/application/eventHandlers/PersonalityCacheInvalidator.test.js
  PersonalityCacheInvalidator
    handlePersonalityProfileUpdated
      ✓ should clear cache when personality profile is updated (3 ms)
      ✓ should handle missing profile name gracefully (2 ms)
      ✓ should handle missing profile info cache gracefully (3 ms)
    handlePersonalityRemoved
      ✓ should clear cache when personality is removed (2 ms)
      ✓ should handle missing personality name gracefully (2 ms)
    handlePersonalityAliasAdded
      ✓ should clear cache when alias is added (2 ms)
    handlePersonalityAliasRemoved
      ✓ should clear both personality and alias caches when alias is removed (2 ms)
      ✓ should handle missing alias gracefully (2 ms)

PASS tests/unit/utils/requestTracker.test.js
  Request Tracker
    trackRequest
      ✓ should track a new request and return request key (4 ms)
      ✓ should return null for duplicate request (4 ms)
      ✓ should track different requests independently (2 ms)
    removeRequest
      ✓ should remove a tracked request (2 ms)
      ✓ should handle removing non-existent request gracefully (2 ms)
      ✓ should handle null/undefined request key (1 ms)
    isRequestActive
      ✓ should return true for active request (2 ms)
      ✓ should return false for non-active request (7 ms)
    getRequestAge
      ✓ should return age of existing request (2 ms)
      ✓ should return null for non-existent request (2 ms)
    cleanupStaleRequests
      ✓ should clean up requests older than specified age (2 ms)
      ✓ should return 0 when no stale requests (2 ms)
      ✓ should use default max age of 5 minutes (3 ms)
    clearAllRequests
      ✓ should clear all active requests (2 ms)
    activeRequests backward compatibility
      ✓ should expose activeRequests Map (1 ms)

PASS tests/unit/commands/handlers/ping.test.js
  Ping Command
    ✓ should have the correct metadata (4 ms)
    ✓ should reply with a pong message (3 ms)
    ✓ should handle errors gracefully (11 ms)

PASS tests/unit/commands/handlers/info.test.js
  Info Command
    ✓ should have the correct metadata (3 ms)
    ✓ should require a personality name or alias (3 ms)
    ✓ should handle non-existent personality (3 ms)
    ✓ should show info for a personality by name (3 ms)
    ✓ should show info for a personality by alias (2 ms)
    ✓ should handle unexpected errors gracefully (1 ms)

PASS tests/unit/webhookManager.messages.test.js
  WebhookManager - Message Sending Tests
    ✓ should successfully send a simple message (5 ms)
    ✓ should split long messages into chunks (4 ms)
    ✓ should mark error messages (2 ms)
    ✓ should skip duplicate messages (2 ms)
    ✓ should add embeds and attachments to the last chunk only (3 ms)
    ✓ should handle missing personality data (2 ms)
    ✓ should handle webhook send errors (18 ms)
    ✓ should skip messages with the HARD_BLOCKED marker (8 ms)

PASS tests/unit/domain/ai/AIRequestId.test.js
  AIRequestId
    constructor
      ✓ should generate new ID if not provided (3 ms)
      ✓ should use provided value (2 ms)
      ✓ should validate value is string (11 ms)
    generateId
      ✓ should generate unique IDs (3 ms)
      ✓ should generate IDs with correct format (2 ms)
    toString
      ✓ should return the value (7 ms)
    toJSON
      ✓ should return the value (3 ms)
    create
      ✓ should create new ID (2 ms)
    fromString
      ✓ should create ID from string (3 ms)
    equals
      ✓ should compare IDs by value (2 ms)
      ✓ should handle null comparison (2 ms)
      ✓ should handle different type comparison (3 ms)
    immutability
      ✓ should not allow value modification (3 ms)

PASS tests/unit/utils/channelUtils.test.js
  channelUtils
    isChannelNSFW
      ✓ should return false for null or undefined channel (3 ms)
      ✓ should return true for channels with nsfw flag (1 ms)
      ✓ should return false for channels without nsfw flag (1 ms)
      ✓ should check parent channel for threads (1 ms)
      ✓ should try parentChannel property if parent is not available (1 ms)
      ✓ should try parentTextChannel property if others are not available (1 ms)
      ✓ should return false for non-NSFW parent channels (1 ms)
      ✓ should handle errors when checking thread parent (1 ms)
      ✓ should check forum thread parent using parentId (1 ms)
      ✓ should return false if forum thread parent is not found (2 ms)
      ✓ should handle errors when checking forum thread parent (2 ms)
      ✓ should handle channels without isThread method (2 ms)
      ✓ should handle thread with isThread returning false (6 ms)
      ✓ should return false when guild is not available (2 ms)

PASS tests/unit/adapters/persistence/index.test.js
  Persistence Adapters Index
    ✓ should export FilePersonalityRepository (2 ms)
    ✓ should export FileConversationRepository (11 ms)
    ✓ should export FileAuthenticationRepository (2 ms)
    ✓ should export MemoryConversationRepository (2 ms)
    ✓ should export exactly the expected modules (1 ms)

PASS tests/unit/core/authentication/NsfwVerificationManager.nsfw.test.js
  NsfwVerificationManager - NSFW Channel Enforcement
    verifyAccess - Channel Type Enforcement
      ✓ should block access in DMs for non-verified users (7 ms)
      ✓ should allow access in DMs for verified users (2 ms)
      ✓ should block NSFW-verified users in SFW channels (3 ms)
      ✓ should allow NSFW-verified users in NSFW channels (1 ms)
      ✓ should auto-verify non-verified users in NSFW channels (2 ms)
      ✓ should include user mention in error messages (1 ms)
    Proxy System Integration
      ✓ should inherit NSFW verification from real user behind proxy (2 ms)
      ✓ should block proxy systems in SFW channels even if real user is verified (2 ms)
      ✓ should handle unknown proxy users gracefully (3 ms)
      ✓ should auto-verify unverified proxy users in NSFW channels (3 ms)
    Legacy Behavior
      ✓ should maintain requiresNsfwVerification for NSFW channels (2 ms)
      ✓ should not require NSFW verification for DMs (1 ms)
      ✓ should store and retrieve verification status (7 ms)

PASS tests/unit/domain/personality/index.test.js
  Personality Domain Index
    exports
      ✓ should export all aggregates (3 ms)
      ✓ should export all value objects (3 ms)
      ✓ should export all repositories (1 ms)
      ✓ should export all events (2 ms)
    functionality
      ✓ should allow creating personalities (7 ms)
      ✓ should allow creating personality IDs (2 ms)
      ✓ should allow creating user IDs (2 ms)
      ✓ should allow creating aliases (1 ms)
      ✓ should allow creating personality events (1 ms)
    domain boundary
      ✓ should not export internal implementation details (1 ms)
      ✓ should provide complete public API (2 ms)

PASS tests/unit/core/authentication/NsfwVerificationManager.threads.test.js
  NsfwVerificationManager - Thread and Forum Support
    requiresNsfwVerification - Threads
      ✓ should require verification for threads in NSFW channels (2 ms)
      ✓ should not require verification for threads in SFW channels (1 ms)
      ✓ should not require verification for DM threads (1 ms)
    shouldAutoVerify - Threads
      ✓ should auto-verify users in NSFW threads (2 ms)
      ✓ should not auto-verify users in SFW threads (1 ms)
    verifyAccess - Thread Scenarios
      ✓ should auto-verify non-verified users in NSFW threads (2 ms)
      ✓ should block non-verified users in SFW threads (2 ms)
      ✓ should allow verified users in NSFW threads (6 ms)
      ✓ should block verified users in SFW threads (2 ms)
    verifyAccess - Forum Thread Scenarios
      ✓ should handle forum threads with parentId (2 ms)
      ✓ should block access in SFW forum threads (1 ms)
    verifyAccess - Proxy Systems in Threads
      ✓ should auto-verify proxy users in NSFW threads (3 ms)
      ✓ should block proxy users in SFW threads (3 ms)
    Edge Cases
      ✓ should handle threads without parent reference gracefully (2 ms)
      ✓ should handle regular channels that are not threads (1 ms)

PASS tests/unit/commands.embedsToBlock.test.js
  Error filtering functionality
    ✓ ERROR_MESSAGES array contains expected error patterns (3 ms)
    ✓ Bot filters webhook messages containing error patterns (5 ms)

PASS tests/unit/domain/shared/DomainEvent.test.js
  DomainEvent
    constructor
      ✓ should create event with required properties (3 ms)
      ✓ should create event with empty payload if not provided (2 ms)
      ✓ should generate unique event IDs (3 ms)
      ✓ should include aggregate ID in event ID (2 ms)
    getEventType
      ✓ should return the class name as event type (2 ms)
      ✓ should work with different event classes (1 ms)
    toJSON
      ✓ should serialize event to JSON format (7 ms)
      ✓ should handle complex payloads (3 ms)
    fromJSON
      ✓ should recreate event from JSON data (2 ms)
      ✓ should preserve occurred date as Date object (2 ms)
    event ordering
      ✓ should maintain chronological order (2 ms)

PASS tests/unit/commands/utils/embedsToBlock.test.js
  Error Messages Filtering Functionality
    ✓ ERROR_MESSAGES array contains expected error patterns (3 ms)
    ✓ Bot filters webhook messages containing error patterns (4 ms)

PASS tests/unit/domain/authentication/index.test.js
  Authentication Domain Index
    exports
      ✓ should export all aggregates (2 ms)
      ✓ should export all value objects (2 ms)
      ✓ should export all repositories (1 ms)
      ✓ should export all services (1 ms)
      ✓ should export all events (2 ms)
    functionality
      ✓ should allow creating authenticated users (2 ms)
      ✓ should allow creating auth contexts (2 ms)
      ✓ should allow creating NSFW status (2 ms)
      ✓ should allow creating authentication events (1 ms)
    domain boundary
      ✓ should not export internal implementation details (7 ms)
      ✓ should provide complete public API (2 ms)

PASS tests/unit/adapters/ai/index.test.js
  AI Adapters Index
    ✓ should export HttpAIServiceAdapter (3 ms)
    ✓ should export AIServiceAdapterFactory (2 ms)
    ✓ should export exactly the expected modules (1 ms)

PASS tests/unit/adapters/discord/index.test.js
  Discord Adapters Index
    ✓ should export DiscordMessageAdapter (2 ms)
    ✓ should export DiscordWebhookAdapter (1 ms)
    ✓ should export exactly the expected modules (1 ms)

PASS tests/unit/domain/conversation/index.test.js
  Conversation Domain Index
    exports
      ✓ should export all aggregates (4 ms)
      ✓ should export all entities (2 ms)
      ✓ should export all value objects (1 ms)
      ✓ should export all repositories (2 ms)
      ✓ should export all events (2 ms)
    functionality
      ✓ should allow creating conversations (3 ms)
      ✓ should allow creating conversation IDs (1 ms)
      ✓ should allow creating channel activations (2 ms)
      ✓ should allow creating conversation events (1 ms)
    domain boundary
      ✓ should not export internal implementation details (3 ms)
      ✓ should provide complete public API (8 ms)

PASS tests/unit/utils/mockFactories.test.js
  Mock Factories
    Validator Mock
      ✓ should create a validator mock with default options (2 ms)
      ✓ should create a validator mock with custom options (2 ms)
      ✓ should create a working directSend function (2 ms)
      ✓ should handle missing message or channel in directSend (6 ms)
    Personality Manager Mock
      ✓ should create a personality manager mock with default options (3 ms)
      ✓ should create personality manager mock with custom options (1 ms)
      ✓ should properly mock async functions (2 ms)
    EmbedBuilder Mock
      ✓ should create a functioning embed builder mock (2 ms)
    Conversation Manager Mock
      ✓ should create a conversation manager mock with default options (3 ms)
      ✓ should create conversation manager mock with custom options (3 ms)

PASS tests/unit/utils/aiMessageFormatter.webhook.test.js
  aiMessageFormatter - Webhook Name Handling
    formatApiMessages with webhook references
      ✓ should use webhook name when personality info is not available (3 ms)
      ✓ should use author name as fallback when webhook name is not available (1 ms)
      ✓ should only use "the bot" as last resort (1 ms)
      ✓ should prefer personality display name when available (2 ms)
      ✓ should handle proxy system webhooks with proper names (2 ms)
      ✓ should handle media references with webhook names (3 ms)
      ✓ should handle self-references correctly (2 ms)
    Edge cases
      ✓ should handle missing reference data gracefully (1 ms)
      ✓ should handle empty webhook names (1 ms)

PASS tests/unit/commands/handlers/autorespond.test.js
  Autorespond Command
    ✓ should show current status when no subcommand is provided (6 ms)
    ✓ should enable auto-response with "on" subcommand (2 ms)
    ✓ should disable auto-response with "off" subcommand (2 ms)
    ✓ should show status with "status" subcommand (3 ms)
    ✓ should show error for invalid subcommand (3 ms)
    ✓ should expose helper functions (4 ms)
    ✓ should expose correct metadata (3 ms)

PASS tests/unit/logger.test.js
  Logger module
    ✓ creates logs directory if it does not exist (3 ms)
    ✓ does not create logs directory if it already exists (3 ms)
    ✓ creates winston logger with correct configuration (3 ms)
    ✓ configures Console transport with correct formatting (3 ms)
    ✓ configures File transports with correct paths and settings (1 ms)
    ✓ exports a logger object with the expected methods (3 ms)
    ✓ printf format produces correct output (2 ms)
    ✓ logger methods work correctly (8 ms)

PASS tests/unit/bot.message.handler.test.js
  Bot Message Handler
    ✓ should process commands when message starts with prefix (5 ms)
    ✓ should ignore messages from bots (2 ms)
    ✓ should generate AI response for normal message with active personality (2 ms)
    ✓ should use channel personality if no active user personality (2 ms)
    ✓ should not respond if no active personality is found (8 ms)
    ✓ should not respond if personality is not found (3 ms)
    ✓ should parse command with prefix and space correctly (2 ms)

PASS tests/unit/bot.embed.detection.test.js
  Enhanced Embed Detection
    ✓ should detect display names containing Hebrew word connectors (-ani-, -ha-, -ve-) (2 ms)
    ✓ should detect any display name with kebab-case ID format (2 ms)
    ✓ should not detect proper capitalized display names with hyphens (2 ms)
    ✓ should detect embeds with fields other than Display Name missing (8 ms)
    ✓ should handle embed with no fields array (1 ms)
    ✓ should handle empty fields array (2 ms)
    ✓ should handle properly formatted display name but missing thumbnail (1 ms)
    ✓ should handle null or empty thumbnail URL (1 ms)
    ✓ should detect embeds with uppercase internal IDs (2 ms)
    ✓ should handle completely empty or malformed embeds (2 ms)
    ✓ should attempt to delete incomplete embeds (3 ms)

PASS tests/unit/core/personality/PersonalityPersistence.test.js
  PersonalityPersistence
    load
      ✓ should load personalities and aliases from storage (3 ms)
      ✓ should handle missing data gracefully (2 ms)
      ✓ should handle load errors gracefully (2 ms)
    save
      ✓ should save personalities and aliases to storage (3 ms)
      ✓ should handle save errors (2 ms)
      ✓ should return false if alias save fails (2 ms)
    importFromLegacy
      ✓ should convert legacy personality format (2 ms)

PASS tests/unit/embedHelpers.list.test.js
  embedBuilders.createPersonalityListEmbed
    ✓ properly handles personalityAliases as a Map (4 ms)
    ✓ handles personalities with no aliases (3 ms)
    ✓ handles users with no personalities (1 ms)
    ✓ handles case when personalityAliases is not a Map (2 ms)
    ✓ handles pagination correctly (3 ms)

PASS tests/unit/webhook.bot.webhook.test.js
  Proxy System Webhook Identification
    ✓ should identify PluralKit webhook by application ID (3 ms)
    ✓ should identify Tupperbox webhook by application ID (1 ms)
    ✓ should NOT identify bot webhooks as proxy systems (2 ms)
    ✓ should bypass NSFW verification for proxy system webhooks (2 ms)
    ✓ should not allow authentication for proxy system webhooks (1 ms)
    ✓ should handle errors gracefully when checking webhooks (2 ms)
    ✓ should return special user ID for proxy systems (1 ms)

PASS tests/unit/rest.api.test.js
  REST API Calls and Error Handling
    ✓ should send embeds using direct REST API call (3 ms)
    ✓ should handle REST API errors gracefully (3 ms)
    ✓ should reset lastEmbedTime before sending the final embed (2 ms)
    ✓ should handle webhook message errors gracefully (2 ms)

PASS tests/unit/webhookManager.splitting.test.js
  WebhookManager - Message Splitting
    ✓ should return the original message if within limit (4 ms)
    ✓ should split long message by paragraphs (1 ms)
    ✓ should split very long paragraphs by lines (1 ms)
    ✓ should split very long lines by sentences (1 ms)
    ✓ should split very long sentences by character limit at word boundaries (2 ms)

PASS tests/unit/webhookManager.audio.test.js
  webhookManager audio handling
    sendWebhookMessage
      ✓ should process file domain audio URLs in the message content (4 ms)
      ✓ should process generic audio URLs in the message content (3 ms)
      ✓ should handle messages without audio URLs normally (2 ms)
      ✓ should handle errors during audio processing gracefully (1 ms)

PASS tests/unit/commandLoader.minimal.test.js
  Command Loader Bridge
    ✓ should have a processCommand function (2 ms)
    ✓ should export the expected API (1 ms)

PASS tests/unit/commands/utils/simulated.test.js
  Command Handling Simulations
    Embed Timing Simulation
      ✓ should deduplicate embeds based on global.lastEmbedTime (3 ms)
    Alias Handling Simulation
      ✓ should handle all aliases in one place (2 ms)

PASS tests/unit/config.environment.test.js
  Environment Configuration
    ✓ should load correct config for current environment (6 ms)
    ✓ should maintain backward compatibility with botPrefix export (2 ms)

PASS tests/unit/commandLoader.test.js
  Command Loader Bridge
    ✓ should export a processCommand function (2 ms)
    ✓ should have the expected API (1 ms)

-----------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------
File                                     | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                     
-----------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------
All files                                |   77.85 |    70.65 |   80.07 |   78.03 |                                                                                                                                                       
 src                                     |    72.6 |    62.88 |   77.12 |   73.13 |                                                                                                                                                       
  aiService.js                           |   91.04 |    74.19 |     100 |   91.04 | 199-236                                                                                                                                               
  auth.js                                |   61.11 |    38.29 |   66.66 |   62.79 | 33-46,82-83,87-88,110,141,160-165,169-183,224-229,238-241,252-255,282-283,306,327,354,366,388-399,406-416,439                                         
  bot.js                                 |   97.22 |      100 |     100 |   97.22 | 35                                                                                                                                                    
  commandLoader.js                       |     100 |      100 |     100 |     100 |                                                                                                                                                       
  commandProcessor.js                    |   98.27 |    94.11 |     100 |   98.27 | 26                                                                                                                                                    
  commandValidation.js                   |   91.83 |    70.45 |     100 |   91.83 | 87-96                                                                                                                                                 
  constants.js                           |     100 |      100 |     100 |     100 |                                                                                                                                                       
  dataStorage.js                         |   78.78 |    66.66 |     100 |   78.78 | 57-70                                                                                                                                                 
  healthCheck.js                         |   96.07 |    92.59 |     100 |   97.95 | 135                                                                                                                                                   
  httpServer.js                          |   88.13 |       88 |   71.42 |   88.13 | 115,122,129,136,140-142                                                                                                                               
  logger.js                              |   91.66 |    73.68 |     100 |   96.96 | 84                                                                                                                                                    
  messageTracker.js                      |     100 |      100 |     100 |     100 |                                                                                                                                                       
  middleware.js                          |   96.59 |    91.89 |     100 |   96.55 | 21,127-128                                                                                                                                            
  profileInfoFetcher.js                  |    98.3 |    95.83 |   91.66 |    98.3 | 162                                                                                                                                                   
  utils.js                               |   94.28 |      100 |      80 |   93.33 | 10-11                                                                                                                                                 
  webhookManager.js                      |       0 |        0 |       0 |       0 | 18-591                                                                                                                                                
  webhookServer.js                       |   82.27 |    75.86 |   81.81 |   82.27 | 76-80,85-86,141-153,172,180                                                                                                                           
 src/adapters                            |    85.1 |    71.42 |   71.42 |    85.1 |                                                                                                                                                       
  CommandIntegrationAdapter.js           |   84.44 |    71.42 |   71.42 |   84.44 | 51-52,151,178-179,250-258,269-282                                                                                                                     
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/adapters/ai                         |   27.77 |    32.24 |   51.35 |   27.63 |                                                                                                                                                       
  AIServiceAdapterFactory.js             |   95.38 |    81.17 |     100 |   95.23 | 94,188,249                                                                                                                                            
  HttpAIServiceAdapter.js                |       0 |        0 |       0 |       0 | 1-488                                                                                                                                                 
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/adapters/discord                    |   92.89 |    90.78 |   94.11 |   93.16 |                                                                                                                                                       
  DiscordMessageAdapter.js               |    90.9 |       92 |      90 |   91.46 | 54-55,182-184,225,232                                                                                                                                 
  DiscordWebhookAdapter.js               |   94.87 |     87.8 |     100 |   94.73 | 163,203,217-218                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/adapters/persistence                |   70.99 |    43.26 |   69.73 |   71.06 |                                                                                                                                                       
  FileAuthenticationRepository.js        |   95.38 |    75.53 |     100 |   96.82 | 324,352-356,438,445                                                                                                                                   
  FileConversationRepository.js          |     100 |    77.58 |     100 |     100 | 29-31,98-100,152-153,184,284,291,342,365-366                                                                                                          
  FilePersonalityRepository.js           |       0 |        0 |       0 |       0 | 1-594                                                                                                                                                 
  MemoryConversationRepository.js        |     100 |    78.46 |     100 |     100 | 17-20,57,118,174,211-223,255,264,277,342                                                                                                              
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/application/bootstrap               |       0 |        0 |       0 |       0 |                                                                                                                                                       
  ApplicationBootstrap.js                |       0 |        0 |       0 |       0 | 6-361                                                                                                                                                 
 src/application/commands                |   81.51 |    52.06 |   85.48 |   81.28 |                                                                                                                                                       
  CommandAbstraction.js                  |   62.82 |    43.62 |      80 |   62.09 | 177,202,235-391                                                                                                                                       
  CommandAdapter.js                      |   96.42 |    72.41 |   84.61 |   96.38 | 38,84,202                                                                                                                                             
  CommandIntegration.js                  |     100 |    93.75 |     100 |     100 | 171                                                                                                                                                   
 src/application/commands/authentication |    7.82 |     2.04 |   42.85 |    7.86 |                                                                                                                                                       
  AuthCommand.js                         |    5.78 |     1.42 |   33.33 |    5.78 | 59-840                                                                                                                                                
  VerifyCommand.js                       |   12.06 |     3.57 |      60 |   12.28 | 33-356                                                                                                                                                
 src/application/commands/conversation   |   63.51 |    44.23 |     100 |   63.51 |                                                                                                                                                       
  ActivateCommand.js                     |    17.5 |     2.77 |     100 |    17.5 | 43-150                                                                                                                                                
  AutorespondCommand.js                  |     100 |      100 |     100 |     100 |                                                                                                                                                       
  DeactivateCommand.js                   |      24 |    14.28 |     100 |      24 | 33-96                                                                                                                                                 
  ResetCommand.js                        |   95.45 |    60.46 |     100 |   95.45 | 86-92                                                                                                                                                 
 src/application/commands/personality    |   85.66 |     75.1 |      80 |   86.26 |                                                                                                                                                       
  AddCommand.js                          |   97.36 |     93.5 |     100 |   97.36 | 291,322                                                                                                                                               
  AliasCommand.js                        |   71.92 |    57.14 |   66.66 |   73.21 | 170-212,218-234,238-258                                                                                                                               
  InfoCommand.js                         |      65 |    40.62 |   66.66 |      65 | 56,87-139                                                                                                                                             
  ListCommand.js                         |   97.87 |    91.66 |     100 |   97.87 | 139                                                                                                                                                   
  RemoveCommand.js                       |   87.87 |    71.73 |   66.66 |   89.23 | 90-102,181-182,192,224-240                                                                                                                            
 src/application/commands/utility        |   96.63 |    83.59 |      90 |    96.8 |                                                                                                                                                       
  DebugCommand.js                        |     100 |    79.16 |     100 |     100 | 16,26,28-30                                                                                                                                           
  HelpCommand.js                         |    96.8 |    87.01 |     100 |   96.66 | 138-150                                                                                                                                               
  NotificationsCommand.js                |    97.1 |    89.13 |     100 |    97.1 | 70-71                                                                                                                                                 
  PingCommand.js                         |     100 |    66.66 |     100 |     100 | 16                                                                                                                                                    
  PurgbotCommand.js                      |   92.13 |    80.64 |   61.53 |   93.18 | 77-78,93-95,240                                                                                                                                       
  StatusCommand.js                       |   96.77 |    87.83 |      80 |   96.55 | 43,169                                                                                                                                                
  VolumeTestCommand.js                   |     100 |    70.27 |     100 |     100 | 16,22,73-83,107,119-142                                                                                                                               
 src/application/eventHandlers           |   94.73 |       70 |     100 |   94.66 |                                                                                                                                                       
  EventHandlerRegistry.js                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  PersonalityCacheInvalidator.js         |   88.57 |       70 |     100 |   88.57 | 39,68,89,116                                                                                                                                          
  PersonalityEventLogger.js              |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/application/routers                 |   95.65 |    64.58 |     100 |   95.58 |                                                                                                                                                       
  PersonalityRouter.js                   |   95.65 |    64.58 |     100 |   95.58 | 90,186-187                                                                                                                                            
 src/application/services                |   47.22 |     54.4 |   74.13 |   46.34 |                                                                                                                                                       
  ComparisonTester.js                    |   93.28 |    88.17 |     100 |   92.91 | 109,128,198-202,217-223,264                                                                                                                           
  FeatureFlags.js                        |   98.18 |      100 |   95.23 |   98.14 | 74                                                                                                                                                    
  PersonalityApplicationService.js       |       0 |        0 |       0 |       0 | 1-578                                                                                                                                                 
 src/commands                            |   68.62 |    36.36 |      80 |      68 |                                                                                                                                                       
  index.js                               |   68.62 |    36.36 |      80 |      68 | 53,60-72,86-89,95-96,124-126                                                                                                                          
 src/commands/handlers                   |   60.11 |    53.59 |   40.56 |   60.78 |                                                                                                                                                       
  activate.js                            |   90.62 |       75 |     100 |   90.62 | 94-98                                                                                                                                                 
  add.js                                 |   77.69 |    61.33 |      25 |   77.69 | 48-49,55-58,73,104-107,116-119,280,302,320-364                                                                                                        
  alias.js                               |      88 |       75 |     100 |      88 | 71-75                                                                                                                                                 
  auth.js                                |   94.11 |       90 |   85.71 |   94.11 | 75-76,108,147-148,293                                                                                                                                 
  autorespond.js                         |     100 |    83.33 |     100 |     100 | 54,64                                                                                                                                                 
  backup.js                              |    3.55 |        0 |       0 |    3.66 | 33,42-452,464-1066,1107-1118                                                                                                                          
  deactivate.js                          |      95 |      100 |     100 |      95 | 62                                                                                                                                                    
  debug.js                               |      96 |      100 |     100 |      96 | 129-130                                                                                                                                               
  help.js                                |   83.56 |    80.95 |   85.71 |    84.5 | 98-108,159-166,213-217                                                                                                                                
  info.js                                |   60.71 |       25 |     100 |   60.71 | 57-89                                                                                                                                                 
  list.js                                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  notifications.js                       |   90.74 |    86.36 |     100 |   90.74 | 134-135,180-184                                                                                                                                       
  ping.js                                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  purgbot.js                             |   88.09 |    69.09 |    62.5 |   89.02 | 91-92,115-116,136-137,193-194,247                                                                                                                     
  remove.js                              |      95 |    83.33 |     100 |      95 | 76,88                                                                                                                                                 
  reset.js                               |     100 |     87.5 |     100 |     100 | 59                                                                                                                                                    
  status.js                              |   94.11 |    60.52 |     100 |   95.74 | 106,117                                                                                                                                               
  verify.js                              |   91.66 |    76.47 |   33.33 |   94.28 | 91,112                                                                                                                                                
  volumetest.js                          |     100 |    81.25 |     100 |     100 | 59-69,102                                                                                                                                             
 src/commands/middleware                 |     100 |      100 |     100 |     100 |                                                                                                                                                       
  auth.js                                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  deduplication.js                       |     100 |      100 |     100 |     100 |                                                                                                                                                       
  permissions.js                         |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/commands/utils                      |      77 |    69.04 |      78 |   77.17 |                                                                                                                                                       
  commandLoader.js                       |   75.86 |    66.66 |     100 |      75 | 34,42-47,63-64,78                                                                                                                                     
  commandRegistry.js                     |   93.18 |    94.44 |      85 |   93.02 | 94,111,116                                                                                                                                            
  commandValidator.js                    |     100 |      100 |     100 |     100 |                                                                                                                                                       
  messageTracker.js                      |   65.62 |    52.08 |   65.21 |   66.31 | 15-16,64-84,98-109,142-143,200,264-265,317-333                                                                                                        
 src/core/api                            |   75.83 |    71.76 |      68 |   76.19 |                                                                                                                                                       
  ProfileInfoCache.js                    |   73.33 |    73.68 |      70 |   73.33 | 36,92-96,111-113                                                                                                                                      
  ProfileInfoClient.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                       
  ProfileInfoFetcher.js                  |   65.43 |    54.76 |   54.54 |   66.25 | 22,52-53,131-134,146,151-162,167-179,187-210                                                                                                          
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/core/authentication                 |   97.96 |    91.62 |     100 |    98.4 |                                                                                                                                                       
  AIClientFactory.js                     |     100 |    94.11 |     100 |     100 | 59                                                                                                                                                    
  AuthManager.js                         |     100 |    93.75 |     100 |     100 | 90,195                                                                                                                                                
  AuthPersistence.js                     |      92 |    72.22 |     100 |   93.87 | 145,157,163-164,235-236                                                                                                                               
  NsfwVerificationManager.js             |     100 |    95.65 |     100 |     100 | 125,161                                                                                                                                               
  PersonalityAuthValidator.js            |   98.46 |    86.95 |     100 |   98.41 | 100                                                                                                                                                   
  UserTokenManager.js                    |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/core/conversation                   |   83.73 |    84.27 |   74.69 |   84.09 |                                                                                                                                                       
  AutoResponder.js                       |   83.33 |    66.66 |    62.5 |   88.23 | 53,72                                                                                                                                                 
  ChannelActivation.js                   |   81.81 |     87.5 |      75 |   81.81 | 95-99,111,122                                                                                                                                         
  ConversationManager.js                 |   78.09 |    76.19 |   80.55 |   78.09 | 64-65,235-245,260-261,272-273,289-307,317,346-350                                                                                                     
  ConversationPersistence.js             |   60.78 |    71.42 |   36.36 |   60.78 | 45-68,115-122,157-166                                                                                                                                 
  ConversationTracker.js                 |   94.28 |     87.3 |    87.5 |   94.28 | 153,261,294,330-332                                                                                                                                   
  MessageHistory.js                      |   94.73 |    93.93 |     100 |   96.29 | 135-138                                                                                                                                               
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/core/notifications                  |   97.27 |    93.41 |   94.54 |   97.63 |                                                                                                                                                       
  GitHubReleaseClient.js                 |   98.07 |    94.02 |     100 |   98.05 | 20,53                                                                                                                                                 
  ReleaseNotificationManager.js          |   95.15 |     92.3 |   86.95 |    96.2 | 27-28,195-196,234,362                                                                                                                                 
  UserPreferencesPersistence.js          |   97.64 |     92.5 |     100 |   97.56 | 90-91                                                                                                                                                 
  VersionTracker.js                      |     100 |    97.67 |     100 |     100 | 141                                                                                                                                                   
  index.js                               |     100 |       50 |     100 |     100 | 22                                                                                                                                                    
 src/core/personality                    |   82.25 |     86.3 |    67.9 |   82.07 |                                                                                                                                                       
  PersonalityManager.js                  |   77.82 |    83.87 |   53.33 |    77.6 | 30-31,66-70,83-84,100,139,153-154,190-192,197,249-250,274,283-284,306-307,329,353,391,405,495,523-524,538-543,550-564,588-589,606,633,644-646,648-658 
  PersonalityPersistence.js              |   50.79 |       50 |      40 |   50.79 | 83-150                                                                                                                                                
  PersonalityRegistry.js                 |   96.92 |     88.7 |   90.47 |   96.89 | 38,113,200-201                                                                                                                                        
  PersonalityValidator.js                |   95.29 |    94.44 |     100 |   95.12 | 33,107,176,227                                                                                                                                        
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/domain/ai                           |   97.39 |    97.38 |   94.93 |   97.36 |                                                                                                                                                       
  AIContent.js                           |   97.43 |    96.29 |     100 |   97.22 | 61                                                                                                                                                    
  AIEvents.js                            |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AIModel.js                             |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AIRequest.js                           |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AIRequestDeduplicator.js               |      90 |     87.5 |   73.33 |      90 | 130-131,154-158,164                                                                                                                                   
  AIRequestId.js                         |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AIRequestRepository.js                 |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AIService.js                           |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/domain/authentication               |     100 |    99.24 |     100 |     100 |                                                                                                                                                       
  AuthContext.js                         |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AuthenticationEvents.js                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  AuthenticationRepository.js            |     100 |      100 |     100 |     100 |                                                                                                                                                       
  NsfwStatus.js                          |     100 |      100 |     100 |     100 |                                                                                                                                                       
  Token.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
  TokenService.js                        |     100 |      100 |     100 |     100 |                                                                                                                                                       
  UserAuth.js                            |     100 |    97.77 |     100 |     100 | 90                                                                                                                                                    
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/domain/conversation                 |   98.21 |    95.23 |   98.48 |   98.19 |                                                                                                                                                       
  ChannelActivation.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                       
  Conversation.js                        |   98.78 |    92.98 |     100 |   98.78 | 199                                                                                                                                                   
  ConversationEvents.js                  |      85 |       84 |   83.33 |      85 | 90-93                                                                                                                                                 
  ConversationId.js                      |     100 |      100 |     100 |     100 |                                                                                                                                                       
  ConversationRepository.js              |     100 |      100 |     100 |     100 |                                                                                                                                                       
  ConversationSettings.js                |     100 |      100 |     100 |     100 |                                                                                                                                                       
  Message.js                             |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/domain/personality                  |   90.55 |    85.47 |   91.39 |   90.78 |                                                                                                                                                       
  Alias.js                               |   95.65 |    88.88 |     100 |   95.65 | 78                                                                                                                                                    
  ExtendedPersonalityProfile.js          |      75 |    82.48 |   53.84 |   77.58 | 124,128,132,136-176,239,288                                                                                                                           
  Personality.js                         |   93.47 |    79.68 |     100 |   93.25 | 100,158,162,185,189,242                                                                                                                               
  PersonalityConfiguration.js            |     100 |      100 |     100 |     100 |                                                                                                                                                       
  PersonalityDataRepository.js           |   81.37 |    41.02 |   84.61 |      81 | 60-63,125,191,204-206,233-259                                                                                                                         
  PersonalityEvents.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                       
  PersonalityId.js                       |     100 |      100 |     100 |     100 |                                                                                                                                                       
  PersonalityProfile.js                  |   97.05 |    95.12 |     100 |   96.96 | 114,122,126                                                                                                                                           
  PersonalityRepository.js               |     100 |      100 |     100 |     100 |                                                                                                                                                       
  UserId.js                              |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/domain/shared                       |     100 |      100 |   97.05 |     100 |                                                                                                                                                       
  AggregateRoot.js                       |     100 |      100 |      90 |     100 |                                                                                                                                                       
  DomainEvent.js                         |     100 |      100 |     100 |     100 |                                                                                                                                                       
  DomainEventBus.js                      |     100 |      100 |     100 |     100 |                                                                                                                                                       
  ValueObject.js                         |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
 src/handlers                            |   63.29 |    49.05 |   58.44 |   63.39 |                                                                                                                                                       
  dmHandler.js                           |    7.08 |        0 |       0 |    7.14 | 24-324                                                                                                                                                
  errorHandler.js                        |   82.92 |       75 |   72.22 |   81.81 | 132-135,146,163-179,213                                                                                                                               
  messageHandler.js                      |    82.7 |    69.87 |   71.42 |   83.14 | 39-40,54-55,111-140,189,208,213-226,243,266,291,298-299,352,390-402,467,501,598,638,644,710,725,731                                                   
  messageTrackerHandler.js               |   70.52 |     61.7 |    64.7 |   71.91 | 10-18,30-48,63-69,77-78,110,226-227,244,260-262                                                                                                       
  personalityHandler.js                  |   45.17 |    25.33 |      40 |   45.52 | 36-39,75-81,204-458,466-503,524-543,583-630,801,805,819                                                                                               
  referenceHandler.js                    |    87.7 |    74.69 |     100 |    87.7 | 132,146,151-154,192,269,349-353,369,391-398,474-480,499,513,521-529,535                                                                               
 src/monitoring                          |      85 |    73.68 |   72.72 |      85 |                                                                                                                                                       
  deduplicationMonitor.js                |      85 |    73.68 |   72.72 |      85 | 75-76,116-123,138,160                                                                                                                                 
 src/routes                              |   82.67 |    72.61 |   88.46 |   82.58 |                                                                                                                                                       
  avatars.js                             |   89.23 |       84 |   85.71 |   89.23 | 104-107,151-152,171                                                                                                                                   
  health.js                              |   88.09 |       60 |    87.5 |    87.8 | 114,162-166                                                                                                                                           
  webhooks.js                            |   75.78 |    73.52 |    90.9 |   75.78 | 27-28,59-60,68,76,81-82,148-151,165-168,193-200                                                                                                       
 src/services                            |    6.32 |        0 |       0 |    6.41 |                                                                                                                                                       
  PersonalityDataService.js              |    6.32 |        0 |       0 |    6.41 | 16-247,260-263                                                                                                                                        
 src/utils                               |   93.42 |    85.61 |   93.63 |   93.47 |                                                                                                                                                       
  LRUCache.js                            |   98.78 |    92.85 |     100 |   98.78 | 233                                                                                                                                                   
  aiAuth.js                              |     100 |       80 |     100 |     100 | 19-20                                                                                                                                                 
  aiErrorHandler.js                      |     100 |    93.69 |     100 |     100 | 57,123,155,169,193-194                                                                                                                                
  aiMessageFormatter.js                  |    87.2 |    80.95 |      70 |    87.2 | 284-288,308-311,393-406,412,455-482                                                                                                                   
  aiRequestManager.js                    |   94.68 |       90 |     100 |   94.04 | 196-207                                                                                                                                               
  avatarManager.js                       |   76.66 |     61.7 |   72.72 |   76.87 | 30-31,105,204-219,233,249-250,259-285,330,367-371,380-384                                                                                             
  avatarStorage.js                       |   87.41 |    79.26 |     100 |   88.27 | 82,88-89,103-104,160,178,298,309-321,338-339,348                                                                                                      
  channelUtils.js                        |     100 |    94.73 |     100 |     100 | 27                                                                                                                                                    
  contentSanitizer.js                    |   96.55 |       84 |     100 |   95.65 | 57                                                                                                                                                    
  contentSimilarity.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                       
  embedBuilders.js                       |   89.42 |    74.46 |    90.9 |   89.42 | 131-138,168-179                                                                                                                                       
  embedUtils.js                          |   97.27 |    93.47 |   92.85 |   98.11 | 221-222                                                                                                                                               
  errorTracker.js                        |     100 |      100 |     100 |     100 |                                                                                                                                                       
  messageDeduplication.js                |     100 |       88 |     100 |     100 | 38-42                                                                                                                                                 
  messageFormatter.js                    |      97 |    94.11 |     100 |   96.93 | 100,250,274                                                                                                                                           
  personalityAuth.js                     |     100 |       75 |     100 |     100 | 19-20,59-71,74                                                                                                                                        
  pluralkitMessageStore.js               |   94.82 |    93.33 |   76.92 |   96.49 | 163,182                                                                                                                                               
  rateLimiter.js                         |     100 |    97.61 |     100 |     100 | 67                                                                                                                                                    
  requestTracker.js                      |     100 |      100 |     100 |     100 |                                                                                                                                                       
  threadHandler.js                       |     100 |    94.59 |     100 |     100 | 174-199                                                                                                                                               
  urlValidator.js                        |   96.96 |    97.61 |   77.77 |   96.72 | 16-17                                                                                                                                                 
  webhookCache.js                        |   93.06 |       75 |     100 |   92.92 | 88-89,122,151-155,299-300                                                                                                                             
  webhookUserTracker.js                  |   92.95 |    85.58 |   93.75 |   92.64 | 100-103,271-276,440-442                                                                                                                               
 src/utils/media                         |    89.5 |    81.25 |   86.66 |   90.96 |                                                                                                                                                       
  audioHandler.js                        |   88.46 |    84.12 |      80 |      90 | 99-101,106-108,113-123,293                                                                                                                            
  imageHandler.js                        |   78.84 |    64.61 |      80 |      81 | 40,97-123,153,155,193,266,295                                                                                                                         
  index.js                               |     100 |      100 |     100 |     100 |                                                                                                                                                       
  mediaHandler.js                        |   98.47 |    89.28 |     100 |   99.21 | 240                                                                                                                                                   
 src/webhook                             |   91.52 |    87.77 |   78.12 |    92.3 |                                                                                                                                                       
  dmHandler.js                           |   97.45 |     87.5 |      50 |   98.27 | 26,41                                                                                                                                                 
  errorUtils.js                          |     100 |      100 |     100 |     100 |                                                                                                                                                       
  index.js                               |       0 |      100 |     100 |       0 | 7-13                                                                                                                                                  
  messageThrottler.js                    |   91.07 |       80 |      75 |   91.07 | 31-32,71-72,185                                                                                                                                       
  messageUtils.js                        |   84.53 |    87.69 |     100 |   84.53 | 104,113-126,135-138,252-253                                                                                                                           
  threadHandler.js                       |   94.44 |       84 |      50 |   97.08 | 38,156-157                                                                                                                                            
-----------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------
Summary of all failing tests
FAIL tests/unit/handlers/messageHandler.test.js
  ● messageHandler › handleMentions › should handle multi-word mentions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {"author": {"bot": false, "id": "author-123", "tag": "User#1234", "username": "User"}, "channel": {"id": "channel-123", "isDMBased": [Function isDMBased], "send": [Function mockConstructor]}, "content": "@Test Personality Hello there", "id": "message-123", "reference": null, "reply": [Function mockConstructor], "webhookId": null},
    - Object {
    -   "displayName": "TestPersonality",
    -   "fullName": "test-personality",
    + Promise {
    +   Symbol(async_id_symbol): 7538,
    +   Symbol(trigger_async_id_symbol): 7530,
      },
      "Test Personality",
      {"user": {"id": "client-123"}},
      [Function handlePersonalityInteraction],

    Number of calls: 1

      540 |       
      541 |       // For server channels (default mock), should use delayed processing
    > 542 |       expect(messageTrackerHandler.delayedProcessing).toHaveBeenCalledWith(
          |                                                       ^
      543 |         multiWordMentionMessage,
      544 |         mockPersonality,
      545 |         'Test Personality',

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.test.js:542:55)
      at Generator.call (tests/unit/handlers/messageHandler.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)

  ● messageHandler › handleMentions › should prioritize longest multi-word mentions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {"author": {"bot": false, "id": "author-123", "tag": "User#1234", "username": "User"}, "channel": {"id": "channel-123", "isDMBased": [Function isDMBased], "send": [Function mockConstructor]}, "content": "@Test Personality Prime Hello there", "id": "message-123", "reference": null, "reply": [Function mockConstructor], "webhookId": null},
    - Object {
    -   "displayName": "Test Personality Prime",
    -   "fullName": "test-personality-prime",
    + Promise {
    +   Symbol(async_id_symbol): 7815,
    +   Symbol(trigger_async_id_symbol): 7807,
      },
      "Test Personality Prime",
      {"user": {"id": "client-123"}},
      [Function handlePersonalityInteraction],

    Number of calls: 1

      592 |       
      593 |       // For server channels, should use delayed processing with the longest match
    > 594 |       expect(messageTrackerHandler.delayedProcessing).toHaveBeenCalledWith(
          |                                                       ^
      595 |         complexMentionMessage,
      596 |         testPersonalityPrime,
      597 |         'Test Personality Prime',

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.test.js:594:55)
      at Generator.call (tests/unit/handlers/messageHandler.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.test.js:2:1)

FAIL tests/unit/application/bootstrap/ApplicationBootstrap.test.js
  ● ApplicationBootstrap › Initialization › should initialize successfully with all components

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should initialize successfully with all components

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should create event bus and wire up event handlers when events enabled

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should create event bus and wire up event handlers when events enabled

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should skip event handlers when events disabled

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should skip event handlers when events disabled

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should configure PersonalityRouter with application service

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should configure PersonalityRouter with application service

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should initialize command components

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should initialize command components

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should not reinitialize if already initialized

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should not reinitialize if already initialized

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Initialization › should handle initialization errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Initialization › should handle initialization errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should provide access to application services after initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should provide access to application services after initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should provide access to event bus after initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should provide access to event bus after initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Service Access › should throw error when accessing services before initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Service Access › should throw error when accessing services before initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should shutdown cleanly

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should shutdown cleanly

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when not initialized

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when not initialized

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when event handlers not registered

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Shutdown › should handle shutdown when event handlers not registered

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should return same instance for getApplicationBootstrap

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should return same instance for getApplicationBootstrap

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should reset singleton and allow new instance

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should reset singleton and allow new instance

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Singleton Pattern › should handle reset with shutdown errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Singleton Pattern › should handle reset with shutdown errors gracefully

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Feature Logging › should log active features during initialization

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Feature Logging › should log active features during initialization

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Environment Configuration › should use environment variables for AI service configuration

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Environment Configuration › should use environment variables for AI service configuration

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

  ● ApplicationBootstrap › Environment Configuration › should use default values when environment variables not set

    TypeError: resetApplicationBootstrap is not a function

      103 |
      104 |     // Reset singleton
    > 105 |     resetApplicationBootstrap();
          |     ^
      106 |   });
      107 |
      108 |   afterEach(() => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:105:5)

  ● ApplicationBootstrap › Environment Configuration › should use default values when environment variables not set

    TypeError: resetApplicationBootstrap is not a function

      107 |
      108 |   afterEach(() => {
    > 109 |     resetApplicationBootstrap();
          |     ^
      110 |   });
      111 |
      112 |   describe('Initialization', () => {

      at Object.resetApplicationBootstrap (tests/unit/application/bootstrap/ApplicationBootstrap.test.js:109:5)

FAIL tests/unit/application/services/PersonalityApplicationService.test.js
  ● PersonalityApplicationService › constructor › should require personalityRepository

    expect(received).toThrow(expected)

    Expected substring: "PersonalityRepository is required"

    Received function did not throw

      110 |         aiService: mockAiService,
      111 |         authenticationRepository: mockAuthenticationRepository
    > 112 |       })).toThrow('PersonalityRepository is required');
          |           ^
      113 |     });
      114 |     
      115 |     it('should require aiService', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:112:11)

  ● PersonalityApplicationService › constructor › should require aiService

    expect(received).toThrow(expected)

    Expected substring: "AIService is required"

    Received function did not throw

      117 |         personalityRepository: mockPersonalityRepository,
      118 |         authenticationRepository: mockAuthenticationRepository
    > 119 |       })).toThrow('AIService is required');
          |           ^
      120 |     });
      121 |     
      122 |     it('should require authenticationRepository', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:119:11)

  ● PersonalityApplicationService › constructor › should require authenticationRepository

    expect(received).toThrow(expected)

    Expected substring: "AuthenticationRepository is required"

    Received function did not throw

      124 |         personalityRepository: mockPersonalityRepository,
      125 |         aiService: mockAiService
    > 126 |       })).toThrow('AuthenticationRepository is required');
          |           ^
      127 |     });
      128 |     
      129 |     it('should use default event bus if not provided', () => {

      at Object.toThrow (tests/unit/application/services/PersonalityApplicationService.test.js:126:11)

  ● PersonalityApplicationService › constructor › should use default event bus if not provided

    expect(received).toBeDefined()

    Received: undefined

      134 |       });
      135 |       
    > 136 |       expect(serviceWithDefaultBus.eventBus).toBeDefined();
          |                                              ^
      137 |       expect(serviceWithDefaultBus.eventBus.publish).toBeDefined();
      138 |       expect(typeof serviceWithDefaultBus.eventBus.publish).toBe('function');
      139 |     });

      at Object.toBeDefined (tests/unit/application/services/PersonalityApplicationService.test.js:136:46)

  ● PersonalityApplicationService › registerPersonality › local mode › should successfully register a new local personality

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      158 |         const result = await service.registerPersonality(validLocalCommand);
      159 |         
    > 160 |         expect(result).toBeInstanceOf(Personality);
          |                        ^
      161 |         expect(result.profile.name).toBe('TestBot');
      162 |         expect(result.profile.mode).toBe('local');
      163 |         expect(result.profile.prompt).toBe('You are a helpful test bot');

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:160:24)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › local mode › should reject local personality without prompt

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      173 |         delete invalidCommand.prompt;
      174 |         
    > 175 |         await expect(service.registerPersonality(invalidCommand))
          |               ^
      176 |           .rejects.toThrow('Local personalities require prompt and modelPath');
      177 |       });
      178 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:175:15)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › external mode › should successfully register a new external personality

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      192 |         const result = await service.registerPersonality(validExternalCommand);
      193 |         
    > 194 |         expect(result).toBeInstanceOf(Personality);
          |                        ^
      195 |         expect(result.profile.name).toBe('TestBot');
      196 |         expect(result.profile.mode).toBe('external');
      197 |         expect(result.profile.prompt).toBeNull();

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:194:24)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › external mode › should default to external mode when not specified

    TypeError: Cannot read properties of undefined (reading 'mode')

      212 |         const result = await service.registerPersonality(commandWithoutMode);
      213 |         
    > 214 |         expect(result.profile.mode).toBe('external');
          |                               ^
      215 |       });
      216 |     });
      217 |     

      at mode (tests/unit/application/services/PersonalityApplicationService.test.js:214:31)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should reject if personality name already exists

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      240 |       };
      241 |       
    > 242 |       await expect(service.registerPersonality(command))
          |             ^
      243 |         .rejects.toThrow('Personality "TestBot" already exists');
      244 |       
      245 |       expect(mockPersonalityRepository.save).not.toHaveBeenCalled();

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:242:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should reject if alias conflicts with existing personality

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      275 |       };
      276 |       
    > 277 |       await expect(service.registerPersonality(command))
          |             ^
      278 |         .rejects.toThrow('Alias "TestB" is already in use by OtherBot');
      279 |     });
      280 |     

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:277:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should handle AI service errors gracefully

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      295 |       
      296 |       // Should still create personality with default model capabilities
    > 297 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      298 |       expect(result.model.capabilities.maxTokens).toBe(4096);
      299 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      300 |     });

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:297:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › registerPersonality › should work without aliases

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality
    Received constructor: Object

      311 |       const result = await service.registerPersonality(command);
      312 |       
    > 313 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      314 |       expect(result.aliases).toHaveLength(0);
      315 |     });
      316 |   });

      at toBeInstanceOf (tests/unit/application/services/PersonalityApplicationService.test.js:313:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update prompt successfully

    TypeError: service.updatePersonalityProfile is not a function

      338 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      339 |       
    > 340 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      341 |         personalityName: 'TestBot',
      342 |         requesterId: '123456789012345678',
      343 |         prompt: 'Updated prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:340:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update model path and resolve new model

    TypeError: service.updatePersonalityProfile is not a function

      352 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      353 |       
    > 354 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      355 |         personalityName: 'TestBot',
      356 |         requesterId: '123456789012345678',
      357 |         modelPath: '/models/gpt-4'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:354:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should update multiple fields at once

    TypeError: service.updatePersonalityProfile is not a function

      366 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      367 |       
    > 368 |       const result = await service.updatePersonalityProfile({
          |                                    ^
      369 |         personalityName: 'TestBot',
      370 |         requesterId: '123456789012345678',
      371 |         prompt: 'New prompt',

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:368:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should reject if personality not found

    TypeError: service.updatePersonalityProfile is not a function

      382 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      383 |       
    > 384 |       await expect(service.updatePersonalityProfile({
          |                            ^
      385 |         personalityName: 'NonExistent',
      386 |         requesterId: '123456789012345678',
      387 |         prompt: 'New prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:384:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › updatePersonalityProfile › should reject if requester is not the owner

    TypeError: service.updatePersonalityProfile is not a function

      392 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      393 |       
    > 394 |       await expect(service.updatePersonalityProfile({
          |                            ^
      395 |         personalityName: 'TestBot',
      396 |         requesterId: '999999999999999999', // Different user
      397 |         prompt: 'New prompt'

      at updatePersonalityProfile (tests/unit/application/services/PersonalityApplicationService.test.js:394:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should add alias successfully

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      428 |       });
      429 |       
    > 430 |       expect(result.aliases).toContainEqual(expect.objectContaining({ name: 'NewAlias' }));
          |                              ^
      431 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      432 |       expect(mockEventBus.publish).toHaveBeenCalled();
      433 |     });

      at toContainEqual (tests/unit/application/services/PersonalityApplicationService.test.js:430:30)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reject if personality not found

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      436 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      437 |       
    > 438 |       await expect(service.addAlias({
          |             ^
      439 |         personalityName: 'NonExistent',
      440 |         alias: 'NewAlias',
      441 |         requesterId: '123456789012345678'

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:438:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reject if requester is not the owner

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      446 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      447 |       
    > 448 |       await expect(service.addAlias({
          |             ^
      449 |         personalityName: 'TestBot',
      450 |         alias: 'NewAlias',
      451 |         requesterId: '999999999999999999'

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:448:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should reassign alias if already in use by another personality

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      473 |       
      474 |       // Verify alias was added to new personality
    > 475 |       expect(result.aliases).toContainEqual(expect.objectContaining({ value: 'takenalias' }));
          |                              ^
      476 |       
      477 |       // Verify both personalities were saved
      478 |       expect(mockPersonalityRepository.save).toHaveBeenCalledTimes(2);

      at toContainEqual (tests/unit/application/services/PersonalityApplicationService.test.js:475:30)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › addAlias › should no-op if alias already points to same personality

    expect(received).toBe(expected) // Object.is equality

    - Expected  - 38
    + Received  +  1

    - Object {
    -   "aliases": Array [
    -     Object {
    -       "original": "ExistingAlias",
    -       "value": "existingalias",
    -     },
    -   ],
    -   "createdAt": "2025-06-19T07:39:13.030Z",
    -   "id": "personality-mc32lddy-dp182ow",
    -   "model": Object {
    -     "capabilities": Object {
    -       "maxTokens": 4096,
    -       "supportsAudio": false,
    -       "supportsImages": false,
    -       "temperature": 0.7,
    -     },
    -     "name": "gpt-4",
    -     "path": "/model",
    -   },
    -   "ownerId": "123456789012345678",
    -   "personalityId": "personality-mc32lddy-dp182ow",
    -   "profile": Object {
    -     "avatarUrl": null,
    -     "displayName": "TestBot",
    -     "errorMessage": null,
    -     "jailbreak": null,
    -     "maxWordCount": 2000,
    -     "mode": "local",
    -     "modelPath": "/model",
    -     "name": "TestBot",
    -     "prompt": "Test prompt",
    -     "temperature": 1,
    -     "voiceConfig": null,
    -   },
    -   "removed": false,
    -   "updatedAt": "2025-06-19T07:39:13.030Z",
    -   "version": 2,
    - }
    + Object {}

      496 |       });
      497 |       
    > 498 |       expect(result).toBe(existingPersonality);
          |                      ^
      499 |       // Should not save when alias already exists for same personality
      500 |       expect(mockPersonalityRepository.save).not.toHaveBeenCalled();
      501 |     });

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:498:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removeAlias › should remove alias successfully

    TypeError: service.removeAlias is not a function

      520 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      521 |       
    > 522 |       const result = await service.removeAlias({
          |                                    ^
      523 |         personalityName: 'TestBot',
      524 |         alias: 'TB',
      525 |         requesterId: '123456789012345678'

      at removeAlias (tests/unit/application/services/PersonalityApplicationService.test.js:522:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removeAlias › should reject if requester is not the owner

    TypeError: service.removeAlias is not a function

      534 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      535 |       
    > 536 |       await expect(service.removeAlias({
          |                            ^
      537 |         personalityName: 'TestBot',
      538 |         alias: 'TB',
      539 |         requesterId: '999999999999999999'

      at removeAlias (tests/unit/application/services/PersonalityApplicationService.test.js:536:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should remove personality successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      563 |       });
      564 |       
    > 565 |       expect(existingPersonality.isRemoved).toBe(true);
          |                                             ^
      566 |       expect(mockPersonalityRepository.save).toHaveBeenCalled();
      567 |       expect(mockPersonalityRepository.delete).toHaveBeenCalledWith(existingPersonality.id.toString());
      568 |       expect(mockEventBus.publish).toHaveBeenCalled();

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:565:45)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should reject if personality not found

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      572 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      573 |       
    > 574 |       await expect(service.removePersonality({
          |             ^
      575 |         personalityName: 'NonExistent',
      576 |         requesterId: '123456789012345678'
      577 |       })).rejects.toThrow('Personality "NonExistent" not found');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:574:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › removePersonality › should reject if requester is not the owner

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      581 |       mockPersonalityRepository.findByName.mockResolvedValue(existingPersonality);
      582 |       
    > 583 |       await expect(service.removePersonality({
          |             ^
      584 |         personalityName: 'TestBot',
      585 |         requesterId: '999999999999999999'
      586 |       })).rejects.toThrow('Only the owner can remove a personality');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/application/services/PersonalityApplicationService.test.js:583:13)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonality › should find personality by name

    expect(received).toBe(expected) // Object.is equality

    Expected: {"aliases": [{"original": "TB", "value": "tb"}], "createdAt": "2025-06-19T07:39:13.053Z", "id": "personality-mc32ldel-0u1mi7t", "model": {"capabilities": {"maxTokens": 4096, "supportsAudio": false, "supportsImages": false, "temperature": 0.7}, "name": "gpt-4", "path": "/model"}, "ownerId": "123456789012345678", "personalityId": "personality-mc32ldel-0u1mi7t", "profile": {"avatarUrl": null, "displayName": "TestBot", "errorMessage": null, "jailbreak": null, "maxWordCount": 1000, "mode": "local", "modelPath": "/model", "name": "TestBot", "prompt": "Test prompt", "temperature": 1, "voiceConfig": null}, "removed": false, "updatedAt": "2025-06-19T07:39:13.053Z", "version": 2}
    Received: null

      606 |       const result = await service.getPersonality('TestBot');
      607 |       
    > 608 |       expect(result).toBe(personality);
          |                      ^
      609 |       expect(mockPersonalityRepository.findByName).toHaveBeenCalledWith('TestBot');
      610 |       expect(mockPersonalityRepository.findByAlias).not.toHaveBeenCalled();
      611 |     });

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:608:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonality › should find personality by alias if not found by name

    expect(received).toBe(expected) // Object.is equality

    Expected: {"aliases": [{"original": "TB", "value": "tb"}], "createdAt": "2025-06-19T07:39:13.057Z", "id": "personality-mc32ldep-mztfnkl", "model": {"capabilities": {"maxTokens": 4096, "supportsAudio": false, "supportsImages": false, "temperature": 0.7}, "name": "gpt-4", "path": "/model"}, "ownerId": "123456789012345678", "personalityId": "personality-mc32ldep-mztfnkl", "profile": {"avatarUrl": null, "displayName": "TestBot", "errorMessage": null, "jailbreak": null, "maxWordCount": 1000, "mode": "local", "modelPath": "/model", "name": "TestBot", "prompt": "Test prompt", "temperature": 1, "voiceConfig": null}, "removed": false, "updatedAt": "2025-06-19T07:39:13.057Z", "version": 2}
    Received: null

      617 |       const result = await service.getPersonality('TB');
      618 |       
    > 619 |       expect(result).toBe(personality);
          |                      ^
      620 |       expect(mockPersonalityRepository.findByAlias).toHaveBeenCalledWith('TB');
      621 |     });
      622 |     

      at toBe (tests/unit/application/services/PersonalityApplicationService.test.js:619:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › listPersonalities › should return all personalities

    TypeError: service.listPersonalities is not a function

      650 |       mockPersonalityRepository.findAll.mockResolvedValue(personalities);
      651 |       
    > 652 |       const result = await service.listPersonalities();
          |                                    ^
      653 |       
      654 |       expect(result).toEqual(personalities);
      655 |       expect(mockPersonalityRepository.findAll).toHaveBeenCalled();

      at listPersonalities (tests/unit/application/services/PersonalityApplicationService.test.js:652:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › listPersonalitiesByOwner › should return personalities for specific owner

    expect(received).toEqual(expected) // deep equality

    - Expected  - 68
    + Received  +  1

    - Array [
    -   Object {
    -     "aliases": Array [],
    -     "createdAt": "2025-06-19T07:39:13.071Z",
    -     "id": "personality-mc32ldf3-qawtyl6",
    -     "model": Object {
    -       "capabilities": Object {
    -         "maxTokens": 4096,
    -         "supportsAudio": false,
    -         "supportsImages": false,
    -         "temperature": 0.7,
    -       },
    -       "name": "gpt-4",
    -       "path": "/model",
    -     },
    -     "ownerId": "123456789012345678",
    -     "personalityId": "personality-mc32ldf3-qawtyl6",
    -     "profile": Object {
    -       "avatarUrl": null,
    -       "displayName": "Bot1",
    -       "errorMessage": null,
    -       "jailbreak": null,
    -       "maxWordCount": 1000,
    -       "mode": "local",
    -       "modelPath": "/model",
    -       "name": "Bot1",
    -       "prompt": "Prompt1",
    -       "temperature": 1,
    -       "voiceConfig": null,
    -     },
    -     "removed": false,
    -     "updatedAt": "2025-06-19T07:39:13.071Z",
    -     "version": 1,
    -   },
    -   Object {
    -     "aliases": Array [],
    -     "createdAt": "2025-06-19T07:39:13.071Z",
    -     "id": "personality-mc32ldf3-dytkjgk",
    -     "model": Object {
    -       "capabilities": Object {
    -         "maxTokens": 4096,
    -         "supportsAudio": false,
    -         "supportsImages": false,
    -         "temperature": 0.7,
    -       },
    -       "name": "gpt-4",
    -       "path": "/model",
    -     },
    -     "ownerId": "123456789012345678",
    -     "personalityId": "personality-mc32ldf3-dytkjgk",
    -     "profile": Object {
    -       "avatarUrl": null,
    -       "displayName": "Bot2",
    -       "errorMessage": null,
    -       "jailbreak": null,
    -       "maxWordCount": 1000,
    -       "mode": "local",
    -       "modelPath": "/model",
    -       "name": "Bot2",
    -       "prompt": "Prompt2",
    -       "temperature": 1,
    -       "voiceConfig": null,
    -     },
    -     "removed": false,
    -     "updatedAt": "2025-06-19T07:39:13.071Z",
    -     "version": 1,
    -   },
    - ]
    + Array []

      679 |       const result = await service.listPersonalitiesByOwner(ownerId);
      680 |       
    > 681 |       expect(result).toEqual(personalities);
          |                      ^
      682 |       expect(mockPersonalityRepository.findByOwner).toHaveBeenCalledWith(expect.objectContaining({
      683 |         value: ownerId
      684 |       }));

      at toEqual (tests/unit/application/services/PersonalityApplicationService.test.js:681:22)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should grant permission to owner

    TypeError: service.checkPermission is not a function

      703 |       mockPersonalityRepository.findByAlias.mockResolvedValue(null);
      704 |       
    > 705 |       const hasPermission = await service.checkPermission({
          |                                           ^
      706 |         userId: ownerId,
      707 |         personalityName: 'TestBot'
      708 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:705:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should grant permission to authenticated user

    TypeError: service.checkPermission is not a function

      722 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(mockUserAuth);
      723 |       
    > 724 |       const hasPermission = await service.checkPermission({
          |                                           ^
      725 |         userId: otherUserId,
      726 |         personalityName: 'TestBot'
      727 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:724:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission to unauthenticated user

    TypeError: service.checkPermission is not a function

      741 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(mockUserAuth);
      742 |       
    > 743 |       const hasPermission = await service.checkPermission({
          |                                           ^
      744 |         userId: otherUserId,
      745 |         personalityName: 'TestBot'
      746 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:743:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission if personality not found

    TypeError: service.checkPermission is not a function

      753 |       mockPersonalityRepository.findByAlias.mockResolvedValue(null);
      754 |       
    > 755 |       const hasPermission = await service.checkPermission({
          |                                           ^
      756 |         userId: ownerId,
      757 |         personalityName: 'NonExistent'
      758 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:755:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should deny permission if no user auth found

    TypeError: service.checkPermission is not a function

      767 |       mockAuthenticationRepository.findByUserId.mockResolvedValue(null);
      768 |       
    > 769 |       const hasPermission = await service.checkPermission({
          |                                           ^
      770 |         userId: otherUserId,
      771 |         personalityName: 'TestBot'
      772 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:769:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › checkPermission › should handle errors gracefully

    TypeError: service.checkPermission is not a function

      778 |       mockPersonalityRepository.findByName.mockRejectedValue(new Error('DB error'));
      779 |       
    > 780 |       const hasPermission = await service.checkPermission({
          |                                           ^
      781 |         userId: ownerId,
      782 |         personalityName: 'TestBot'
      783 |       });

      at checkPermission (tests/unit/application/services/PersonalityApplicationService.test.js:780:43)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _resolveAIModel › should create model with AI service info

    TypeError: service._resolveAIModel is not a function

      791 |       const modelPath = '/models/gpt-4';
      792 |       
    > 793 |       const model = await service._resolveAIModel(modelPath);
          |                                   ^
      794 |       
      795 |       expect(model).toBeInstanceOf(AIModel);
      796 |       expect(model.name).toBe('gpt-4');

      at _resolveAIModel (tests/unit/application/services/PersonalityApplicationService.test.js:793:35)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _resolveAIModel › should create default model if AI service fails

    TypeError: service._resolveAIModel is not a function

      803 |       mockAiService.getModelInfo.mockRejectedValue(new Error('Model not found'));
      804 |       
    > 805 |       const model = await service._resolveAIModel(modelPath);
          |                                   ^
      806 |       
      807 |       expect(model).toBeInstanceOf(AIModel);
      808 |       expect(model.name).toBe(modelPath);

      at _resolveAIModel (tests/unit/application/services/PersonalityApplicationService.test.js:805:35)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should return personality without refresh if still fresh

    TypeError: service.getPersonalityWithProfile is not a function

      836 |         mockPersonalityRepository.findByName.mockResolvedValue(externalPersonality);
      837 |         
    > 838 |         const result = await service.getPersonalityWithProfile('test-bot');
          |                                      ^
      839 |         
      840 |         expect(result).toBe(externalPersonality);
      841 |         expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:838:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should refresh profile from API if stale

    TypeError: service.getPersonalityWithProfile is not a function

      850 |         });
      851 |         
    > 852 |         const result = await service.getPersonalityWithProfile('test-bot', '123456789012345678');
          |                                      ^
      853 |         
      854 |         expect(result).toBeInstanceOf(Personality);
      855 |         expect(result.profile.displayName).toBe('Test Bot Updated');

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:852:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › external mode personalities › should handle API fetch failure gracefully

    TypeError: service.getPersonalityWithProfile is not a function

      864 |         mockProfileFetcher.fetchProfileInfo.mockResolvedValue(null);
      865 |         
    > 866 |         const result = await service.getPersonalityWithProfile('test-bot');
          |                                      ^
      867 |         
      868 |         expect(result).toBe(externalPersonality);
      869 |         expect(result.profile.displayName).toBe('Test Bot'); // Original values unchanged

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:866:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › local mode personalities › should return local personality without API refresh

    TypeError: service.getPersonalityWithProfile is not a function

      894 |         mockPersonalityRepository.findByName.mockResolvedValue(localPersonality);
      895 |         
    > 896 |         const result = await service.getPersonalityWithProfile('local-bot');
          |                                      ^
      897 |         
      898 |         expect(result).toBe(localPersonality);
      899 |         expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:896:38)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › should return null if personality not found

    TypeError: service.getPersonalityWithProfile is not a function

      905 |       mockPersonalityRepository.findByName.mockResolvedValue(null);
      906 |       
    > 907 |       const result = await service.getPersonalityWithProfile('non-existent');
          |                                    ^
      908 |       
      909 |       expect(result).toBeNull();
      910 |       expect(mockProfileFetcher.fetchProfileInfo).not.toHaveBeenCalled();

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:907:36)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › getPersonalityWithProfile › should handle errors and re-throw them

    TypeError: service.getPersonalityWithProfile is not a function

      914 |       mockPersonalityRepository.findByName.mockRejectedValue(new Error('Database error'));
      915 |       
    > 916 |       await expect(service.getPersonalityWithProfile('test-bot'))
          |                            ^
      917 |         .rejects.toThrow('Database error');
      918 |       
      919 |       expect(logger.error).toHaveBeenCalledWith(expect.stringContaining('Error getting personality'));

      at getPersonalityWithProfile (tests/unit/application/services/PersonalityApplicationService.test.js:916:28)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

  ● PersonalityApplicationService › _publishEvents › should publish all uncommitted events

    TypeError: service._publishEvents is not a function

      939 |       expect(personality.getUncommittedEvents()).toHaveLength(1);
      940 |       
    > 941 |       await service._publishEvents(personality);
          |                     ^
      942 |       
      943 |       expect(mockEventBus.publish).toHaveBeenCalledTimes(1);
      944 |       expect(mockEventBus.publish).toHaveBeenCalledWith(

      at _publishEvents (tests/unit/application/services/PersonalityApplicationService.test.js:941:21)
      at Generator.call (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at _next (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/services/PersonalityApplicationService.test.js:2:1)

FAIL tests/unit/handlers/messageHandler.mentions.test.js
  ● checkForPersonalityMentions › single word mentions › should return false for invalid mention

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      66 |       const result = await checkForPersonalityMentions(message);
      67 |
    > 68 |       expect(result).toBe(false);
         |                      ^
      69 |     });
      70 |   });
      71 |

      at toBe (tests/unit/handlers/messageHandler.mentions.test.js:68:22)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should detect valid two-word personality mention

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      84 |
      85 |       expect(result).toBe(true);
    > 86 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
         |                                     ^
      87 |     });
      88 |
      89 |     it('should handle multi-word mention at end of message', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:86:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should handle multi-word mention with punctuation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      107 |
      108 |       expect(result).toBe(true);
    > 109 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
          |                                     ^
      110 |     });
      111 |
      112 |     it('should handle three-word aliases when max is 3', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:109:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › multi-word mentions › should handle three-word aliases when max is 3

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "the dark lord"
    Received: "the"

    Number of calls: 1

      121 |
      122 |       expect(result).toBe(true);
    > 123 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('the dark lord');
          |                                     ^
      124 |     });
      125 |
      126 |     it('should not check beyond max word count', async () => {

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:123:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › edge cases › should handle mentions with multiple spaces

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "angel dust"
    Received: "angel"

    Number of calls: 1

      178 |       expect(result).toBe(true);
      179 |       // Should normalize spaces
    > 180 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('angel dust');
          |                                     ^
      181 |     });
      182 |
      183 |     // Note: Testing different mention characters (@ vs &) requires complex module mocking

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:180:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

  ● checkForPersonalityMentions › regex generation based on max word count › should generate correct regex for 5 word max

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "one two three four five"
    Received: "one"

    Number of calls: 1

      209 |
      210 |       // Should check up to 5 words
    > 211 |       expect(getPersonalityByAlias).toHaveBeenCalledWith('one two three four five');
          |                                     ^
      212 |       // Should not check 6 words
      213 |       expect(getPersonalityByAlias).not.toHaveBeenCalledWith('one two three four five six');
      214 |     });

      at toHaveBeenCalledWith (tests/unit/handlers/messageHandler.mentions.test.js:211:37)
      at Generator.call (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)
      at asyncGeneratorStep (tests/unit/handlers/messageHandler.mentions.test.js:2:1)

FAIL tests/unit/application/commands/personality/AliasCommand.test.js
  ● AliasCommand › execute › should add alias successfully with embed

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      84 |       await command.execute(mockContext);
      85 |       
    > 86 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
         |                                               ^
      87 |       
      88 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
      89 |         expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:86:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should add alias successfully without embed support

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      105 |       await command.execute(mockContext);
      106 |       
    > 107 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      108 |       expect(mockContext.respond).toHaveBeenCalledWith(
      109 |         '✅ Alias "newalias" has been added to **Test Personality**.'
      110 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:107:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle slash command options

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      122 |       await command.execute(mockContext);
      123 |       
    > 124 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      125 |     });
      126 |
      127 |     it('should require both arguments for text command', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:124:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should require both arguments for text command

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "You need to provide a personality name and an alias. Usage: `!tz alias <personality-name> <new-alias>`"
    Received: {"embeds": [{"color": 2201331, "description": "Add a nickname or shortcut for an existing personality.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz alias <personality-name> <new-alias>`"}, {"inline": false, "name": "Examples", "value": "• `!tz alias Claude cl` - Add \"cl\" as alias for Claude
    • `!tz alias \"Assistant Bot\" helper` - Add \"helper\" as alias
    • `!tz alias MyAI ai-buddy` - Add \"ai-buddy\" as alias"}, {"inline": false, "name": "Parameters", "value": "• **personality-name**: Name or existing alias of the personality
    • **new-alias**: The new shortcut to add (letters, numbers, underscores, hyphens only)"}], "footer": {"text": "Aliases make it easier to mention personalities quickly"}, "title": "How to Add an Alias"}]}

    Number of calls: 1

      131 |       
      132 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 133 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      134 |         'You need to provide a personality name and an alias. Usage: `!tz alias <personality-name> <new-alias>`'
      135 |       );
      136 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:133:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate personality name is provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Please provide a personality name or alias."
    Received: {"embeds": [{"color": 16007990, "description": "Please provide a personality name or existing alias.", "fields": [{"inline": false, "name": "What to provide", "value": "• The personality's name (e.g., \"Claude\")
    • Or an existing alias (e.g., \"cl\")"}], "title": "❌ Missing Personality Name"}]}

    Number of calls: 1

      142 |       
      143 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 144 |       expect(mockContext.respond).toHaveBeenCalledWith('Please provide a personality name or alias.');
          |                                   ^
      145 |     });
      146 |
      147 |     it('should validate alias is provided', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:144:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate alias is provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Please provide a new alias."
    Received: {"embeds": [{"color": 16007990, "description": "Please provide a new alias to add.", "fields": [{"inline": false, "name": "What to provide", "value": "A short nickname for the personality (e.g., \"helper\", \"ai-bot\", \"assistant\")"}], "title": "❌ Missing Alias"}]}

    Number of calls: 1

      151 |       
      152 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 153 |       expect(mockContext.respond).toHaveBeenCalledWith('Please provide a new alias.');
          |                                   ^
      154 |     });
      155 |
      156 |     it('should validate alias format', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:153:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should validate alias format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Aliases can only contain letters, numbers, underscores, and hyphens."
    Received: {"embeds": [{"color": 16007990, "description": "Aliases can only contain letters, numbers, underscores, and hyphens.", "fields": [{"inline": false, "name": "Valid characters", "value": "• Letters (a-z, A-Z)
    • Numbers (0-9)
    • Underscores (_)
    • Hyphens (-)"}, {"inline": false, "name": "Examples", "value": "✅ `claude-ai`
    ✅ `helper_bot`
    ✅ `AI2024`
    ❌ `claude.ai`
    ❌ `helper bot`
    ❌ `AI@2024`"}], "title": "❌ Invalid Alias Format"}]}

    Number of calls: 1

      160 |       
      161 |       expect(mockPersonalityService.addAlias).not.toHaveBeenCalled();
    > 162 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      163 |         'Aliases can only contain letters, numbers, underscores, and hyphens.'
      164 |       );
      165 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:162:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle service errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Alias already exists"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "Cannot read properties of undefined (reading 'displayName')"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753909"}, "timestamp": "2025-06-19T07:39:13.909Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      173 |       await command.execute(mockContext);
      174 |       
    > 175 |       expect(mockContext.respond).toHaveBeenCalledWith('Alias already exists');
          |                                   ^
      176 |     });
      177 |
      178 |     it('should handle personality without avatar', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:175:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle personality without avatar

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectNotContaining {"thumbnail": Anything}

    Number of calls: 0

      190 |       await command.execute(mockContext);
      191 |       
    > 192 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      193 |         expect.not.objectContaining({
      194 |           thumbnail: expect.anything()
      195 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:192:44)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle personality without display name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": "An alias has been set for **testpersonality**."}

    Number of calls: 0

      210 |       await command.execute(mockContext);
      211 |       
    > 212 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      213 |         expect.objectContaining({
      214 |           description: 'An alias has been set for **testpersonality**.'
      215 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:212:44)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while adding the alias. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753926"}, "timestamp": "2025-06-19T07:39:13.926Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      222 |       await command.execute(mockContext);
      223 |       
    > 224 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      225 |         '❌ An error occurred while adding the alias. ' +
      226 |         'Please try again later or contact support if the issue persists.'
      227 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:224:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should handle service exceptions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while adding the alias. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while adding the alias.", "fields": [{"inline": false, "name": "What happened", "value": "Service error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Verify the personality exists
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318753932"}, "timestamp": "2025-06-19T07:39:13.932Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      233 |       await command.execute(mockContext);
      234 |       
    > 235 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      236 |         '❌ An error occurred while adding the alias. ' +
      237 |         'Please try again later or contact support if the issue persists.'
      238 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:235:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should lowercase input arguments

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "testpersonality", "newalias", "123456789"
    Received: {"alias": "newalias", "personalityName": "testpersonality", "requesterId": "123456789"}

    Number of calls: 1

      244 |       await command.execute(mockContext);
      245 |       
    > 246 |       expect(mockPersonalityService.addAlias).toHaveBeenCalledWith('testpersonality', 'newalias', '123456789');
          |                                               ^
      247 |     });
      248 |
      249 |     it('should use default bot prefix when not provided', async () => {

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:246:47)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

  ● AliasCommand › execute › should use default bot prefix when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "`!tz alias"
    Received: {"embeds": [{"color": 2201331, "description": "Add a nickname or shortcut for an existing personality.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz alias <personality-name> <new-alias>`"}, {"inline": false, "name": "Examples", "value": "• `!tz alias Claude cl` - Add \"cl\" as alias for Claude
    • `!tz alias \"Assistant Bot\" helper` - Add \"helper\" as alias
    • `!tz alias MyAI ai-buddy` - Add \"ai-buddy\" as alias"}, {"inline": false, "name": "Parameters", "value": "• **personality-name**: Name or existing alias of the personality
    • **new-alias**: The new shortcut to add (letters, numbers, underscores, hyphens only)"}], "footer": {"text": "Aliases make it easier to mention personalities quickly"}, "title": "How to Add an Alias"}]}

    Number of calls: 1

      253 |       await command.execute(mockContext);
      254 |       
    > 255 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      256 |         expect.stringContaining('`!tz alias')
      257 |       );
      258 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AliasCommand.test.js:255:35)
      at Generator.call (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AliasCommand.test.js:2:1)

FAIL tests/unit/webhookManager.creation.test.js
  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should preload a personality avatar

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      186 |       
      187 |       // Call the function
    > 188 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      189 |       
      190 |       // Verify fetch was called with the avatar URL
      191 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:188:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should handle personalities with no avatar URL

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      210 |       
      211 |       // Call the function
    > 212 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      213 |       
      214 |       // Verify fetch was not called
      215 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:212:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › preloadPersonalityAvatar › should handle null or undefined personalities

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      223 |     it('should handle null or undefined personalities', async () => {
      224 |       // Call the function with null personality
    > 225 |       await webhookManager.preloadPersonalityAvatar(null);
          |                            ^
      226 |       
      227 |       // Verify fetch was not called
      228 |       const fetch = require('node-fetch');

      at preloadPersonalityAvatar (tests/unit/webhookManager.creation.test.js:225:28)
      at Generator.call (tests/unit/webhookManager.creation.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.creation.test.js:2:1)
      at _next (tests/unit/webhookManager.creation.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.creation.test.js:2:1)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      242 |       };
      243 |       
    > 244 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      245 |       expect(result).toBe('Test Display Name');
      246 |     });
      247 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:244:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should truncate display names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      251 |       };
      252 |       
    > 253 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      254 |       expect(result.length).toBeLessThanOrEqual(32);
      255 |       expect(result).toContain('...');
      256 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:253:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should extract name from fullName if displayName is not available

    TypeError: webhookManager.getStandardizedUsername is not a function

      261 |       };
      262 |       
    > 263 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      264 |       // Should extract the first part before the hyphen
      265 |       expect(result).toBe('Test');
      266 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:263:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should use fullName if it has no hyphens and is short enough

    TypeError: webhookManager.getStandardizedUsername is not a function

      271 |       };
      272 |       
    > 273 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      274 |       expect(result).toBe('Shortname');
      275 |     });
      276 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:273:37)

  ● WebhookManager - Webhook Creation and Management › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      276 |     
      277 |     it('should return "Bot" for null or undefined personality', () => {
    > 278 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      279 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      280 |     });
      281 |   });

      at Object.getStandardizedUsername (tests/unit/webhookManager.creation.test.js:278:29)

FAIL tests/unit/adapters/persistence/FilePersonalityRepository.test.js
  ● FilePersonalityRepository › initialize › should create data directory if it does not exist

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "./test-data", {"recursive": true}

    Number of calls: 0

       98 |       await repository.initialize();
       99 |       
    > 100 |       expect(fs.mkdir).toHaveBeenCalledWith('./test-data', { recursive: true });
          |                        ^
      101 |     });
      102 |     
      103 |     it('should load existing data file', async () => {

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:100:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should load existing data file

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-data/test-personalities.json", "utf8"

    Number of calls: 0

      104 |       await repository.initialize();
      105 |       
    > 106 |       expect(fs.readFile).toHaveBeenCalledWith(
          |                           ^
      107 |         path.join('./test-data', 'test-personalities.json'),
      108 |         'utf8'
      109 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:106:27)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should create new file if it does not exist

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-data/test-personalities.json.tmp", "{
      \"personalities\": {},
      \"aliases\": {}
    }", "utf8"

    Number of calls: 0

      119 |       await repository.initialize();
      120 |       
    > 121 |       expect(fs.writeFile).toHaveBeenCalledWith(
          |                            ^
      122 |         path.join('./test-data', 'test-personalities.json.tmp'),
      123 |         JSON.stringify({ personalities: {}, aliases: {} }, null, 2),
      124 |         'utf8'

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:121:28)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › initialize › should throw error for other file read errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: undefined

      133 |       fs.readFile.mockRejectedValue(new Error('Permission denied'));
      134 |       
    > 135 |       await expect(repository.initialize()).rejects.toThrow(
          |             ^
      136 |         'Failed to initialize repository: Permission denied'
      137 |       );
      138 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:135:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at _next (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should save a personality

    expect(received).not.toBeNull()

    Received: null

      174 |       // Verify behavior - personality can be retrieved
      175 |       const saved = await repository.findById(new PersonalityId('new-personality'));
    > 176 |       expect(saved).not.toBeNull();
          |                         ^
      177 |       expect(saved.profile.displayName).toBe('New Personality');
      178 |       const byAlias = await repository.findByAlias('newbie');
      179 |       expect(byAlias).not.toBeNull();

      at toBeNull (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:176:25)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should update existing personality

    TypeError: Cannot read properties of null (reading 'updateProfile')

      194 |       // Fetch and update real domain object
      195 |       const existingPersonality = await repository.findById(new PersonalityId('test-personality'));
    > 196 |       existingPersonality.updateProfile({
          |                           ^
      197 |         prompt: 'Updated prompt for test personality'
      198 |       });
      199 |       

      at updateProfile (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:196:27)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should handle save errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      223 |       );
      224 |       
    > 225 |       await expect(repository.save(personality)).rejects.toThrow(
          |             ^
      226 |         'Failed to save personality: Failed to persist data: Disk full'
      227 |       );
      228 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:225:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › save › should initialize if not already initialized

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      245 |       await repository.save(personality);
      246 |       
    > 247 |       expect(fs.mkdir).toHaveBeenCalled();
          |                        ^
      248 |       // Verify behavior - personality was saved
      249 |       const saved = await repository.findById(new PersonalityId('new-personality'));
      250 |       expect(saved).not.toBeNull();

      at toHaveBeenCalled (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:247:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findById › should find personality by ID

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Personality

    Received value has no prototype
    Received value: null

      259 |       
      260 |       // Verify returns real domain object
    > 261 |       expect(result).toBeInstanceOf(Personality);
          |                      ^
      262 |       expect(result.personalityId.value).toBe('test-personality');
      263 |       expect(result.ownerId.value).toBe('123456789012345678');
      264 |       expect(result.profile.displayName).toBe('Test Personality');

      at toBeInstanceOf (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:261:22)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findById › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: null

      290 |       await repository.initialize();
      291 |       
    > 292 |       await expect(repository.findById(new PersonalityId('bad-data'))).rejects.toThrow(
          |             ^
      293 |         'Failed to find personality'
      294 |       );
      295 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:292:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByOwner › should find all personalities by owner

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      314 |       
      315 |       // Verify returns real domain objects
    > 316 |       expect(results).toHaveLength(2);
          |                       ^
      317 |       expect(results[0]).toBeInstanceOf(Personality);
      318 |       expect(results[1]).toBeInstanceOf(Personality);
      319 |       expect(results.map(p => p.personalityId.value)).toEqual(['test-personality', 'test-personality-2']);

      at toHaveLength (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:316:23)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByOwner › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: []

      344 |       await repository.initialize();
      345 |       
    > 346 |       await expect(repository.findByOwner(new UserId('123456789012345678'))).rejects.toThrow(
          |             ^
      347 |         'Failed to find personalities by owner'
      348 |       );
      349 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:346:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should find personality by alias

    TypeError: repository.findByAlias is not a function

      354 |       await repository.initialize();
      355 |       
    > 356 |       const result = await repository.findByAlias('test');
          |                                       ^
      357 |       
      358 |       expect(result).toBeInstanceOf(Personality);
      359 |       expect(result.personalityId.value).toBe('test-personality');

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:356:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should find personality by alias case-insensitive

    TypeError: repository.findByAlias is not a function

      363 |       await repository.initialize();
      364 |       
    > 365 |       const result = await repository.findByAlias('TEST');
          |                                       ^
      366 |       
      367 |       expect(result).toBeInstanceOf(Personality);
      368 |       expect(result.personalityId.value).toBe('test-personality');

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:365:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should return null if alias not found

    TypeError: repository.findByAlias is not a function

      372 |       await repository.initialize();
      373 |       
    > 374 |       const result = await repository.findByAlias('non-existent');
          |                                       ^
      375 |       
      376 |       expect(result).toBeNull();
      377 |     });

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:374:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should clean up orphaned alias and return null

    TypeError: repository.findByAlias is not a function

      393 |       await repository.initialize();
      394 |       
    > 395 |       const result = await repository.findByAlias('orphan');
          |                                       ^
      396 |       
      397 |       expect(result).toBeNull();
      398 |       // Verify behavior - orphan cleaned up in subsequent finds

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:395:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findByAlias › should handle errors during hydration

    TypeError: repository.findByAlias is not a function

      419 |       await repository.initialize();
      420 |       
    > 421 |       await expect(repository.findByAlias('bad')).rejects.toThrow(
          |                               ^
      422 |         'Failed to find personality by alias'
      423 |       );
      424 |     });

      at findByAlias (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:421:31)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findAll › should return all personalities

    expect(received).toHaveLength(expected)

    Expected length: 3
    Received length: 0
    Received array:  []

      450 |       const results = await repository.findAll();
      451 |       
    > 452 |       expect(results).toHaveLength(3);
          |                       ^
      453 |       expect(results.every(p => p instanceof Personality)).toBe(true);
      454 |       expect(results.map(p => p.personalityId.value)).toEqual(['test-personality', 'test-2', 'test-3']);
      455 |     });

      at toHaveLength (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:452:23)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › findAll › should handle errors during hydration

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: []

      488 |       await repository.initialize();
      489 |       
    > 490 |       await expect(repository.findAll()).rejects.toThrow(
          |             ^
      491 |         'Failed to find all personalities'
      492 |       );
      493 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:490:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should delete a personality and its aliases

    TypeError: repository.delete is not a function

      498 |       await repository.initialize();
      499 |       
    > 500 |       await repository.delete(new PersonalityId('test-personality'));
          |                              ^
      501 |       
      502 |       // Verify behavior - personality and aliases no longer found
      503 |       const personality = await repository.findById(new PersonalityId('test-personality'));

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:500:30
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should handle deleting non-existent personality

    TypeError: repository.delete is not a function

      513 |       await repository.initialize();
      514 |       
    > 515 |       await repository.delete(new PersonalityId('non-existent'));
          |                              ^
      516 |       
      517 |       expect(fs.writeFile).not.toHaveBeenCalled();
      518 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:515:30
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › delete › should handle delete errors

    TypeError: repository.delete is not a function

      522 |       fs.writeFile.mockRejectedValue(new Error('Permission denied'));
      523 |       
    > 524 |       await expect(repository.delete(new PersonalityId('test-personality'))).rejects.toThrow(
          |                                     ^
      525 |         'Failed to delete personality'
      526 |       );
      527 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:524:37
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › exists › should return true if personality exists

    TypeError: repository.exists is not a function

      532 |       await repository.initialize();
      533 |       
    > 534 |       const result = await repository.exists(new PersonalityId('test-personality'));
          |                                       ^
      535 |       
      536 |       expect(result).toBe(true);
      537 |     });

      at exists (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:534:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › exists › should return false if personality does not exist

    TypeError: repository.exists is not a function

      540 |       await repository.initialize();
      541 |       
    > 542 |       const result = await repository.exists(new PersonalityId('non-existent'));
          |                                       ^
      543 |       
      544 |       expect(result).toBe(false);
      545 |     });

      at exists (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:542:39)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › createBackup › should create backup file with timestamp

    TypeError: repository.createBackup is not a function

      552 |       jest.spyOn(global, 'Date').mockImplementation(() => mockDate);
      553 |       
    > 554 |       const backupPath = await repository.createBackup();
          |                                           ^
      555 |       
      556 |       expect(backupPath).toBe(path.join('./test-data', 'personalities-backup-2024-01-15T10-30-45-123Z.json'));
      557 |       expect(fs.writeFile).toHaveBeenCalledWith(

      at createBackup (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:554:43)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › createBackup › should handle backup errors

    TypeError: repository.createBackup is not a function

      566 |       fs.writeFile.mockRejectedValue(new Error('No space left'));
      567 |       
    > 568 |       await expect(repository.createBackup()).rejects.toThrow(
          |                               ^
      569 |         'Failed to create backup: No space left'
      570 |       );
      571 |     });

      at createBackup (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:568:31)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › getStats › should return repository statistics

    TypeError: repository.getStats is not a function

      596 |       await repository.save(personality3);
      597 |       
    > 598 |       const stats = await repository.getStats();
          |                                      ^
      599 |       
      600 |       expect(stats).toEqual({
      601 |         totalPersonalities: 3,

      at getStats (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:598:38)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › getStats › should return zero stats for empty repository

    TypeError: repository.getStats is not a function

      611 |       await repository.initialize();
      612 |       
    > 613 |       const stats = await repository.getStats();
          |                                      ^
      614 |       
      615 |       expect(stats).toEqual({
      616 |         totalPersonalities: 0,

      at getStats (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:613:38)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should detect and migrate legacy format data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "personalities.legacy.json", "{
      \"test-personality\": {
        \"fullName\": \"test-personality\",
        \"addedBy\": \"123456789012345678\",
        \"displayName\": \"Test Display\",
        \"avatarUrl\": \"https://example.com/avatar.png\",
        \"errorMessage\": \"Test error message\",
        \"lastUpdated\": \"2025-06-18T17:45:21.858Z\"
      },
      \"another-personality\": {
        \"fullName\": \"another-personality\",
        \"addedBy\": \"987654321098765432\",
        \"addedAt\": \"2025-06-01T10:00:00.000Z\",
        \"displayName\": \"Another Display\"
      }
    }"

    Number of calls: 0

      665 |
      666 |       // Verify backup was created
    > 667 |       expect(fs.writeFile).toHaveBeenCalledWith(
          |                            ^
      668 |         expect.stringContaining('personalities.legacy.json'),
      669 |         JSON.stringify(legacyData, null, 2)
      670 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:667:28)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should handle missing aliases file gracefully

    TypeError: Cannot read properties of undefined (reading '1')

      725 |         call[0].endsWith('.tmp')
      726 |       );
    > 727 |       const persistedData = JSON.parse(writeCall[1]);
          |                                                 ^
      728 |       
      729 |       expect(persistedData.personalities['test-personality']).toBeDefined();
      730 |       expect(persistedData.aliases).toEqual({});

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:727:49
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › legacy data migration › should access migrated data correctly after migration

    TypeError: Cannot read properties of null (reading 'personalityId')

      777 |       const personality = await repository.findByName('test-personality');
      778 |       expect(personality).toBeDefined();
    > 779 |       expect(personality.personalityId.value).toBe('test-personality');
          |                          ^
      780 |       expect(personality.profile.displayName).toBe('Test Display');
      781 |
      782 |       // Test finding by alias

      at personalityId (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:779:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle aliases as strings

    TypeError: Cannot read properties of null (reading 'aliases')

      803 |       const retrieved = await repository.findById(new PersonalityId('test-id'));
      804 |       
    > 805 |       expect(retrieved.aliases).toHaveLength(2);
          |                        ^
      806 |       expect(retrieved.aliases[0].value).toBe('alias1');
      807 |       expect(retrieved.aliases[1].value).toBe('alias2');
      808 |     });

      at aliases (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:805:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle aliases as objects

    TypeError: Cannot read properties of null (reading 'aliases')

      829 |       const personality = await repository.findById(new PersonalityId('test-id'));
      830 |       
    > 831 |       expect(personality.aliases).toHaveLength(2);
          |                          ^
      832 |       expect(personality.aliases[0].value).toBe('alias1');
      833 |       expect(personality.aliases[1].value).toBe('alias2');
      834 |     });

      at aliases (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:831:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should handle missing profile

    TypeError: Cannot read properties of null (reading 'profile')

      856 |       
      857 |       // When created, personality gets a default profile
    > 858 |       expect(personality.profile).not.toBeNull();
          |                          ^
      859 |       // Check that the profile has default values
      860 |       expect(personality.profile.name).toBe('test-id');
      861 |       expect(personality.profile.prompt).toBe('You are test-id');

      at profile (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:858:26)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › hydration behavior › should mark events as committed

    TypeError: Cannot read properties of null (reading 'getUncommittedEvents')

      877 |       const retrieved = await repository.findById(new PersonalityId('test-id'));
      878 |       
    > 879 |       expect(retrieved.getUncommittedEvents()).toHaveLength(0);
          |                        ^
      880 |     });
      881 |   });
      882 |   

      at getUncommittedEvents (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:879:24)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should write to temp file then rename

    expect(received).not.toBeNull()

    Received: null

      899 |       // Save operation should trigger persist
      900 |       const persistedPersonality = await repository.findById(new PersonalityId('new'));
    > 901 |       expect(persistedPersonality).not.toBeNull();
          |                                        ^
      902 |       expect(fs.writeFile).toHaveBeenCalledWith(
      903 |         tempPath,
      904 |         expect.any(String),

      at toBeNull (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:901:40)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should format JSON with indentation

    TypeError: Cannot read properties of undefined (reading '1')

      921 |       await repository.save(personality);
      922 |       
    > 923 |       const writtenData = fs.writeFile.mock.calls[0][1];
          |                                                     ^
      924 |       expect(writtenData).toContain('  '); // Check for indentation
      925 |       expect(() => JSON.parse(writtenData)).not.toThrow();
      926 |     });

      at tests/unit/adapters/persistence/FilePersonalityRepository.test.js:923:53
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

  ● FilePersonalityRepository › persistence behavior › should throw specific error on failure

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: true

      938 |         AIModel.createDefault()
      939 |       );
    > 940 |       await expect(repository.save(personality)).rejects.toThrow('Failed to save personality');
          |             ^
      941 |     });
      942 |   });
      943 | });

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:940:13)
      at Generator.call (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/persistence/FilePersonalityRepository.test.js:2:1)

FAIL tests/unit/application/commands/authentication/AuthCommand.test.js
  ● AuthCommand › help display › should show help when no action is provided

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:80:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › help display › should show admin commands for administrators

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:102:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › help display › should show admin commands for bot owner

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:121:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › proxy system handling › should reject webhook commands from proxy systems

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:143:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should send auth URL in DM when in DM channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:161:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should send DM when in public channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:183:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should handle DM failure gracefully

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:211:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth start › should handle auth URL generation failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:227:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should reject code submission in public channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:244:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should process code in DM channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:262:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle spoiler-wrapped codes

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:282:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle missing code

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:290:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle invalid code

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:307:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth code › should handle token storage failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:324:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show status when not authenticated

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:342:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show status when authenticated

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:359:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should show token details when available

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:387:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth status › should warn about expiring tokens

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:416:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth revoke › should revoke token successfully

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:438:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth revoke › should handle revoke failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:456:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should require admin permission

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:476:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should allow cleanup for administrators

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:494:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should allow cleanup for bot owner

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:512:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › auth cleanup › should handle cleanup errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:530:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › error handling › should handle unknown subcommands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:553:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › error handling › should handle unexpected errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:569:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › options support › should support action option for slash commands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:591:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

  ● AuthCommand › options support › should support code option for slash commands

    TypeError: Cannot read properties of undefined (reading 'auth')

      56 |   return async function execute(context) {
      57 |     const { args, options, dependencies, isWebhook } = context;
    > 58 |     const auth = dependencies.auth;
         |                               ^
      59 |     const webhookUserTracker = dependencies.webhookUserTracker;
      60 |
      61 |     logger.info(`[AuthCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/AuthCommand.js:58:31)
      at Generator.call (src/application/commands/authentication/AuthCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/AuthCommand.js:2:1)
      at _next (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/AuthCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/AuthCommand.js:56:32)
      at execute (tests/unit/application/commands/authentication/AuthCommand.test.js:600:25)
      at Generator.call (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/AuthCommand.test.js:2:1)

FAIL tests/unit/handlers/dmHandler.test.js
  ● dmHandler › handleDmReply › should handle errors when personality interaction fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should return false when no personality is found after all lookup attempts

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle replies to personality messages in DMs

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle replies to continued messages without personality prefix

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle personality names with server suffixes

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by exact display name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by display name prefix

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by first part of full name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should try multiple personality lookup methods

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle replies to non-bot messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle non-DM messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle messages from bots

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should not handle messages without references

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should find personality from earlier message in multi-chunk scenario

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by standardized username

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should match personality by exact full name

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should handle errors when looking up previous messages for multi-chunk

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDmReply › should skip personalities with null or undefined fullName

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle errors when sending verification prompt

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle errors when sending personality summon prompt

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should use personality from alias when direct lookup fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should handle direct messages with active personalities

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should prompt user to verify if not verified

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should bypass verification for trusted proxy systems

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should find personality by global alias when user-specific alias fails

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should prompt user to summon a personality if no active personality

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should not handle non-DM messages

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should not handle messages from bots

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

  ● dmHandler › handleDirectMessage › should return false when personality exists but both lookups return null

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      83 |     getPersonalityByAlias.mockReturnValue(null);
      84 |     listPersonalitiesForUser.mockReturnValue([mockPersonality]);
    > 85 |     getStandardizedUsername.mockImplementation(personality => personality.displayName);
         |                             ^
      86 |   });
      87 |   
      88 |   describe('handleDmReply', () => {

      at Object.mockImplementation (tests/unit/handlers/dmHandler.test.js:85:29)

FAIL tests/unit/adapters/ai/HttpAIServiceAdapter.test.js
  ● HttpAIServiceAdapter › constructor › should initialize with provided config

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://api.example.com"
    Received: undefined

      53 |   describe('constructor', () => {
      54 |     it('should initialize with provided config', () => {
    > 55 |       expect(adapter.baseUrl).toBe('https://api.example.com');
         |                               ^
      56 |       expect(adapter.headers).toEqual({ 'X-API-Key': 'test-key' });
      57 |       expect(adapter.timeout).toBe(5000);
      58 |       expect(adapter.maxRetries).toBe(2);

      at Object.toBe (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:55:31)

  ● HttpAIServiceAdapter › constructor › should throw error when no base URL provided

    expect(received).toThrow(expected)

    Expected substring: "AI service base URL is required"

    Received function did not throw

      64 |       delete process.env.SERVICE_API_BASE_URL;
      65 |       
    > 66 |       expect(() => new HttpAIServiceAdapter()).toThrow('AI service base URL is required');
         |                                                ^
      67 |     });
      68 |     
      69 |     it('should use environment variable for base URL', () => {

      at Object.toThrow (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:66:48)

  ● HttpAIServiceAdapter › constructor › should use environment variable for base URL

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://default.example.com"
    Received: undefined

      72 |       
      73 |       const defaultAdapter = new HttpAIServiceAdapter();
    > 74 |       expect(defaultAdapter.baseUrl).toBe('https://default.example.com');
         |                                      ^
      75 |       expect(defaultAdapter.timeout).toBe(30000);
      76 |       expect(defaultAdapter.maxRetries).toBe(3);
      77 |       expect(defaultAdapter.retryDelay).toBe(1000);

      at Object.toBe (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:74:38)

  ● HttpAIServiceAdapter › checkHealth › should return true when health check succeeds

    TypeError: adapter.checkHealth is not a function

      90 |       });
      91 |
    > 92 |       const result = await adapter.checkHealth();
         |                                    ^
      93 |       
      94 |       expect(result).toBe(true);
      95 |       expect(mockFetch).toHaveBeenCalledWith(

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:92:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › checkHealth › should return false when health check fails

    TypeError: adapter.checkHealth is not a function

      105 |       mockFetch.mockRejectedValue(new Error('Network error'));
      106 |
    > 107 |       const result = await adapter.checkHealth();
          |                                    ^
      108 |       
      109 |       expect(result).toBe(false);
      110 |       expect(logger.warn).toHaveBeenCalled();

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:107:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › checkHealth › should handle timeout with AbortController

    TypeError: adapter.checkHealth is not a function

      117 |       mockFetch.mockRejectedValue(abortError);
      118 |       
    > 119 |       const result = await adapter.checkHealth();
          |                                    ^
      120 |       
      121 |       expect(result).toBe(false);
      122 |       expect(logger.warn).toHaveBeenCalledWith(

      at checkHealth (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:119:36)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should successfully generate content

    expect(received).toBeInstanceOf(expected)

    Expected constructor: AIContent
    Received constructor: Object

      164 |       const result = await adapter.sendRequest(mockRequest);
      165 |       
    > 166 |       expect(result).toBeInstanceOf(AIContent);
          |                      ^
      167 |       expect(result.getText()).toBe('Hello from AI!');
      168 |       expect(mockFetch).toHaveBeenCalledWith(
      169 |         'https://api.example.com/v1/chat/completions',

      at toBeInstanceOf (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:166:22)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should validate AIRequest input

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      180 |
      181 |     it('should validate AIRequest input', async () => {
    > 182 |       await expect(adapter.sendRequest('not-a-request'))
          |             ^
      183 |         .rejects.toThrow('Request must be an instance of AIRequest');
      184 |       
      185 |       await expect(adapter.sendRequest(null))

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:182:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should handle network errors with retry

    expect(received).toBeInstanceOf(expected)

    Expected constructor: AIContent
    Received constructor: Object

      203 |       const result = await resultPromise;
      204 |       
    > 205 |       expect(result).toBeInstanceOf(AIContent);
          |                      ^
      206 |       expect(result.getText()).toBe('Success after retry');
      207 |       
      208 |       // Verify retry was attempted

      at toBeInstanceOf (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:205:22)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › sendRequest › should not retry on client errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      221 |       });
      222 |       
    > 223 |       await expect(adapter.sendRequest(mockRequest))
          |             ^
      224 |         .rejects.toThrow('Invalid request to AI service');
      225 |       
      226 |       // Should only call once (no retry)

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:223:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:2:1)

  ● HttpAIServiceAdapter › getStats › should return adapter statistics

    TypeError: adapter.getStats is not a function

      236 |       adapter._lastHealthCheck = true;
      237 |       
    > 238 |       const stats = adapter.getStats();
          |                             ^
      239 |       
      240 |       expect(stats).toEqual({
      241 |         baseUrl: 'https://api.example.com',

      at Object.getStats (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:238:29)

  ● HttpAIServiceAdapter › error transformation › should transform 401 errors

    TypeError: adapter._transformError is not a function

      255 |       error.response = { status: 401 };
      256 |       
    > 257 |       const transformed = adapter._transformError(error);
          |                                   ^
      258 |       expect(transformed.message).toBe('AI service authentication failed');
      259 |     });
      260 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:257:35)

  ● HttpAIServiceAdapter › error transformation › should transform 429 errors

    TypeError: adapter._transformError is not a function

      263 |       error.response = { status: 429 };
      264 |       
    > 265 |       const transformed = adapter._transformError(error);
          |                                   ^
      266 |       expect(transformed.message).toBe('AI service rate limit exceeded');
      267 |     });
      268 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:265:35)

  ● HttpAIServiceAdapter › error transformation › should transform timeout errors

    TypeError: adapter._transformError is not a function

      271 |       error.name = 'AbortError';
      272 |       
    > 273 |       const transformed = adapter._transformError(error);
          |                                   ^
      274 |       expect(transformed.message).toBe('AI service request timed out');
      275 |     });
      276 |

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:273:35)

  ● HttpAIServiceAdapter › error transformation › should return original error if cannot transform

    TypeError: adapter._transformError is not a function

      278 |       const error = new Error('Unknown error');
      279 |       
    > 280 |       const transformed = adapter._transformError(error);
          |                                   ^
      281 |       expect(transformed).toBe(error);
      282 |     });
      283 |   });

      at Object._transformError (tests/unit/adapters/ai/HttpAIServiceAdapter.test.js:280:35)

FAIL tests/unit/application/commands/personality/ListCommand.test.js
  ● ListCommand › execute › should list personalities successfully with embed

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"author": {"icon_url": "https://example.com/user.png", "name": "TestUser"}, "color": 48340, "description": "You have added 3 personalities.", "fields": [{"inline": false, "name": "1. First Personality", "value": "Name: `personality1`
    Aliases: p1, first"}, {"inline": false, "name": "2. Second Personality", "value": "Name: `personality2`
    Aliases: None"}, {"inline": false, "name": "3. personality3", "value": "Name: `personality3`
    Aliases: p3"}], "footer": {"icon_url": "https://example.com/user.png", "text": "Page 1 of 1"}, "title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      100 |       expect(mockPersonalityService.listPersonalitiesByOwner).toHaveBeenCalledWith('123456789');
      101 |       
    > 102 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      103 |         expect.objectContaining({
      104 |           title: 'Your Personalities (Page 1/1)',
      105 |           description: 'You have added 3 personalities.',

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:102:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should list personalities successfully without embed support

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "**Your Personalities (Page 1/1)**
    You have added 3 personalities.·
    **1. First Personality**
       Name: `personality1`
       Aliases: p1, first·
    **2. Second Personality**
       Name: `personality2`
       Aliases: None·
    **3. personality3**
       Name: `personality3`
       Aliases: p3·
    "
    Received: {"embeds": [{"color": 2201331, "description": "Showing 3 of 3 personalities", "fields": [{"inline": false, "name": "1. First Personality", "value": "**Name:** `personality1`
    **Aliases:** p1, first"}, {"inline": false, "name": "2. Second Personality", "value": "**Name:** `personality2`
    **Aliases:** None"}, {"inline": false, "name": "3. personality3", "value": "**Name:** `personality3`
    **Aliases:** p3"}], "footer": {"text": "Page 1 of 1"}, "timestamp": "2025-06-19T07:39:15.312Z", "title": "�� Your Personalities"}]}

    Number of calls: 1

      139 |       await command.execute(mockContext);
      140 |       
    > 141 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      142 |         '**Your Personalities (Page 1/1)**\n' +
      143 |         'You have added 3 personalities.\n\n' +
      144 |         '**1. First Personality**\n' +

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:141:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle pagination

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": StringContaining "You have added 15 personalities.", "fields": ArrayContaining [ObjectContaining {"name": "11. Personality 11"}, ObjectContaining {"name": "12. Personality 12"}, ObjectContaining {"name": "13. Personality 13"}, ObjectContaining {"name": "14. Personality 14"}, ObjectContaining {"name": "15. Personality 15"}], "footer": ObjectContaining {"text": "Page 2 of 2"}, "title": "Your Personalities (Page 2/2)"}

    Number of calls: 0

      169 |       await command.execute(mockContext);
      170 |       
    > 171 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      172 |         expect.objectContaining({
      173 |           title: 'Your Personalities (Page 2/2)',
      174 |           description: expect.stringContaining('You have added 15 personalities.'),

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:171:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle no personalities

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "You haven't added any personalities yet. Use `!tz add <personality-name>` to add one."
    Received: {"embeds": [{"color": 16750592, "description": "You haven't added any personalities.", "fields": [{"inline": false, "name": "Get Started", "value": "Use `!tz add <personality-name>` to create your first personality!"}, {"inline": false, "name": "Example", "value": "`!tz add Claude \"You are Claude, a helpful AI assistant\"`"}], "footer": {"text": "Personalities allow you to create custom AI assistants"}, "title": "�� No Personalities Yet"}]}

    Number of calls: 1

      199 |       await command.execute(mockContext);
      200 |       
    > 201 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      202 |         "You haven't added any personalities yet. Use `!tz add <personality-name>` to add one."
      203 |       );
      204 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:201:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle invalid page number

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Invalid page number. Please specify a page between 1 and 1."
    Received: {"embeds": [{"color": 16007990, "description": "The page number you specified is out of range.", "fields": [{"inline": true, "name": "Valid Range", "value": "Pages 1 to 1"}, {"inline": true, "name": "You Entered", "value": "5"}, {"inline": true, "name": "Total Personalities", "value": "3"}], "title": "❌ Invalid Page Number"}]}

    Number of calls: 1

      209 |       await command.execute(mockContext);
      210 |       
    > 211 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      212 |         'Invalid page number. Please specify a page between 1 and 1.'
      213 |       );
      214 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:211:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle non-numeric page argument

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      220 |       
      221 |       // Should default to page 1
    > 222 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      223 |         expect.objectContaining({
      224 |           title: 'Your Personalities (Page 1/1)'
      225 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:222:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should show pagination hint for multiple pages

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": StringContaining "Use `!tz list <page>` to view other pages."}

    Number of calls: 0

      237 |       await command.execute(mockContext);
      238 |       
    > 239 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      240 |         expect.objectContaining({
      241 |           description: expect.stringContaining('Use `!tz list <page>` to view other pages.')
      242 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:239:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while listing personalities. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while listing personalities.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Use the command without a page number
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318755344"}, "timestamp": "2025-06-19T07:39:15.344Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      249 |       await command.execute(mockContext);
      250 |       
    > 251 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      252 |         '❌ An error occurred while listing personalities. ' +
      253 |         'Please try again later or contact support if the issue persists.'
      254 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:251:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle service exceptions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "❌ An error occurred while listing personalities. Please try again later or contact support if the issue persists."
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while listing personalities.", "fields": [{"inline": false, "name": "What happened", "value": "Service error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Use the command without a page number
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318755349"}, "timestamp": "2025-06-19T07:39:15.349Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      260 |       await command.execute(mockContext);
      261 |       
    > 262 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      263 |         '❌ An error occurred while listing personalities. ' +
      264 |         'Please try again later or contact support if the issue persists.'
      265 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:262:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle single personality correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"description": "You have added 1 personality."}

    Number of calls: 0

      276 |       await command.execute(mockContext);
      277 |       
    > 278 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      279 |         expect.objectContaining({
      280 |           description: 'You have added 1 personality.'
      281 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:278:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should use default bot prefix when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "`!tz add"
    Received: {"embeds": [{"color": 16750592, "description": "You haven't added any personalities.", "fields": [{"inline": false, "name": "Get Started", "value": "Use `!tz add <personality-name>` to create your first personality!"}, {"inline": false, "name": "Example", "value": "`!tz add Claude \"You are Claude, a helpful AI assistant\"`"}], "footer": {"text": "Personalities allow you to create custom AI assistants"}, "title": "�� No Personalities Yet"}]}

    Number of calls: 1

      289 |       await command.execute(mockContext);
      290 |       
    > 291 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      292 |         expect.stringContaining('`!tz add')
      293 |       );
      294 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:291:35)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should handle null page in slash command

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      301 |       
      302 |       // Should default to page 1
    > 303 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      304 |         expect.objectContaining({
      305 |           title: 'Your Personalities (Page 1/1)'
      306 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:303:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

  ● ListCommand › execute › should parse page number as integer

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"title": "Your Personalities (Page 1/1)"}

    Number of calls: 0

      314 |       
      315 |       // Should parse to 1
    > 316 |       expect(mockContext.respondWithEmbed).toHaveBeenCalledWith(
          |                                            ^
      317 |         expect.objectContaining({
      318 |           title: 'Your Personalities (Page 1/1)'
      319 |         })

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/ListCommand.test.js:316:44)
      at Generator.call (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/ListCommand.test.js:2:1)

FAIL tests/unit/application/commands/authentication/VerifyCommand.test.js
  ● VerifyCommand › DM channel handling › should explain verification requirements when run in DM

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:79:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › already verified users › should inform already verified users

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:97:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel verification › should verify user in NSFW channel

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:116:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel verification › should handle verification storage failure

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:134:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should verify user with access to other NSFW channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:175:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should deny verification when no NSFW channels accessible

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:207:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should handle missing guild information

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:224:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › NSFW channel access check › should handle channel permission check errors

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:249:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › storage verification › should handle verification storage error in NSFW channel list

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:277:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › error handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:297:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › error handling › should handle missing original message

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:314:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › channel accessibility › should only count channels user can view

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:346:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

  ● VerifyCommand › channel accessibility › should only check text-based channels

    TypeError: Cannot read properties of undefined (reading 'auth')

      30 |   return async function execute(context) {
      31 |     const { dependencies } = context;
    > 32 |     const auth = dependencies.auth;
         |                               ^
      33 |     const channelUtils = dependencies.channelUtils;
      34 |
      35 |     logger.info(`[VerifyCommand] Executing for user ${context.userId}`);

      at auth (src/application/commands/authentication/VerifyCommand.js:32:31)
      at Generator.call (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/authentication/VerifyCommand.js:2:1)
      at _next (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/authentication/VerifyCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/authentication/VerifyCommand.js:30:32)
      at execute (tests/unit/application/commands/authentication/VerifyCommand.test.js:389:27)
      at Generator.call (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at _next (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/authentication/VerifyCommand.test.js:2:1)

FAIL tests/unit/application/commands/personality/InfoCommand.test.js
  ● InfoCommand › execute › should display personality info successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"color": 2201331, "description": StringContaining "Test Personality", "fields": ArrayContaining [ObjectContaining {"name": "Full Name", "value": "testpersonality"}, ObjectContaining {"name": "Display Name", "value": "Test Personality"}, ObjectContaining {"name": "Aliases", "value": "test, testy"}, ObjectContaining {"name": "Created By", "value": "<@123456789>"}], "thumbnail": {"url": "https://example.com/avatar.png"}, "title": "Personality Info"}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      76 |       expect(mockPersonalityService.getPersonality).toHaveBeenCalledWith('testpersonality');
      77 |       
    > 78 |       expect(mockContext.respond).toHaveBeenCalledWith(
         |                                   ^
      79 |         expect.objectContaining({
      80 |           embeds: expect.arrayContaining([
      81 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:78:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should show new system indicator when feature flag enabled

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"fields": ArrayContaining [ObjectContaining {"name": "System", "value": "�� Using new DDD system"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      101 |       await command.execute(mockContext);
      102 |       
    > 103 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      104 |         expect.objectContaining({
      105 |           embeds: expect.arrayContaining([
      106 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:103:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should handle personality without aliases

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"fields": ArrayContaining [ObjectContaining {"name": "Aliases", "value": "None set"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      157 |       await command.execute(mockContext);
      158 |       
    > 159 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      160 |         expect.objectContaining({
      161 |           embeds: expect.arrayContaining([
      162 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:159:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

  ● InfoCommand › execute › should handle personality without display name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"embeds": ArrayContaining [ObjectContaining {"description": StringContaining "nodisplay", "fields": ArrayContaining [ObjectContaining {"name": "Display Name", "value": "Not set"}]}]}
    Received: "❌ An error occurred while getting personality info. Please try again later or contact support if the issue persists."

    Number of calls: 1

      180 |       await command.execute(mockContext);
      181 |       
    > 182 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      183 |         expect.objectContaining({
      184 |           embeds: expect.arrayContaining([
      185 |             expect.objectContaining({

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/InfoCommand.test.js:182:35)
      at Generator.call (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/InfoCommand.test.js:2:1)

FAIL tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js
  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should check for blackout before processing

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      80 |       mockDeduplicator.isInBlackout.mockReturnValue(true);
      81 |       
    > 82 |       await expect(adapter.sendRequest(request))
         |             ^
      83 |         .rejects.toThrow('Request blocked due to recent errors');
      84 |       
      85 |       expect(mockDeduplicator.isInBlackout).toHaveBeenCalledWith('TestBot', '123456789012345678');

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:82:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should return cached promise for duplicate request

    TypeError: result.getText is not a function

      93 |       const result = await adapter.sendRequest(request);
      94 |       
    > 95 |       expect(result.getText()).toBe('Cached response');
         |                     ^
      96 |       expect(mockDeduplicator.getPendingRequest).toHaveBeenCalled();
      97 |       expect(fetch).not.toHaveBeenCalled();
      98 |       expect(logger.info).toHaveBeenCalledWith(

      at getText (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:95:21)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should track new requests to prevent duplicates

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Anything, Any<Promise>

    Number of calls: 0

      104 |       await adapter.sendRequest(request);
      105 |       
    > 106 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalledWith(
          |                                                    ^
      107 |         expect.anything(),
      108 |         expect.any(Promise)
      109 |       );

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:106:52)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should add to blackout on rate limit error

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      119 |       });
      120 |       
    > 121 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      122 |       
      123 |       // The promise catch handler should have been called synchronously
      124 |       // since we're using mockDeduplicator.trackPendingRequest

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:121:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should add to blackout on service error

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      148 |       });
      149 |       
    > 150 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      151 |       
      152 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalled();
      153 |       const trackedPromise = mockDeduplicator.trackPendingRequest.mock.calls[0][1];

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:150:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should not add to blackout on client errors

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      171 |       });
      172 |       
    > 173 |       await expect(adapter.sendRequest(request)).rejects.toThrow();
          |             ^
      174 |       
      175 |       expect(mockDeduplicator.trackPendingRequest).toHaveBeenCalled();
      176 |       const trackedPromise = mockDeduplicator.trackPendingRequest.mock.calls[0][1];

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:173:13)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should handle missing personality gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"channelId": "987654321098765432", "content": "Hello AI", "personalityName": "default", "userId": "123456789012345678"}

    Number of calls: 0

      190 |       await adapter.sendRequest(request);
      191 |       
    > 192 |       expect(mockDeduplicator.createSignature).toHaveBeenCalledWith({
          |                                                ^
      193 |         personalityName: 'default',
      194 |         userId: '123456789012345678',
      195 |         channelId: '987654321098765432',

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:192:48)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › deduplication behavior › should handle missing user ID gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"channelId": "987654321098765432", "content": "Hello AI", "personalityName": "TestBot", "userId": "system"}

    Number of calls: 0

      203 |       await adapter.sendRequest(request);
      204 |       
    > 205 |       expect(mockDeduplicator.createSignature).toHaveBeenCalledWith({
          |                                                ^
      206 |         personalityName: 'TestBot',
      207 |         userId: 'system',
      208 |         channelId: '987654321098765432',

      at toHaveBeenCalledWith (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:205:48)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

  ● HttpAIServiceAdapter - Deduplication › statistics › should include deduplication stats

    TypeError: adapter.getStats is not a function

      220 |       });
      221 |       
    > 222 |       const stats = adapter.getStats();
          |                             ^
      223 |       
      224 |       expect(stats.deduplication).toEqual({
      225 |         pendingRequests: 5,

      at Object.getStats (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:222:29)

  ● HttpAIServiceAdapter - Deduplication › cleanup › should stop deduplicator on cleanup

    TypeError: adapter.cleanup is not a function

      232 |   describe('cleanup', () => {
      233 |     it('should stop deduplicator on cleanup', async () => {
    > 234 |       await adapter.cleanup();
          |                     ^
      235 |       
      236 |       expect(mockDeduplicator.stop).toHaveBeenCalled();
      237 |       expect(logger.info).toHaveBeenCalledWith('[HttpAIServiceAdapter] Cleaning up resources');

      at cleanup (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:234:21)
      at Generator.call (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at asyncGeneratorStep (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at _next (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)
      at Object.<anonymous> (tests/unit/adapters/ai/HttpAIServiceAdapter.dedup.test.js:2:1)

FAIL tests/unit/application/commands/conversation/ActivateCommand.test.js
  ● ActivateCommand › execute › should activate a personality by name

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:89:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should activate a personality by alias

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:124:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle multi-word personality names

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:145:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should use options.personality if provided

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:165:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject in DM channels

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:176:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject without Manage Messages permission

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:191:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should reject in non-NSFW channels

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:207:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle missing personality name

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:223:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle non-existent personality

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:241:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle personality service errors

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:258:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle activation errors

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:279:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:299:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should not include thumbnail if profileUrl is missing

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:322:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

  ● ActivateCommand › execute › should include thumbnail if profileUrl exists

    TypeError: Cannot read properties of undefined (reading 'personalityApplicationService')

      40 |   return async function execute(context) {
      41 |     const { args, options } = context;
    > 42 |     const personalityService = context.dependencies.personalityApplicationService;
         |                                                     ^
      43 |     const conversationManager = context.dependencies.conversationManager;
      44 |
      45 |     logger.info(`[ActivateCommand] Executing for channel ${context.getChannelId()}`);

      at personalityApplicationService (src/application/commands/conversation/ActivateCommand.js:42:53)
      at Generator.call (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/ActivateCommand.js:2:1)
      at _next (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/ActivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/ActivateCommand.js:40:32)
      at execute (tests/unit/application/commands/conversation/ActivateCommand.test.js:340:21)
      at Generator.call (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/ActivateCommand.test.js:2:1)

FAIL tests/unit/domain/ai/AIRequestDeduplicator.test.js
  ● AIRequestDeduplicator › checkDuplicate › should return existing promise for duplicate requests

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 95553, Symbol(trigger_async_id_symbol): 95540}
    Received: "response"

      72 |       
      73 |       const result = await deduplicator.checkDuplicate('TestBot', 'Hello');
    > 74 |       expect(result).toBe(promise);
         |                      ^
      75 |     });
      76 |     
      77 |     it('should throw error for requests in blackout period', async () => {

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:74:22)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › checkDuplicate › should be case-insensitive for personality names

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 96101, Symbol(trigger_async_id_symbol): 96088}
    Received: "response"

      88 |       
      89 |       const result = await deduplicator.checkDuplicate('testbot', 'Hello');
    > 90 |       expect(result).toBe(promise);
         |                      ^
      91 |     });
      92 |     
      93 |     it('should consider context in deduplication', async () => {

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:90:22)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › checkDuplicate › should consider context in deduplication

    expect(received).toBe(expected) // Object.is equality

    Expected: {Symbol(async_id_symbol): 96378, Symbol(trigger_async_id_symbol): 96365}
    Received: "response1"

      101 |       const result2 = await deduplicator.checkDuplicate('TestBot', 'Hello', { userAuth: 'user2' });
      102 |       
    > 103 |       expect(result1).toBe(promise1);
          |                       ^
      104 |       expect(result2).toBe(promise2);
      105 |     });
      106 |   });

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:103:23)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

  ● AIRequestDeduplicator › registerPending › should add to blackout on promise rejection

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      142 |       await Promise.resolve();
      143 |       
    > 144 |       expect(deduplicator.errorBlackouts.size).toBe(1);
          |                                                ^
      145 |     });
      146 |   });
      147 |   

      at toBe (tests/unit/domain/ai/AIRequestDeduplicator.test.js:144:48)
      at Generator.call (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)
      at asyncGeneratorStep (tests/unit/domain/ai/AIRequestDeduplicator.test.js:2:1)

FAIL tests/unit/application/commands/personality/AddCommand.test.js
  ● AddCommand › text command execution › should show usage when no arguments provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Usage: `!tz add <name> [alias] [prompt]`",
    + {"embeds": [{"color": 2201331, "description": "Create a new AI personality for your Discord server.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz add <name> [alias] [prompt]`"}, {"inline": false, "name": "Examples", "value": "• `!tz add Claude` - Creates Claude with default prompt
    • `!tz add Claude claude-alias` - Creates Claude with an alias
    • `!tz add Claude \"You are Claude, a helpful AI assistant\"` - Custom prompt
    • `!tz add Claude claude-alias \"You are Claude, a helpful AI assistant\"` - Alias + prompt"}, {"inline": false, "name": "Parameters", "value": "• **name** (required): The personality's name
    • **alias** (optional): A shortcut name
    • **prompt** (optional): Custom personality instructions"}], "footer": {"text": "Pro tip: Aliases make it easier to mention personalities"}, "title": "How to Add a Personality"}]},
      {},

    Number of calls: 1

      111 |       await command.execute(mockContext);
      112 |
    > 113 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      114 |         expect.stringContaining('Usage: `!tz add <name> [alias] [prompt]`'),
      115 |         {}
      116 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:113:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with name only

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "✅ Successfully created personality **TestBot**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.188Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      132 |         aliases: []
      133 |       });
    > 134 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      135 |         expect.stringContaining('✅ Successfully created personality **TestBot**'),
      136 |         {}
      137 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:134:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with custom prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Prompt: \"You are a helpful assistant\"",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **Claude** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": false, "name": "Prompt", "value": "You are a helpful assistant"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@Claude** in a channel to start chatting
    • Use `!tz alias Claude <new-alias>` to add more aliases
    • Use `!tz info Claude` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.192Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      152 |         aliases: []
      153 |       });
    > 154 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      155 |         expect.stringContaining('Prompt: "You are a helpful assistant"'),
      156 |         {}
      157 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:154:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with alias only

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.201Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      201 |         aliases: ['tb']
      202 |       });
    > 203 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      204 |         expect.stringContaining('Alias: **tb**'),
      205 |         {}
      206 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:203:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should create personality with alias and prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are a test bot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.203Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      224 |         aliases: ['tb']
      225 |       });
    > 226 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      227 |         expect.stringContaining('Alias: **tb**'),
      228 |         {}
      229 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:226:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › text command execution › should validate alias format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Aliases can only contain letters, numbers, underscores, and hyphens.",
    + {"embeds": [{"color": 16007990, "description": "Aliases can only contain letters, numbers, underscores, and hyphens.", "fields": [{"inline": false, "name": "Valid characters", "value": "• Letters (a-z, A-Z)
    • Numbers (0-9)
    • Underscores (_)
    • Hyphens (-)"}, {"inline": false, "name": "Examples", "value": "✅ `claude-ai`
    ✅ `helper_bot`
    ✅ `AI2024`
    ❌ `claude.ai`
    ❌ `helper bot`
    ❌ `AI@2024`"}], "title": "❌ Invalid Alias Format"}]},
      {},

    Number of calls: 1

      254 |       await command.execute(mockContext);
      255 |
    > 256 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      257 |         'Aliases can only contain letters, numbers, underscores, and hyphens.',
      258 |         {}
      259 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:256:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › slash command execution › should create personality with alias option

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Alias: **tb**",
    + {"embeds": [{"color": 5025616, "description": "Your new personality **TestBot** is ready to use!", "fields": [{"inline": true, "name": "Name", "value": "TestBot"}, {"inline": true, "name": "Display Name", "value": "TestBot"}, {"inline": true, "name": "Alias", "value": "tb"}, {"inline": false, "name": "Prompt", "value": "You are TestBot"}, {"inline": true, "name": "Model", "value": "/default"}, {"inline": true, "name": "Max Words", "value": "1000"}, {"inline": true, "name": "Owner", "value": "<@user123>"}, {"inline": false, "name": "Next Steps", "value": "• Mention **@TestBot** in a channel to start chatting
    • Use `!tz alias TestBot <new-alias>` to add more aliases
    • Use `!tz info TestBot` to view personality details"}], "footer": {"text": "Tip: Personalities can have multiple aliases for easier access"}, "timestamp": "2025-06-19T07:39:16.220Z", "title": "✅ Personality Created Successfully!"}]},
      {},

    Number of calls: 1

      327 |         aliases: ['tb']
      328 |       });
    > 329 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      330 |         expect.stringContaining('Alias: **tb**'),
      331 |         {}
      332 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:329:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › validation › should reject short names

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Personality name must be at least 2 characters long.",
    + {"embeds": [{"color": 16007990, "description": "Personality name must be at least 2 characters long.", "fields": [{"inline": false, "name": "Requirements", "value": "• Minimum 2 characters
    • Maximum 50 characters
    • Can include letters, numbers, spaces"}], "title": "❌ Invalid Name"}]},
      {},

    Number of calls: 1

      341 |       await command.execute(mockContext);
      342 |
    > 343 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      344 |         'Personality name must be at least 2 characters long.',
      345 |         {}
      346 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:343:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › validation › should reject long names

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "Personality name must be 50 characters or less.",
    + {"embeds": [{"color": 16007990, "description": "Personality name must be 50 characters or less.", "fields": [{"inline": true, "name": "Current length", "value": "51 characters"}, {"inline": true, "name": "Maximum allowed", "value": "50 characters"}], "title": "❌ Name Too Long"}]},
      {},

    Number of calls: 1

      354 |       await command.execute(mockContext);
      355 |
    > 356 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      357 |         'Personality name must be 50 characters or less.',
      358 |         {}
      359 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:356:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle service not available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred while creating the personality",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756229"}, "timestamp": "2025-06-19T07:39:16.229Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      369 |       await command.execute(mockContext);
      370 |
    > 371 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      372 |         expect.stringContaining('An error occurred while creating the personality'),
      373 |         {}
      374 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:371:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle already exists error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "already exists",
    + {"embeds": [{"color": 16007990, "description": "A personality named **TestBot** already exists.", "fields": [{"inline": false, "name": "What to do", "value": "• Choose a different name for your personality
    • Use `!tz remove TestBot` to delete the existing one first
    • Use `!tz info TestBot` to see who owns it"}], "footer": {"text": "Each personality must have a unique name"}, "title": "❌ Personality Already Exists"}]},
      {},

    Number of calls: 1

      387 |       await command.execute(mockContext);
      388 |
    > 389 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      390 |         expect.stringContaining('already exists'),
      391 |         {}
      392 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:389:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle authentication error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "Authentication failed",
    + {"embeds": [{"color": 16750592, "description": "You need to authenticate before creating personalities.", "fields": [{"inline": false, "name": "How to authenticate", "value": "1. Use `!tz auth` to start authentication
    2. Follow the instructions in the DM
    3. Try creating your personality again"}], "footer": {"text": "Authentication ensures secure personality management"}, "title": "❌ Authentication Required"}]},
      {},

    Number of calls: 1

      401 |       await command.execute(mockContext);
      402 |
    > 403 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      404 |         expect.stringContaining('Authentication failed'),
      405 |         {}
      406 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:403:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle service failure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Service unavailable"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756236"}, "timestamp": "2025-06-19T07:39:16.236Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      415 |       await command.execute(mockContext);
      416 |
    > 417 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      418 |         expect.stringContaining('An error occurred'),
      419 |         {}
      420 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:417:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

  ● AddCommand › error handling › should handle generic errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "An error occurred while creating the personality",
    + {"embeds": [{"color": 16007990, "description": "An error occurred while creating the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Unknown error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check your command syntax
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756238"}, "timestamp": "2025-06-19T07:39:16.238Z", "title": "❌ Something Went Wrong"}]},
      {},

    Number of calls: 1

      433 |       await command.execute(mockContext);
      434 |
    > 435 |       expect(mockContext.reply).toHaveBeenCalledWith(
          |                                 ^
      436 |         expect.stringContaining('An error occurred while creating the personality'),
      437 |         {}
      438 |       );

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/AddCommand.test.js:435:33)
      at Generator.call (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/AddCommand.test.js:2:1)

FAIL tests/unit/application/commands/personality/RemoveCommand.test.js
  ● RemoveCommand › execute › should remove personality successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": StringContaining "✅ **Test Personality** has been removed", "embeds": ArrayContaining [ObjectContaining {"color": 16007990, "title": "Personality Removed"}]}
    Received: {"embeds": [{"color": 16007990, "description": "**Test Personality** has been removed from your collection.", "fields": [{"inline": true, "name": "Removed Personality", "value": "Test Personality"}, {"inline": false, "name": "What Now?", "value": "• You can recreate this personality with the same name
    • Use `list` to see your remaining personalities
    • The personality's conversation history has been preserved"}], "footer": {"text": "This action cannot be undone"}, "timestamp": "2025-06-19T07:39:16.333Z", "title": "✅ Personality Removed Successfully"}]}

    Number of calls: 1

       98 |       expect(mockMessageTracker.removeCompletedAddCommand).toHaveBeenCalledWith('123456789', 'testpersonality');
       99 |       
    > 100 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      101 |         expect.objectContaining({
      102 |           content: expect.stringContaining('✅ **Test Personality** has been removed'),
      103 |           embeds: expect.arrayContaining([

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:100:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle missing personality name

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "You need to provide a personality name"
    Received: {"embeds": [{"color": 2201331, "description": "Remove a personality from your collection.", "fields": [{"inline": false, "name": "Basic Usage", "value": "`!tz remove <name>`"}, {"inline": false, "name": "Examples", "value": "• `!tz remove Claude` - Remove by name
    • `!tz remove cl` - Remove by alias
    • `!tz remove \"My Assistant\"` - Remove with spaces"}, {"inline": false, "name": "Important", "value": "⚠️ You can only remove personalities you created
    ⚠️ This action cannot be undone"}], "footer": {"text": "Removed personalities can be recreated with the same name"}, "title": "How to Remove a Personality"}]}

    Number of calls: 1

      117 |       await command.execute(mockContext);
      118 |       
    > 119 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      120 |         expect.stringContaining('You need to provide a personality name')
      121 |       );
      122 |       expect(mockPersonalityService.removePersonality).not.toHaveBeenCalled();

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:119:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle personality not found error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "not found"
    Received: {"embeds": [{"color": 16007990, "description": "No personality found with the name or alias \"testpersonality\".", "fields": [{"inline": false, "name": "What to check", "value": "• Spelling of the personality name
    • Try using the full name instead of alias
    • Use `list` command to see your personalities"}], "footer": {"text": "Personality names are case-insensitive"}, "title": "❌ Personality Not Found"}]}

    Number of calls: 1

      141 |       await command.execute(mockContext);
      142 |       
    > 143 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      144 |         expect.stringContaining('not found')
      145 |       );
      146 |       expect(mockPersonalityService.removePersonality).not.toHaveBeenCalled();

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:143:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle permission error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "cannot remove a personality that you didn't create"
    Received: {"embeds": [{"color": 16007990, "description": "You cannot remove a personality that you didn't create.", "fields": [{"inline": false, "name": "Why this happened", "value": "• You are not the owner of this personality
    • Only the creator can remove a personality"}, {"inline": false, "name": "What you can do", "value": "• Use `list` to see personalities you own
    • Ask the owner to remove it
    • Create your own version with a different name"}], "title": "❌ Permission Denied"}]}

    Number of calls: 1

      154 |       await command.execute(mockContext);
      155 |       
    > 156 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      157 |         expect.stringContaining('cannot remove a personality that you didn\'t create')
      158 |       );
      159 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:156:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle authentication error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Authentication failed"
    Received: {"embeds": [{"color": 16750592, "description": "You need to authenticate before removing personalities.", "fields": [{"inline": false, "name": "How to authenticate", "value": "1. Use `!tz auth` to start authentication
    2. Follow the instructions in the DM
    3. Try removing the personality again"}], "footer": {"text": "Authentication ensures secure personality management"}, "title": "❌ Authentication Required"}]}

    Number of calls: 1

      166 |       await command.execute(mockContext);
      167 |       
    > 168 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      169 |         expect.stringContaining('Authentication failed')
      170 |       );
      171 |       expect(mockContext.respond).toHaveBeenCalledWith(

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:168:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle general errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "An error occurred"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while removing the personality.", "fields": [{"inline": false, "name": "What happened", "value": "Database error"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check the personality name
    • Verify you own the personality
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756365"}, "timestamp": "2025-06-19T07:39:16.365Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      181 |       await command.execute(mockContext);
      182 |       
    > 183 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      184 |         expect.stringContaining('An error occurred')
      185 |       );
      186 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:183:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

  ● RemoveCommand › execute › should handle missing personality service

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "An error occurred"
    Received: {"embeds": [{"color": 16007990, "description": "An error occurred while removing the personality.", "fields": [{"inline": false, "name": "What happened", "value": "PersonalityApplicationService not available"}, {"inline": false, "name": "What to do", "value": "• Try again in a moment
    • Check the personality name
    • Verify you own the personality
    • Contact support if the issue persists"}], "footer": {"text": "Error ID: 1750318756379"}, "timestamp": "2025-06-19T07:39:16.380Z", "title": "❌ Something Went Wrong"}]}

    Number of calls: 1

      191 |       await command.execute(mockContext);
      192 |       
    > 193 |       expect(mockContext.respond).toHaveBeenCalledWith(
          |                                   ^
      194 |         expect.stringContaining('An error occurred')
      195 |       );
      196 |     });

      at toHaveBeenCalledWith (tests/unit/application/commands/personality/RemoveCommand.test.js:193:35)
      at Generator.call (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/personality/RemoveCommand.test.js:2:1)

FAIL tests/unit/webhookManager.avatar.test.js
  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for null or empty URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      86 |   describe('Basic Avatar URL Validation', () => {
      87 |     test('should return false for null or empty URLs', async () => {
    > 88 |       expect(await webhookManager.validateAvatarUrl(null)).toBe(false);
         |                                   ^
      89 |       expect(await webhookManager.validateAvatarUrl('')).toBe(false);
      90 |       expect(await webhookManager.validateAvatarUrl(undefined)).toBe(false);
      91 |     });

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:88:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for invalid URL formats

    TypeError: webhookManager.validateAvatarUrl is not a function

      92 |     
      93 |     test('should return false for invalid URL formats', async () => {
    > 94 |       expect(await webhookManager.validateAvatarUrl('not-a-url')).toBe(false);
         |                                   ^
      95 |     });
      96 |     
      97 |     test('should handle non-200 responses', async () => {

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:94:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should handle non-200 responses

    TypeError: webhookManager.validateAvatarUrl is not a function

      112 |         // In the updated code, we treat image extensions specially in the test for CDN compatibility
      113 |         // When running in tests, all we care about is that the function completes without errors
    > 114 |         await webhookManager.validateAvatarUrl('https://example.com/notfound.png');
          |                              ^
      115 |       } finally {
      116 |         // Restore original NODE_ENV
      117 |         process.env.NODE_ENV = origNodeEnv;

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:114:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should return false for non-image content types

    TypeError: webhookManager.validateAvatarUrl is not a function

      129 |       }));
      130 |       
    > 131 |       expect(await webhookManager.validateAvatarUrl('https://example.com/page.html')).toBe(false);
          |                                   ^
      132 |     });
      133 |     
      134 |     test('should handle network errors gracefully', async () => {

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:131:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › Basic Avatar URL Validation › should handle network errors gracefully

    TypeError: webhookManager.validateAvatarUrl is not a function

      141 |       try {
      142 |         // Just check that it completes without throwing
    > 143 |         await webhookManager.validateAvatarUrl('https://example.com/error.png');
          |                              ^
      144 |       } finally {
      145 |         // Restore original NODE_ENV
      146 |         process.env.NODE_ENV = origNodeEnv;

      at validateAvatarUrl (tests/unit/webhookManager.avatar.test.js:143:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should return null for null or empty URLs

    TypeError: webhookManager.getValidAvatarUrl is not a function

      151 |   describe('getValidAvatarUrl function', () => {
      152 |     test('should return null for null or empty URLs', async () => {
    > 153 |       expect(await webhookManager.getValidAvatarUrl(null)).toBe(null);
          |                                   ^
      154 |       expect(await webhookManager.getValidAvatarUrl('')).toBe(null);
      155 |       expect(await webhookManager.getValidAvatarUrl(undefined)).toBe(null);
      156 |     });

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:153:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should return original URL when validation passes

    TypeError: webhookManager.getValidAvatarUrl is not a function

      162 |       
      163 |       try {
    > 164 |         const result = await webhookManager.getValidAvatarUrl(validUrl);
          |                                             ^
      165 |         expect(result).toBe(validUrl);
      166 |       } finally {
      167 |         // Restore original function

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:164:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › getValidAvatarUrl function › should handle validation failures

    TypeError: webhookManager.getValidAvatarUrl is not a function

      177 |       try {
      178 |         // Just verify it completes - the exact return value may change based on our implementation
    > 179 |         await webhookManager.getValidAvatarUrl(validUrl);
          |                              ^
      180 |       } finally {
      181 |         // Restore original function
      182 |         webhookManager.validateAvatarUrl = original;

      at getValidAvatarUrl (tests/unit/webhookManager.avatar.test.js:179:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should return null for null URLs

    TypeError: webhookManager.warmupAvatarUrl is not a function

      187 |   describe('warmupAvatarUrl function', () => {
      188 |     test('should return null for null URLs', async () => {
    > 189 |       expect(await webhookManager.warmupAvatarUrl(null)).toBe(null);
          |                                   ^
      190 |     });
      191 |     
      192 |     test('should return URL from cache if already warmed up', async () => {

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:189:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should return URL from cache if already warmed up

    TypeError: webhookManager.warmupAvatarUrl is not a function

      195 |       
      196 |       // Should return from cache without calling fetch
    > 197 |       const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                           ^
      198 |       
      199 |       expect(result).toBe(validUrl);
      200 |       expect(nodeFetch).not.toHaveBeenCalled();

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:197:43)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle valid URLs

    TypeError: webhookManager.warmupAvatarUrl is not a function

      208 |       try {
      209 |         // Just verify it completes - the exact behavior may change
    > 210 |         await webhookManager.warmupAvatarUrl(validUrl);
          |                              ^
      211 |       } finally {
      212 |         // Restore original function
      213 |         webhookManager.getValidAvatarUrl = originalGetValidAvatarUrl;

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:210:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle warmup failures gracefully

    TypeError: webhookManager.warmupAvatarUrl is not a function

      225 |       try {
      226 |         // Just verify it completes without throwing
    > 227 |         await webhookManager.warmupAvatarUrl(validUrl);
          |                              ^
      228 |       } finally {
      229 |         // Restore original function
      230 |         webhookManager.getValidAvatarUrl = originalGetValidAvatarUrl;

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:227:30)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle non-stream response bodies correctly

    TypeError: webhookManager.warmupAvatarUrl is not a function

      254 |       try {
      255 |         // Should complete successfully using arrayBuffer fallback
    > 256 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      257 |         expect(result).toBe(validUrl);
      258 |       } finally {
      259 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:256:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle response with only text method available

    TypeError: webhookManager.warmupAvatarUrl is not a function

      284 |       try {
      285 |         // Should complete successfully using text fallback
    > 286 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      287 |         expect(result).toBe(validUrl);
      288 |       } finally {
      289 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:286:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › warmupAvatarUrl function › should handle response with no read methods available

    TypeError: webhookManager.warmupAvatarUrl is not a function

      313 |       try {
      314 |         // Should still complete successfully using status code
    > 315 |         const result = await webhookManager.warmupAvatarUrl(validUrl);
          |                                             ^
      316 |         expect(result).toBe(validUrl);
      317 |       } finally {
      318 |         // Restore original function

      at warmupAvatarUrl (tests/unit/webhookManager.avatar.test.js:315:45)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should set null for personalities without avatar URL

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      331 |       
      332 |       // Call the function
    > 333 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      334 |       
      335 |       // Should set null
      336 |       expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:333:28)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should validate and update invalid avatar URLs

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      349 |       
      350 |       // Call the function
    > 351 |       await webhookManager.preloadPersonalityAvatar(personality);
          |                            ^
      352 |       
      353 |       // Should update to null when warmup fails
      354 |       expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:351:28)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

  ● WebhookManager Avatar URL Handling › preloadPersonalityAvatar function › should handle null personality gracefully

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      356 |     
      357 |     test('should handle null personality gracefully', async () => {
    > 358 |       await expect(webhookManager.preloadPersonalityAvatar(null)).resolves.not.toThrow();
          |                                   ^
      359 |     });
      360 |   });
      361 | });

      at preloadPersonalityAvatar (tests/unit/webhookManager.avatar.test.js:358:35)
      at Generator.call (tests/unit/webhookManager.avatar.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.avatar.test.js:2:1)
      at _next (tests/unit/webhookManager.avatar.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.avatar.test.js:2:1)

FAIL tests/unit/webhookManager.exports.test.js
  ● WebhookManager - Exported Functions › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      93 |       };
      94 |       
    > 95 |       const result = webhookManager.getStandardizedUsername(personality);
         |                                     ^
      96 |       expect(result).toBe('Test Display Name');
      97 |     });
      98 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:95:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should truncate display names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      102 |       };
      103 |       
    > 104 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      105 |       expect(result.length).toBeLessThanOrEqual(32);
      106 |       expect(result).toContain('...');
      107 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:104:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should extract name from fullName if displayName is not available

    TypeError: webhookManager.getStandardizedUsername is not a function

      112 |       };
      113 |       
    > 114 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      115 |       // Should capitalize the first part of the hyphenated name
      116 |       expect(result).toBe('Test');
      117 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:114:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should use fullName if it has no hyphens and is short enough

    TypeError: webhookManager.getStandardizedUsername is not a function

      122 |       };
      123 |       
    > 124 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      125 |       // Should capitalize the first letter
      126 |       expect(result).toBe('Shortname');
      127 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:124:37)

  ● WebhookManager - Exported Functions › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      128 |     
      129 |     it('should return "Bot" for null or undefined personality', () => {
    > 130 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      131 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      132 |     });
      133 |   });

      at Object.getStandardizedUsername (tests/unit/webhookManager.exports.test.js:130:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should create a consistent hash for a message

    TypeError: webhookManager.hashMessage is not a function

      139 |       const channelId = 'channel-123';
      140 |       
    > 141 |       const hash1 = webhookManager.hashMessage(content, username, channelId);
          |                                    ^
      142 |       const hash2 = webhookManager.hashMessage(content, username, channelId);
      143 |       
      144 |       // Same inputs should produce the same hash

      at Object.hashMessage (tests/unit/webhookManager.exports.test.js:141:36)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should detect duplicate messages

    TypeError: webhookManager.isDuplicateMessage is not a function

      156 |       
      157 |       // First message should not be a duplicate
    > 158 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(false);
          |                             ^
      159 |       
      160 |       // Second identical message should be detected as a duplicate
      161 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(true);

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:158:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should not detect different messages as duplicates

    TypeError: webhookManager.isDuplicateMessage is not a function

      167 |       
      168 |       // First message
    > 169 |       expect(webhookManager.isDuplicateMessage('First message', username, channelId)).toBe(false);
          |                             ^
      170 |       
      171 |       // Different content
      172 |       expect(webhookManager.isDuplicateMessage('Second message', username, channelId)).toBe(false);

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:169:29)

  ● WebhookManager - Exported Functions › hashMessage and isDuplicateMessage › should not flag empty content as duplicate

    TypeError: webhookManager.isDuplicateMessage is not a function

      183 |       const channelId = 'channel-123';
      184 |       
    > 185 |       expect(webhookManager.isDuplicateMessage('', username, channelId)).toBe(false);
          |                             ^
      186 |       expect(webhookManager.isDuplicateMessage(null, username, channelId)).toBe(false);
      187 |       expect(webhookManager.isDuplicateMessage(undefined, username, channelId)).toBe(false);
      188 |     });

      at Object.isDuplicateMessage (tests/unit/webhookManager.exports.test.js:185:29)

  ● WebhookManager - Exported Functions › Pending message functions › should create a consistent key format for personality-channel combinations

    TypeError: webhookManager.createPersonalityChannelKey is not a function

      199 |       const channelId = 'channel-123';
      200 |       
    > 201 |       const key = webhookManager.createPersonalityChannelKey(personalityName, channelId);
          |                                  ^
      202 |       expect(key).toBe('test-personality_channel-123');
      203 |     });
      204 |     

      at Object.createPersonalityChannelKey (tests/unit/webhookManager.exports.test.js:201:34)

  ● WebhookManager - Exported Functions › Pending message functions › should register and detect pending messages

    TypeError: webhookManager.hasPersonalityPendingMessage is not a function

      209 |       
      210 |       // Initially no pending message
    > 211 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(false);
          |                             ^
      212 |       
      213 |       // Register a pending message
      214 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);

      at Object.hasPersonalityPendingMessage (tests/unit/webhookManager.exports.test.js:211:29)

  ● WebhookManager - Exported Functions › Pending message functions › should timeout pending messages after the error wait time

    TypeError: webhookManager.registerPendingMessage is not a function

      238 |         
      239 |         // Register a pending message
    > 240 |         webhookManager.registerPendingMessage(personalityName, channelId, content, false);
          |                        ^
      241 |         
      242 |         // Should have a pending message
      243 |         expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(true);

      at Object.registerPendingMessage (tests/unit/webhookManager.exports.test.js:240:24)

  ● WebhookManager - Exported Functions › Message timing functions › should calculate delay needed for proper message ordering

    TypeError: webhookManager.calculateMessageDelay is not a function

      269 |         
      270 |         // Initially should not need a delay
    > 271 |         expect(webhookManager.calculateMessageDelay(channelId)).toBe(0);
          |                               ^
      272 |         
      273 |         // Update last message time for the channel
      274 |         webhookManager.updateChannelLastMessageTime(channelId);

      at Object.calculateMessageDelay (tests/unit/webhookManager.exports.test.js:271:31)

  ● WebhookManager - Exported Functions › Webhook cache functions › should have clearWebhookCache and clearAllWebhookCaches functions exported

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      298 |     
      299 |     it('should have clearWebhookCache and clearAllWebhookCaches functions exported', () => {
    > 300 |       expect(typeof webhookManager.clearWebhookCache).toBe('function');
          |                                                       ^
      301 |       expect(typeof webhookManager.clearAllWebhookCaches).toBe('function');
      302 |     });
      303 |     

      at Object.toBe (tests/unit/webhookManager.exports.test.js:300:55)

  ● WebhookManager - Exported Functions › preloadPersonalityAvatar › should be an exported function that handles avatars

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      309 |     it('should be an exported function that handles avatars', () => {
      310 |       // Verify the function exists
    > 311 |       expect(typeof webhookManager.preloadPersonalityAvatar).toBe('function');
          |                                                              ^
      312 |       
      313 |       // Create a personality with no avatar to avoid actual fetch calls
      314 |       const personality = {

      at Object.toBe (tests/unit/webhookManager.exports.test.js:311:62)

FAIL tests/unit/webhookManager.media.test.js
  ● Webhook Manager - Media Handling › should send message with files through webhook

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Check out this content", "username": "Test Personality"}

    Number of calls: 0

      68 |     );
      69 |     
    > 70 |     expect(mockWebhook.send).toHaveBeenCalledWith(
         |                              ^
      71 |       expect.objectContaining({
      72 |         content: 'Check out this content',
      73 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:70:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should send message with single file through webhook

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Multiple files", "username": "Test Personality"}

    Number of calls: 0

       96 |     await promise;
       97 |     
    >  98 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
       99 |       expect.objectContaining({
      100 |         content: 'Multiple files',
      101 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:98:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle DM channels without webhooks

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      123 |     
      124 |     // In DMs, it should use channel.send instead of webhook
    > 125 |     expect(mockChannel.send).toHaveBeenCalled();
          |                              ^
      126 |     expect(mockWebhook.send).not.toHaveBeenCalled();
      127 |   });
      128 |

      at toHaveBeenCalled (tests/unit/webhookManager.media.test.js:125:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle empty content with files

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"files": ArrayContaining [ObjectContaining {"attachment": "https://example.com/image.png"}], "username": "Test Personality"}

    Number of calls: 0

      146 |     await promise;
      147 |     
    > 148 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
      149 |       expect.objectContaining({
      150 |         username: 'Test Personality',
      151 |         files: expect.arrayContaining([

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:148:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should send simple message without options

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"content": "Message with embed", "username": "Test Personality"}

    Number of calls: 0

      173 |     await promise;
      174 |     
    > 175 |     expect(mockWebhook.send).toHaveBeenCalledWith(
          |                              ^
      176 |       expect.objectContaining({
      177 |         content: 'Message with embed',
      178 |         username: 'Test Personality'

      at toHaveBeenCalledWith (tests/unit/webhookManager.media.test.js:175:30)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)

  ● Webhook Manager - Media Handling › should handle errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {}

      184 |     mockWebhook.send.mockRejectedValue(new Error('Webhook error'));
      185 |     
    > 186 |     const promise = expect(
          |                     ^
      187 |       webhookManager.sendWebhookMessage(
      188 |         mockChannel,
      189 |         'This will fail',

      at expect (node_modules/expect/build/index.js:113:15)
      at expect (tests/unit/webhookManager.media.test.js:186:21)
      at Generator.call (tests/unit/webhookManager.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.media.test.js:2:1)
      at _next (tests/unit/webhookManager.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.media.test.js:2:1)

FAIL tests/unit/domain/ai/index.test.js
  ● AI Domain Index › domain boundary › should provide complete public API

    expect(received).toHaveLength(expected)

    Expected length: 14
    Received length: 15
    Received array:  ["AIRequest", "AIRequestId", "AIContent", "AIModel", "AIService", "AIRequestDeduplicator", "AIRequestRepository", "AIRequestCreated", "AIRequestSent", "AIResponseReceived", …]

      140 |       }
      141 |       
    > 142 |       expect(exportedKeys).toHaveLength(expectedKeys.length);
          |                            ^
      143 |     });
      144 |   });
      145 | });

      at Object.toHaveLength (tests/unit/domain/ai/index.test.js:142:28)

FAIL tests/unit/webhookManager.test.js
  ● WebhookManager › isDuplicateMessage and hashMessage › should create a consistent hash for a message

    TypeError: webhookManager.hashMessage is not a function

      106 |       const channelId = 'channel-123';
      107 |       
    > 108 |       const hash1 = webhookManager.hashMessage(content, username, channelId);
          |                                    ^
      109 |       const hash2 = webhookManager.hashMessage(content, username, channelId);
      110 |       
      111 |       // Same inputs should produce the same hash

      at Object.hashMessage (tests/unit/webhookManager.test.js:108:36)

  ● WebhookManager › isDuplicateMessage and hashMessage › should detect a duplicate message

    TypeError: webhookManager.isDuplicateMessage is not a function

      123 |       
      124 |       // First time is not a duplicate
    > 125 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(false);
          |                             ^
      126 |       
      127 |       // Second time should be detected as duplicate
      128 |       expect(webhookManager.isDuplicateMessage(content, username, channelId)).toBe(true);

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:125:29)

  ● WebhookManager › isDuplicateMessage and hashMessage › should not consider different messages as duplicates

    TypeError: webhookManager.isDuplicateMessage is not a function

      134 |       
      135 |       // First message
    > 136 |       expect(webhookManager.isDuplicateMessage('First message', username, channelId)).toBe(false);
          |                             ^
      137 |       
      138 |       // Different content should not be a duplicate
      139 |       expect(webhookManager.isDuplicateMessage('Second message', username, channelId)).toBe(false);

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:136:29)

  ● WebhookManager › isDuplicateMessage and hashMessage › should not consider empty content as a duplicate

    TypeError: webhookManager.isDuplicateMessage is not a function

      150 |       const channelId = 'channel-123';
      151 |       
    > 152 |       expect(webhookManager.isDuplicateMessage('', username, channelId)).toBe(false);
          |                             ^
      153 |       expect(webhookManager.isDuplicateMessage(null, username, channelId)).toBe(false);
      154 |       expect(webhookManager.isDuplicateMessage(undefined, username, channelId)).toBe(false);
      155 |     });

      at Object.isDuplicateMessage (tests/unit/webhookManager.test.js:152:29)

  ● WebhookManager › getStandardizedUsername › should prioritize displayName if available

    TypeError: webhookManager.getStandardizedUsername is not a function

      163 |       };
      164 |       
    > 165 |       expect(webhookManager.getStandardizedUsername(personality)).toBe('Display Name');
          |                             ^
      166 |     });
      167 |     
      168 |     it('should fall back to first part of fullName if no displayName', () => {

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:165:29)

  ● WebhookManager › getStandardizedUsername › should fall back to first part of fullName if no displayName

    TypeError: webhookManager.getStandardizedUsername is not a function

      171 |       };
      172 |       
    > 173 |       expect(webhookManager.getStandardizedUsername(personality)).toBe('First');
          |                             ^
      174 |     });
      175 |     
      176 |     it('should use fullName if no hyphens and under limit', () => {

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:173:29)

  ● WebhookManager › getStandardizedUsername › should use fullName if no hyphens and under limit

    TypeError: webhookManager.getStandardizedUsername is not a function

      180 |       
      181 |       // Use a case-insensitive match because the implementation capitalizes the first letter
    > 182 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      183 |       expect(result.toLowerCase()).toBe('shortname'.toLowerCase());
      184 |     });
      185 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:182:37)

  ● WebhookManager › getStandardizedUsername › should truncate names longer than 32 characters

    TypeError: webhookManager.getStandardizedUsername is not a function

      189 |       };
      190 |       
    > 191 |       const result = webhookManager.getStandardizedUsername(personality);
          |                                     ^
      192 |       expect(result.length).toBeLessThanOrEqual(32);
      193 |       expect(result).toContain('...');
      194 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:191:37)

  ● WebhookManager › getStandardizedUsername › should return "Bot" for null or undefined personality

    TypeError: webhookManager.getStandardizedUsername is not a function

      195 |     
      196 |     it('should return "Bot" for null or undefined personality', () => {
    > 197 |       expect(webhookManager.getStandardizedUsername(null)).toBe('Bot');
          |                             ^
      198 |       expect(webhookManager.getStandardizedUsername(undefined)).toBe('Bot');
      199 |       expect(webhookManager.getStandardizedUsername({})).toBe('Bot');
      200 |     });

      at Object.getStandardizedUsername (tests/unit/webhookManager.test.js:197:29)

  ● WebhookManager › Pending Message Tracking › should create a consistent key for personality-channel combinations

    TypeError: webhookManager.createPersonalityChannelKey is not a function

      211 |       const channelId = 'channel-123';
      212 |       
    > 213 |       const key = webhookManager.createPersonalityChannelKey(personalityName, channelId);
          |                                  ^
      214 |       expect(key).toBe('test-personality_channel-123');
      215 |     });
      216 |     

      at Object.createPersonalityChannelKey (tests/unit/webhookManager.test.js:213:34)

  ● WebhookManager › Pending Message Tracking › should register and detect pending messages

    TypeError: webhookManager.hasPersonalityPendingMessage is not a function

      221 |       
      222 |       // Initially should have no pending message
    > 223 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(false);
          |                             ^
      224 |       
      225 |       // Register a pending message
      226 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);

      at Object.hasPersonalityPendingMessage (tests/unit/webhookManager.test.js:223:29)

  ● WebhookManager › Pending Message Tracking › should expire pending messages after timeout

    TypeError: webhookManager.registerPendingMessage is not a function

      242 |       
      243 |       // Register a pending message
    > 244 |       webhookManager.registerPendingMessage(personalityName, channelId, content, false);
          |                      ^
      245 |       
      246 |       // Should detect a pending message
      247 |       expect(webhookManager.hasPersonalityPendingMessage(personalityName, channelId)).toBe(true);

      at Object.registerPendingMessage (tests/unit/webhookManager.test.js:244:22)

FAIL tests/unit/webhookManager.helpers.test.js
  ● WebhookManager - Helper Functions › Console output management › minimizeConsoleOutput should return an empty object with structured logging

    TypeError: webhookManager.minimizeConsoleOutput is not a function

      56 |     test('minimizeConsoleOutput should return an empty object with structured logging', () => {
      57 |       // Call the function
    > 58 |       const originalFunctions = webhookManager.minimizeConsoleOutput();
         |                                                ^
      59 |       
      60 |       // Verify it returns an empty object now that we're using structured logging
      61 |       expect(originalFunctions).toEqual({});

      at Object.minimizeConsoleOutput (tests/unit/webhookManager.helpers.test.js:58:48)

  ● WebhookManager - Helper Functions › Console output management › restoreConsoleOutput should be a no-op with structured logging

    TypeError: webhookManager.minimizeConsoleOutput is not a function

      72 |     test('restoreConsoleOutput should be a no-op with structured logging', () => {
      73 |       // First minimize (now returns empty object)
    > 74 |       const originalFunctions = webhookManager.minimizeConsoleOutput();
         |                                                ^
      75 |       
      76 |       // Then restore (should be a no-op)
      77 |       webhookManager.restoreConsoleOutput(originalFunctions);

      at Object.minimizeConsoleOutput (tests/unit/webhookManager.helpers.test.js:74:48)

  ● WebhookManager - Helper Functions › Message ID generation › generateMessageTrackingId should create unique IDs

    TypeError: webhookManager.generateMessageTrackingId is not a function

       96 |       
       97 |       // Generate IDs
    >  98 |       const id1 = webhookManager.generateMessageTrackingId(channelId);
          |                                  ^
       99 |       const id2 = webhookManager.generateMessageTrackingId(channelId);
      100 |       
      101 |       // IDs should be strings

      at Object.generateMessageTrackingId (tests/unit/webhookManager.helpers.test.js:98:34)

  ● WebhookManager - Helper Functions › Error content detection › isErrorContent should identify error messages

    TypeError: webhookManager.isErrorContent is not a function

      113 |     test('isErrorContent should identify error messages', () => {
      114 |       // Test error patterns
    > 115 |       expect(webhookManager.isErrorContent("I'm having trouble connecting")).toBe(true);
          |                             ^
      116 |       expect(webhookManager.isErrorContent("ERROR_MESSAGE_PREFIX: Some error")).toBe(true);
      117 |       expect(webhookManager.isErrorContent("I'm experiencing a technical issue")).toBe(true);
      118 |       expect(webhookManager.isErrorContent("Error ID: 12345")).toBe(true);

      at Object.isErrorContent (tests/unit/webhookManager.helpers.test.js:115:29)

  ● WebhookManager - Helper Functions › Error content detection › markErrorContent should add prefix to error messages

    TypeError: webhookManager.markErrorContent is not a function

      130 |     test('markErrorContent should add prefix to error messages', () => {
      131 |       // Should add prefix to error messages
    > 132 |       expect(webhookManager.markErrorContent("I'm having trouble connecting")).toContain('ERROR_MESSAGE_PREFIX:');
          |                             ^
      133 |       expect(webhookManager.markErrorContent("technical issue")).toContain('ERROR_MESSAGE_PREFIX:');
      134 |       
      135 |       // Should not modify non-error messages

      at Object.markErrorContent (tests/unit/webhookManager.helpers.test.js:132:29)

  ● WebhookManager - Helper Functions › Message preparation › prepareMessageData should format message data correctly

    TypeError: webhookManager.prepareMessageData is not a function

      153 |       
      154 |       // Test with basic info
    > 155 |       const basicData = webhookManager.prepareMessageData(content, username, personality, false, threadId);
          |                                        ^
      156 |       expect(basicData.content).toBe(content);
      157 |       expect(basicData.username).toBe(username);
      158 |       expect(basicData._personality).toBe(personality); // Personality is stored internally

      at Object.prepareMessageData (tests/unit/webhookManager.helpers.test.js:155:40)

  ● WebhookManager - Helper Functions › Message chunk sending › sendMessageChunk should send message via webhook

    TypeError: webhookManager.sendMessageChunk is not a function

      182 |       
      183 |       // Call the function
    > 184 |       const result = await webhookManager.sendMessageChunk(webhook, messageData, 0, 1);
          |                                           ^
      185 |       
      186 |       // Verify webhook.send was called with the message data plus avatarURL
      187 |       expect(webhook.send).toHaveBeenCalledWith({

      at sendMessageChunk (tests/unit/webhookManager.helpers.test.js:184:43)
      at Generator.call (tests/unit/webhookManager.helpers.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at _next (tests/unit/webhookManager.helpers.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.helpers.test.js:2:1)

  ● WebhookManager - Helper Functions › Message chunk sending › sendMessageChunk should handle errors

    TypeError: webhookManager.sendMessageChunk is not a function

      209 |       
      210 |       // Call should throw, even though fallback was attempted
    > 211 |       await expect(webhookManager.sendMessageChunk(webhook, messageData, 0, 1))
          |                                   ^
      212 |         .rejects.toThrow();
      213 |       
      214 |       // Verify webhook.send was called for both attempts

      at sendMessageChunk (tests/unit/webhookManager.helpers.test.js:211:35)
      at Generator.call (tests/unit/webhookManager.helpers.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.helpers.test.js:2:1)
      at _next (tests/unit/webhookManager.helpers.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.helpers.test.js:2:1)

  ● WebhookManager - Helper Functions › Virtual result creation › createVirtualResult should create a valid result object

    TypeError: webhookManager.createVirtualResult is not a function

      235 |       
      236 |       // Call the function
    > 237 |       const result = webhookManager.createVirtualResult(personality, channelId);
          |                                     ^
      238 |       
      239 |       // Verify structure
      240 |       expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.helpers.test.js:237:37)

  ● WebhookManager - Helper Functions › Virtual result creation › createVirtualResult should handle missing personality data

    TypeError: webhookManager.createVirtualResult is not a function

      251 |       
      252 |       // Call with null personality
    > 253 |       const result1 = webhookManager.createVirtualResult(null, channelId);
          |                                      ^
      254 |       expect(result1).toHaveProperty('isDuplicate', true);
      255 |       
      256 |       // Call with personality missing fullName

      at Object.createVirtualResult (tests/unit/webhookManager.helpers.test.js:253:38)

  ● WebhookManager - Helper Functions › Message splitting › splitByCharacterLimit should split text correctly

    TypeError: webhookManager.splitByCharacterLimit is not a function

      266 |       
      267 |       // Split the text
    > 268 |       const chunks = webhookManager.splitByCharacterLimit(longText);
          |                                     ^
      269 |       
      270 |       // Should be split into chunks
      271 |       expect(chunks.length).toBeGreaterThan(1);

      at Object.splitByCharacterLimit (tests/unit/webhookManager.helpers.test.js:268:37)

  ● WebhookManager - Helper Functions › Message splitting › processSentence should handle sentences correctly

    TypeError: webhookManager.processSentence is not a function

      285 |       
      286 |       // Process a short sentence with empty current chunk
    > 287 |       let result = webhookManager.processSentence('This is a short sentence.', chunks, '');
          |                                   ^
      288 |       expect(result).toBe('This is a short sentence.');
      289 |       expect(chunks.length).toBe(0);
      290 |       

      at Object.processSentence (tests/unit/webhookManager.helpers.test.js:287:35)

  ● WebhookManager - Helper Functions › Message splitting › processLine should handle lines correctly

    TypeError: webhookManager.processLine is not a function

      309 |       
      310 |       // Process a short line
    > 311 |       let result = webhookManager.processLine('This is a short line', chunks, '');
          |                                   ^
      312 |       expect(result).toBe('This is a short line');
      313 |       
      314 |       // Process a line with newlines

      at Object.processLine (tests/unit/webhookManager.helpers.test.js:311:35)

  ● WebhookManager - Helper Functions › Message splitting › processParagraph should handle paragraphs correctly

    TypeError: webhookManager.processParagraph is not a function

      331 |       
      332 |       // Process a short paragraph
    > 333 |       let result = webhookManager.processParagraph('This is a short paragraph.', chunks, '');
          |                                   ^
      334 |       expect(result).toBe('This is a short paragraph.');
      335 |       
      336 |       // Process another paragraph

      at Object.processParagraph (tests/unit/webhookManager.helpers.test.js:333:35)

FAIL tests/unit/application/commands/conversation/DeactivateCommand.test.js
  ● DeactivateCommand › execute › should deactivate an active personality

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:73:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should reject in DM channels

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:102:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should reject without Manage Messages permission

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:116:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle no active personality

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:131:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle deactivation errors

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:149:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:168:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should log successful deactivation

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:186:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should include timestamp in embed

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:200:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

  ● DeactivateCommand › execute › should handle personalities with special characters in names

    TypeError: Cannot read properties of undefined (reading 'conversationManager')

      29 | function createExecutor(dependencies) {
      30 |   return async function execute(context) {
    > 31 |     const conversationManager = context.dependencies.conversationManager;
         |                                                      ^
      32 |
      33 |     logger.info(`[DeactivateCommand] Executing for channel ${context.getChannelId()}`);
      34 |

      at conversationManager (src/application/commands/conversation/DeactivateCommand.js:31:54)
      at Generator.call (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Generator._invoke [as next] (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at asyncGeneratorStep (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at _next (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.<anonymous> (src/application/commands/conversation/DeactivateCommand.js:2:1)
      at Command.apply [as execute] (src/application/commands/conversation/DeactivateCommand.js:30:32)
      at execute (tests/unit/application/commands/conversation/DeactivateCommand.test.js:214:21)
      at Generator.call (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at asyncGeneratorStep (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at _next (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)
      at Object.<anonymous> (tests/unit/application/commands/conversation/DeactivateCommand.test.js:2:1)

FAIL tests/unit/webhookManager.chunkDelay.test.js
  ● WebhookManager - Chunk Delay Tests › should not delay on the first chunk

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should delay 750ms between chunks for multi-chunk messages

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should use custom delay function when set

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should apply delay for each chunk after the first

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should verify exact delay timing between chunks

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should handle empty content without delays

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

  ● WebhookManager - Chunk Delay Tests › should handle delay errors gracefully

    TypeError: webhookManager.setDelayFunction is not a function

      150 |       webhookManager = require('../../src/webhookManager');
      151 |       // Set our mock delay function
    > 152 |       webhookManager.setDelayFunction(mockDelayFn);
          |                      ^
      153 |       
      154 |       // Mock calculateMessageDelay to return 0 (no initial delay)
      155 |       webhookManager.calculateMessageDelay = jest.fn().mockReturnValue(0);

      at setDelayFunction (tests/unit/webhookManager.chunkDelay.test.js:152:22)
      at Object.isolateModules (tests/unit/webhookManager.chunkDelay.test.js:149:10)

FAIL tests/unit/webhookManager.dm.media.test.js
  ● Webhook Manager - DM Media Handling › should properly format DM messages with personality name

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      58 |
      59 |   it('should properly format DM messages with personality name', async () => {
    > 60 |     const result = await webhookManager.sendFormattedMessageInDM(
         |                                         ^
      61 |       mockChannel,
      62 |       'Hello World',
      63 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:60:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should process media in DM messages

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      92 |     });
      93 |
    > 94 |     const result = await webhookManager.sendFormattedMessageInDM(
         |                                         ^
      95 |       mockChannel,
      96 |       'Check out this image: https://example.com/image.jpg',
      97 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:94:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should handle splitting long messages with media attachments

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      143 |     });
      144 |     
    > 145 |     const result = await webhookManager.sendFormattedMessageInDM(
          |                                         ^
      146 |       mockChannel,
      147 |       mediaMessage,
      148 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:145:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

  ● Webhook Manager - DM Media Handling › should continue with original content if media processing fails

    TypeError: webhookManager.sendFormattedMessageInDM is not a function

      168 |     mediaHandler.processMediaUrls.mockRejectedValue(new Error('Media processing failed'));
      169 |
    > 170 |     const result = await webhookManager.sendFormattedMessageInDM(
          |                                         ^
      171 |       mockChannel,
      172 |       'Message with problematic image: https://example.com/bad-image.jpg',
      173 |       personality

      at sendFormattedMessageInDM (tests/unit/webhookManager.dm.media.test.js:170:41)
      at Generator.call (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.dm.media.test.js:2:1)
      at _next (tests/unit/webhookManager.dm.media.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.dm.media.test.js:2:1)

FAIL tests/unit/webhookManager.username.suffix.test.js
  ● Webhook Username Suffix › should append bot suffix to display name

    TypeError: getStandardizedUsername is not a function

      24 |     };
      25 |     
    > 26 |     const username = getStandardizedUsername(personality);
         |                      ^
      27 |     expect(username).toBe('Albert Einstein | Test Server');
      28 |     
      29 |     // Test with inconsistent spacing in the bot tag

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:26:22)

  ● Webhook Username Suffix › should handle long display names and truncate properly

    TypeError: getStandardizedUsername is not a function

      45 |     };
      46 |     
    > 47 |     const username = getStandardizedUsername(personality);
         |                      ^
      48 |     const expectedSuffix = ' | Test Server';
      49 |     const maxNameLength = 29 - expectedSuffix.length;
      50 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:47:22)

  ● Webhook Username Suffix › should handle missing display name and use fullName

    TypeError: getStandardizedUsername is not a function

      61 |     };
      62 |     
    > 63 |     const username = getStandardizedUsername(personality);
         |                      ^
      64 |     expect(username).toBe('Marie | Test Server');
      65 |   });
      66 |   

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:63:22)

  ● Webhook Username Suffix › should handle null/undefined personality

    TypeError: getStandardizedUsername is not a function

      66 |   
      67 |   it('should handle null/undefined personality', () => {
    > 68 |     const username = getStandardizedUsername(null);
         |                      ^
      69 |     expect(username).toBe('Bot');
      70 |   });
      71 |   

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:68:22)

  ● Webhook Username Suffix › should work when bot has no suffix

    TypeError: getStandardizedUsername is not a function

      81 |     };
      82 |     
    > 83 |     const username = getStandardizedUsername(personality);
         |                      ^
      84 |     expect(username).toBe('Sigmund Freud');
      85 |     
      86 |     // Restore the global

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:83:22)

  ● Webhook Username Suffix › should remove Discord discriminator from suffix

    TypeError: getStandardizedUsername is not a function

       99 |     };
      100 |     
    > 101 |     const username = getStandardizedUsername(personality);
          |                      ^
      102 |     expect(username).toBe('Carl Jung | Test Server');
      103 |     expect(username.includes('#1234')).toBe(false);
      104 |     

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:101:22)

  ● Webhook Username Suffix › should work when global.tzurotClient is undefined

    TypeError: getStandardizedUsername is not a function

      124 |     };
      125 |     
    > 126 |     const username = getStandardizedUsername(personality);
          |                      ^
      127 |     expect(username).toBe('Carl Jung');
      128 |     
      129 |     // Restore the global

      at Object.getStandardizedUsername (tests/unit/webhookManager.username.suffix.test.js:126:22)

FAIL tests/unit/webhookManager.simple.test.js
  ● WebhookManager Avatar URL Handling - Simplified Tests › validateAvatarUrl should return false for invalid URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      53 |   test('validateAvatarUrl should return false for invalid URLs', async () => {
      54 |     // Test with null URL
    > 55 |     expect(await webhookManager.validateAvatarUrl(null)).toBe(false);
         |                                 ^
      56 |     
      57 |     // Test with empty URL
      58 |     expect(await webhookManager.validateAvatarUrl('')).toBe(false);

      at validateAvatarUrl (tests/unit/webhookManager.simple.test.js:55:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › getValidAvatarUrl should return null for null input

    TypeError: webhookManager.getValidAvatarUrl is not a function

      64 |   test('getValidAvatarUrl should return null for null input', async () => {
      65 |     // This is the simplest test case that should always work
    > 66 |     expect(await webhookManager.getValidAvatarUrl(null)).toBe(null);
         |                                 ^
      67 |   });
      68 |   
      69 |   test('preloadPersonalityAvatar should set null for personalities without avatarUrl', async () => {

      at getValidAvatarUrl (tests/unit/webhookManager.simple.test.js:66:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › preloadPersonalityAvatar should set null for personalities without avatarUrl

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      75 |     
      76 |     // Call the function
    > 77 |     await webhookManager.preloadPersonalityAvatar(personality);
         |                          ^
      78 |     
      79 |     // Verify the avatar URL was set to null
      80 |     expect(personality.avatarUrl).toBe(null);

      at preloadPersonalityAvatar (tests/unit/webhookManager.simple.test.js:77:26)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

  ● WebhookManager Avatar URL Handling - Simplified Tests › preloadPersonalityAvatar should handle null personality gracefully

    TypeError: webhookManager.preloadPersonalityAvatar is not a function

      83 |   test('preloadPersonalityAvatar should handle null personality gracefully', async () => {
      84 |     // This should not throw any errors
    > 85 |     await expect(webhookManager.preloadPersonalityAvatar(null)).resolves.not.toThrow();
         |                                 ^
      86 |   });
      87 | });

      at preloadPersonalityAvatar (tests/unit/webhookManager.simple.test.js:85:33)
      at Generator.call (tests/unit/webhookManager.simple.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at asyncGeneratorStep (tests/unit/webhookManager.simple.test.js:2:1)
      at _next (tests/unit/webhookManager.simple.test.js:2:1)
      at Object.<anonymous> (tests/unit/webhookManager.simple.test.js:2:1)

FAIL tests/unit/webhookManager.createVirtual.test.js
  ● WebhookManager - createVirtualResult › should create a virtual result with expected format

    TypeError: webhookManager.createVirtualResult is not a function

      32 |     
      33 |     // Call the function we're testing
    > 34 |     const result = webhookManager.createVirtualResult(personality, channelId);
         |                                   ^
      35 |     
      36 |     // Verify the returned object has the expected format
      37 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:34:35)

  ● WebhookManager - createVirtualResult › should handle null personality gracefully

    TypeError: webhookManager.createVirtualResult is not a function

      50 |   it('should handle null personality gracefully', () => {
      51 |     // Call the function with null personality
    > 52 |     const result = webhookManager.createVirtualResult(null, 'test-channel-123');
         |                                   ^
      53 |     
      54 |     // Verify the structure of the result
      55 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:52:35)

  ● WebhookManager - createVirtualResult › should handle missing fullName property gracefully

    TypeError: webhookManager.createVirtualResult is not a function

      67 |     
      68 |     // Call the function
    > 69 |     const result = webhookManager.createVirtualResult(personality, 'test-channel-123');
         |                                   ^
      70 |     
      71 |     // Verify the structure of the result
      72 |     expect(result).toHaveProperty('message');

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:69:35)

  ● WebhookManager - createVirtualResult › should generate a unique virtual ID for each call

    TypeError: webhookManager.createVirtualResult is not a function

      78 |   it('should generate a unique virtual ID for each call', () => {
      79 |     // Call the function multiple times
    > 80 |     const result1 = webhookManager.createVirtualResult(null, 'test-channel-123');
         |                                    ^
      81 |     const result2 = webhookManager.createVirtualResult(null, 'test-channel-123');
      82 |     
      83 |     // Verify the IDs are different

      at Object.createVirtualResult (tests/unit/webhookManager.createVirtual.test.js:80:36)

FAIL tests/unit/validateAvatarUrl.test.js
  ● validateAvatarUrl Success Test › should return true for valid image URLs

    TypeError: webhookManager.validateAvatarUrl is not a function

      81 |     
      82 |     // Execute the validation
    > 83 |     const result = await webhookManager.validateAvatarUrl(validUrl);
         |                                         ^
      84 |     
      85 |     // Should return true
      86 |     expect(result).toBe(true);

      at validateAvatarUrl (tests/unit/validateAvatarUrl.test.js:83:41)
      at Generator.call (tests/unit/validateAvatarUrl.test.js:2:1)
      at Generator._invoke [as next] (tests/unit/validateAvatarUrl.test.js:2:1)
      at asyncGeneratorStep (tests/unit/validateAvatarUrl.test.js:2:1)
      at asyncGeneratorStep (tests/unit/validateAvatarUrl.test.js:2:1)
      at _next (tests/unit/validateAvatarUrl.test.js:2:1)
      at Object.<anonymous> (tests/unit/validateAvatarUrl.test.js:2:1)


Test Suites: 31 failed, 216 passed, 247 total
Tests:       386 failed, 3935 passed, 4321 total
Snapshots:   0 total
Time:        46.428 s
Ran all test suites.
