generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(uuid()) @db.Uuid
  discordId          String                  @unique @map("discord_id") @db.VarChar(20)
  username           String                  @db.VarChar(255)
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @updatedAt @map("updated_at")
  activatedChannels  ActivatedChannel[]
  ownedLlmConfigs    LlmConfig[]             @relation("LlmConfigOwner")
  personalityOwners  PersonalityOwner[]
  ownedPersonas      Persona[]               @relation("PersonaOwner")
  defaultPersonaLink UserDefaultPersona?
  personalityConfigs UserPersonalityConfig[]

  @@index([discordId])
  @@map("users")
}

model Persona {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String                  @db.VarChar(255)
  description           String?
  content               String
  preferredName         String?                 @map("preferred_name") @db.VarChar(255)
  pronouns              String?                 @db.VarChar(100)
  ownerId               String                  @map("owner_id") @db.Uuid
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  conversationHistory   ConversationHistory[]
  memories              Memory[]
  owner                 User                    @relation("PersonaOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  shapesPersonaMappings ShapesPersonaMapping[]
  usersUsingAsDefault   UserDefaultPersona[]
  personalityConfigs    UserPersonalityConfig[]

  @@index([ownerId])
  @@map("personas")
}

model UserDefaultPersona {
  userId    String   @id @unique @map("user_id") @db.Uuid
  personaId String   @map("persona_id") @db.Uuid
  updatedAt DateTime @updatedAt @map("updated_at")
  persona   Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([personaId])
  @@map("user_default_personas")
}

model SystemPrompt {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @db.VarChar(255)
  description   String?
  content       String
  isDefault     Boolean       @default(false) @map("is_default")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  personalities Personality[]

  @@index([isDefault])
  @@map("system_prompts")
}

model LlmConfig {
  id                          String                     @id @default(uuid()) @db.Uuid
  name                        String                     @db.VarChar(255)
  description                 String?
  ownerId                     String?                    @map("owner_id") @db.Uuid
  isGlobal                    Boolean                    @default(false) @map("is_global")
  isDefault                   Boolean                    @default(false) @map("is_default")
  model                       String                     @db.VarChar(255)
  visionModel                 String?                    @map("vision_model") @db.VarChar(255)
  temperature                 Decimal?                   @db.Decimal(3, 2)
  topP                        Decimal?                   @map("top_p") @db.Decimal(3, 2)
  topK                        Int?                       @map("top_k")
  frequencyPenalty            Decimal?                   @map("frequency_penalty") @db.Decimal(3, 2)
  presencePenalty             Decimal?                   @map("presence_penalty") @db.Decimal(3, 2)
  repetitionPenalty           Decimal?                   @map("repetition_penalty") @db.Decimal(3, 2)
  maxTokens                   Int?                       @map("max_tokens")
  memoryScoreThreshold        Decimal?                   @map("memory_score_threshold") @db.Decimal(3, 2)
  memoryLimit                 Int?                       @map("memory_limit")
  contextWindowSize           Int                        @default(20) @map("context_window_size")
  createdAt                   DateTime                   @default(now()) @map("created_at")
  updatedAt                   DateTime                   @updatedAt @map("updated_at")
  owner                       User?                      @relation("LlmConfigOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  personalitiesUsingAsDefault PersonalityDefaultConfig[]
  userPersonalityConfigs      UserPersonalityConfig[]

  @@index([ownerId])
  @@index([isGlobal])
  @@map("llm_configs")
}

model PersonalityDefaultConfig {
  personalityId String      @id @unique @map("personality_id") @db.Uuid
  llmConfigId   String      @map("llm_config_id") @db.Uuid
  updatedAt     DateTime    @updatedAt @map("updated_at")
  llmConfig     LlmConfig   @relation(fields: [llmConfigId], references: [id], onDelete: Cascade)
  personality   Personality @relation(fields: [personalityId], references: [id], onDelete: Cascade)

  @@index([llmConfigId])
  @@map("personality_default_configs")
}

model Personality {
  id                     String                    @id @default(uuid()) @db.Uuid
  name                   String                    @db.VarChar(255)
  displayName            String?                   @map("display_name") @db.VarChar(255)
  slug                   String                    @unique @db.VarChar(255)
  systemPromptId         String?                   @map("system_prompt_id") @db.Uuid
  characterInfo          String                    @map("character_info")
  personalityTraits      String                    @map("personality_traits")
  personalityTone        String?                   @map("personality_tone")
  personalityAge         String?                   @map("personality_age")
  personalityAppearance  String?                   @map("personality_appearance")
  personalityLikes       String?                   @map("personality_likes")
  personalityDislikes    String?                   @map("personality_dislikes")
  conversationalGoals    String?                   @map("conversational_goals")
  conversationalExamples String?                   @map("conversational_examples")
  customFields           Json?                     @map("custom_fields")
  voiceEnabled           Boolean                   @default(false) @map("voice_enabled")
  voiceSettings          Json?                     @map("voice_settings")
  imageEnabled           Boolean                   @default(false) @map("image_enabled")
  imageSettings          Json?                     @map("image_settings")
  avatarData             Bytes?                    @map("avatar_data")
  createdAt              DateTime                  @default(now()) @map("created_at")
  updatedAt              DateTime                  @updatedAt @map("updated_at")
  activatedChannels      ActivatedChannel[]
  conversationHistory    ConversationHistory[]
  memories               Memory[]
  systemPrompt           SystemPrompt?             @relation(fields: [systemPromptId], references: [id])
  defaultConfigLink      PersonalityDefaultConfig?
  owners                 PersonalityOwner[]
  userConfigs            UserPersonalityConfig[]

  @@index([slug])
  @@map("personalities")
}

model PersonalityOwner {
  personalityId String      @map("personality_id") @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  role          String      @default("owner") @db.VarChar(50)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  personality   Personality @relation(fields: [personalityId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([personalityId, userId])
  @@index([userId])
  @@index([personalityId])
  @@map("personality_owners")
}

model UserPersonalityConfig {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  personalityId String      @map("personality_id") @db.Uuid
  personaId     String?     @map("persona_id") @db.Uuid
  llmConfigId   String?     @map("llm_config_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  llmConfig     LlmConfig?  @relation(fields: [llmConfigId], references: [id])
  persona       Persona?    @relation(fields: [personaId], references: [id])
  personality   Personality @relation(fields: [personalityId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, personalityId])
  @@index([userId])
  @@index([personalityId])
  @@map("user_personality_configs")
}

model ConversationHistory {
  id            String         @id @default(uuid()) @db.Uuid
  channelId     String         @map("channel_id") @db.VarChar(20)
  guildId       String?        @map("guild_id") @db.VarChar(20) // Null for DMs
  personalityId String         @map("personality_id") @db.Uuid
  personaId     String         @map("persona_id") @db.Uuid
  role          String         @db.VarChar(20)
  content       String
  createdAt     DateTime       @default(now()) @map("created_at")
  persona       Persona        @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personality   Personality    @relation(fields: [personalityId], references: [id], onDelete: Cascade)
  pendingMemory PendingMemory?

  @@index([channelId, personalityId, createdAt(sort: Desc)])
  @@index([personaId])
  @@map("conversation_history")
}

model PendingMemory {
  id                    String              @id @default(uuid()) @db.Uuid
  conversationHistoryId String              @unique @map("conversation_history_id") @db.Uuid
  personaId             String              @map("persona_id") @db.Uuid
  personalityId         String              @map("personality_id") @db.Uuid
  text                  String
  metadata              Json
  createdAt             DateTime            @default(now()) @map("created_at")
  attempts              Int                 @default(0)
  lastAttemptAt         DateTime?           @map("last_attempt_at")
  error                 String?
  conversationHistory   ConversationHistory @relation(fields: [conversationHistoryId], references: [id], onDelete: Cascade)

  @@index([personaId])
  @@index([personalityId])
  @@index([createdAt])
  @@index([attempts, createdAt]) // For pending memory retry queries
  @@map("pending_memories")
}

model ActivatedChannel {
  id            String      @id @default(uuid()) @db.Uuid
  channelId     String      @map("channel_id") @db.VarChar(20)
  personalityId String      @map("personality_id") @db.Uuid
  autoRespond   Boolean     @default(true) @map("auto_respond")
  createdBy     String?     @map("created_by") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  createdByUser User?       @relation(fields: [createdBy], references: [id])
  personality   Personality @relation(fields: [personalityId], references: [id], onDelete: Cascade)

  @@unique([channelId, personalityId])
  @@index([channelId])
  @@index([personalityId])
  @@map("activated_channels")
}

model Memory {
  id                   String                 @id @default(uuid()) @db.Uuid
  personaId            String?                @map("persona_id") @db.Uuid
  personalityId        String                 @map("personality_id") @db.Uuid
  content              String
  embedding            Unsupported("vector")?
  isSummarized         Boolean                @default(false) @map("is_summarized")
  originalMessageCount Int?                   @map("original_message_count")
  summarizedAt         DateTime?              @map("summarized_at")
  sessionId            String?                @map("session_id") @db.VarChar(255)
  canonScope           String?                @map("canon_scope") @db.VarChar(20)
  summaryType          String?                @map("summary_type") @db.VarChar(50)
  channelId            String?                @map("channel_id") @db.VarChar(20)
  guildId              String?                @map("guild_id") @db.VarChar(20)
  messageIds           String[]               @map("message_ids")
  senders              String[]
  createdAt            DateTime               @default(now()) @map("created_at")
  legacyShapesUserId   String?                @map("legacy_shapes_user_id") @db.Uuid
  sourceSystem         String                 @default("tzurot-v3") @map("source_system") @db.VarChar(50)
  persona              Persona?               @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personality          Personality            @relation(fields: [personalityId], references: [id], onDelete: Cascade)

  @@index([personaId])
  @@index([personalityId])
  @@index([createdAt(sort: Desc)])
  @@index([channelId])
  @@index([guildId])
  @@index([sessionId])
  @@index([isSummarized])
  @@index([legacyShapesUserId])
  @@index([sourceSystem])
  @@map("memories")
}

model ShapesPersonaMapping {
  id                 String   @id @default(uuid()) @db.Uuid
  shapesUserId       String   @unique @map("shapes_user_id") @db.Uuid
  personaId          String   @map("persona_id") @db.Uuid
  mappedAt           DateTime @default(now()) @map("mapped_at")
  mappedBy           String?  @map("mapped_by") @db.Uuid
  verificationStatus String   @default("unverified") @map("verification_status") @db.VarChar(50)
  persona            Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)

  @@index([personaId])
  @@map("shapes_persona_mappings")
}
